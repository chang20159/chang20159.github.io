<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[图片预加载和懒加载]]></title>
      <url>/%E5%9B%BE%E7%89%87%E9%A2%84%E5%8A%A0%E8%BD%BD%E5%92%8C%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
      <content type="html"><![CDATA[<p>预加载和懒加载是两种加载资源的方式，适用于不同场景。常见的是图片的预加载和懒加载，最近开发组件库，图片组件就用到了预加载和懒加载，记录一下实现方式和相关知识点。</p>
<a id="more"></a>
<h3 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h3><p>预加载就是预先加载资源，在使用时就不需要再加载。比如预先加载图片，显示图片时直接从缓存读取不需要再发出网络请求了。</p>
<p>那预加载是怎么实现的呢？我们可以使用Image元素构造器。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> image = <span class="keyword">new</span> Image()</div><div class="line">image.src = <span class="string">'https://www.dpfile.com/sc/ares_pics/f6f4d77d040d9a0ab77e94059d1772c8.png'</span></div></pre></td></tr></table></figure>
<p>在使用图片之前，创建一个Image实例，并给实例的src实行赋值就可以请求图片。</p>
<p>我们还可以使用纯CSS或者Ajax实现预加载。</p>
<p>预加载的好处是提前加载，用户操作过程中响应更快。但是在一些场景下会牺牲服务器性能或浪费用户流量。比如一屏的图片很多，如果全部加载完，用户不一定能看得到，一次性耗费流量大而且首次等待时间较长。</p>
<p>这时候我们就可以用懒加载~~~</p>
<h3 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h3><p>懒加载，就是延迟加载的意思。</p>
<p>常见的一个场景就是，图片开始进入屏幕范围才加载。实现的原理是，预先给一个默认图片，当图片进入窗口可视范围时，再将src属性替换。</p>
<p>那什么时候图片开始进入屏幕呢？我们可以通过这三者来计算：</p>
<ul>
<li>窗口顶部与文档顶部之间的距离（scrollTop）</li>
<li>可视窗口的高度（clientheight）</li>
<li>图片与文档顶部的距离(offsetTop)</li>
</ul>
<p><strong>计算屏幕可视窗口大小</strong></p>
<ul>
<li>window.innerHeight 标准浏览器及IE9+ </li>
<li>document.documentElement.clientHeight 标准浏览器及低版本IE标准模式 </li>
<li>document.body.clientHeight  低版本混杂模式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getClientHeight</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span>  <span class="built_in">window</span>.innerHeight ? <span class="built_in">window</span>.innerHeight : <span class="built_in">document</span>.compatMode === <span class="string">'BackCompat'</span> ? <span class="built_in">document</span>.body.clientHeight : <span class="built_in">document</span>.documentElement.clientHeight</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>计算顶部与文档顶部之间的距离</strong></p>
<ul>
<li>window.pageYOffset 标准浏览器及IE9+ </li>
<li>document.documentElement.scrollTop 兼容ie低版本的标准模式 </li>
<li>document.body.scrollTop 兼容混杂模式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBodyScrollTop</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span>  <span class="built_in">window</span>.pageYOffset ?  <span class="built_in">window</span>.pageYOffset :  <span class="built_in">document</span>.compatMode === <span class="string">'BackCompat'</span> ? <span class="built_in">document</span>.body.scrollTop : <span class="built_in">document</span>.documentElement.scrollTop</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>计算图片与文档顶部的距离</strong></p>
<p>可以通过offsetTop来计算</p>
<p>MDN上对于offsetTop的定义：返回当前元素相对于其 offsetParent 元素的顶部的距离。</p>
<blockquote>
<p>HTMLElement.offsetParent 是一个只读属性，返回一个指向最近的（closest，指包含层级上的最近）包含该元素的定位元素。如果没有定位的元素，则 offsetParent 为最近的 table cell 元素对象或根元素（标准模式下为 html；quirks 模式下为 body）。当元素的 style.display 设置为 “none” 时，offsetParent 返回 null。offsetParent 很有用，因为 offsetTop 和 offsetLeft 都是相对于其内边距边界的。</p>
</blockquote>
<p>所以图片与文档顶部的距离可以这样计算：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOffsetTop</span>(<span class="params">elem</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> offsetTop = <span class="number">0</span></div><div class="line">    <span class="keyword">if</span> (elem.offsetParent) &#123;</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            offsetTop += elem.offsetTop</div><div class="line">            elem = elem.offsetParent</div><div class="line">        &#125; <span class="keyword">while</span> (elem)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> offsetTop &gt;= <span class="number">0</span> ? offsetTop : <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>懒加载的实现：</p>
<p>当 bodyScrollTop + bodyHeight &gt;= imageTop时加载图片</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">lazyLoadImage()&#123;</div><div class="line">    <span class="keyword">this</span>.scrollTop = getBodyScrollTop()</div><div class="line">    <span class="keyword">this</span>.bodyHeight = getClientHeight()</div><div class="line">    <span class="keyword">this</span>.imageTop = getOffsetTop(<span class="keyword">this</span>.$refs.imageParentRef)</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.load &amp;&amp; (<span class="keyword">this</span>.scrollTop + <span class="keyword">this</span>.bodyHeight &gt;= <span class="keyword">this</span>.imageTop))&#123;</div><div class="line">        <span class="keyword">this</span>.loadImage()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">loadImage()&#123;</div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        <span class="keyword">let</span> img = <span class="keyword">new</span> Image()</div><div class="line">        img.src = <span class="keyword">this</span>.src</div><div class="line">        <span class="keyword">this</span>.load = <span class="literal">true</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(img.complete)&#123;</div><div class="line">            <span class="keyword">this</span>.handleLoadSuccess(img)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        img.onload = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">            img.onload = <span class="literal">null</span></div><div class="line">            <span class="keyword">this</span>.handleLoadSuccess(img)</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">catch</span>(err)&#123;</div><div class="line">        <span class="keyword">this</span>.$emit(<span class="string">'load'</span>,err)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当图片滚动到刚进入视图时，才会加载。但是可能由于网络速度较慢等原因，图片滚动到可视区域内时都没有加载完毕，会出现闪屏。</p>
<p>为了更好的用户体验，我们可以在用户再滚动半屏就能看到图片的位置就加载图片，加载的条件判断可以改成：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.scrollTop + <span class="keyword">this</span>.bodyHeight + <span class="keyword">this</span>.bodyHeight/<span class="number">2</span> &gt;= <span class="keyword">this</span>.imageTop</div></pre></td></tr></table></figure>
<p>另外，在加载图片完成后会触发onload事件，但img加载完成就会解除onload事件，src是异步加载图片的，如果在绑定事件前就已经加载完成，onload事件不会触发，这时可以先用img.complete属性判断。</p>
<blockquote>
<p>complete 属性可返回浏览器是否已完成对图像的加载，如果加载完成，则返回 true，否则返回fasle。</p>
</blockquote>
<p>在图片加载完成后，就可以在handleLoadSuccess方法中获取图片宽高，设置图片的显示方式了。</p>
<p><strong>注意： 懒加载图片应该先预加载默认图片(俗称：占位图)，用于计算图片位置。</strong></p>
]]></content>
      
        <categories>
            
            <category> 其他 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue组件开发常见问题及技巧]]></title>
      <url>/Vue%E7%BB%84%E4%BB%B6%E5%BA%93%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E5%8F%8A%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<p>Vue组件库开发，记录过程中的问题和经验。 手机端Vue组件，戳&gt;  <a href="https://github.com/future-team/swan-ui" target="_blank" rel="external">Swan UI</a></p>
<a id="more"></a>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="一、-click-native-组件原生事件触发两次"><a href="#一、-click-native-组件原生事件触发两次" class="headerlink" title="一、@click.native 组件原生事件触发两次"></a>一、@click.native 组件原生事件触发两次</h3><p>调成手机模式，原因还没弄清楚…囧</p>
<h3 id="二、props检测设定任意类型"><a href="#二、props检测设定任意类型" class="headerlink" title="二、props检测设定任意类型"></a>二、props检测设定任意类型</h3><p>设置为null</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">props: &#123;</div><div class="line">	title: null</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、组件外部传入class无法覆盖组件内部动态class"><a href="#三、组件外部传入class无法覆盖组件内部动态class" class="headerlink" title="三、组件外部传入class无法覆盖组件内部动态class"></a>三、组件外部传入class无法覆盖组件内部动态class</h3><p>当给自定义组件添加class时，组件根元素上class的顺序是：</p>
<ul>
<li>inner-class（内部class）</li>
<li>outer-class(外部传入class)</li>
<li>inner-computed-class(内部动态计算class)</li>
</ul>
<p>使用组件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">sw-button</span> <span class="attr">class</span>=<span class="string">"outer-class"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">sw-button</span>&gt;</span></div></pre></td></tr></table></figure>
<p>组件内部结构：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"inner-class"</span> <span class="attr">:class</span>=<span class="string">"&#123;'inner-dynamic-class':true&#125;"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<p>最终结构：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"inner-class outer-class inner-dynamic-class"</span> &gt;</span></div><div class="line">	按钮 </div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<p>对于需要修改组件样式的使用方，外部传入组件的class属性 outer-class 始终在内部动态属性之前，无法覆盖内部属性</p>
<p><strong>解决办法是：组件外部也是用动态class</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">sw-button</span> <span class="attr">:class</span>=<span class="string">"&#123;'outer-class':true&#125;"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">sw-button</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="四、根节点需唯一"><a href="#四、根节点需唯一" class="headerlink" title="四、根节点需唯一"></a>四、根节点需唯一</h3><p style="color:red;"><br>Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead.<br></p>

<p>外包一个div</p>
<h3 id="五、找不到vue-template-compiler模块"><a href="#五、找不到vue-template-compiler模块" class="headerlink" title="五、找不到vue-template-compiler模块"></a>五、找不到vue-template-compiler模块</h3><p style="color:red;"><br>ERROR in ./src/app.vue<br>Module build failed: Error: Cannot find module ‘vue-template-compiler’<br></p>

<figure class="highlight plain"><figcaption><span>install vue-template-compiler --save``` 不行</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">加上```sudo npm install vue-template-compiler</div></pre></td></tr></table></figure>
<h3 id="六：组件未注册"><a href="#六：组件未注册" class="headerlink" title="六：组件未注册"></a>六：组件未注册</h3><p style="color:red;"><br><br>[Vue warn]: Unknown custom element: <sw-button> - did you register the component correctly? For recursive components, make sure to provide the “name” option.<br><br></sw-button></p>

<p>添加：</p>
<ul>
<li>Vue.use(SwanUI)</li>
<li>Vue.component(Button.name, Button)</li>
</ul>
<h3 id="七：-webpack2中的后缀-loader不能省略"><a href="#七：-webpack2中的后缀-loader不能省略" class="headerlink" title="七： webpack2中的后缀-loader不能省略"></a>七： webpack2中的后缀-loader不能省略</h3><p style="color:red;"><br>Module build failed: Error: The node API for <code>babel</code> has been moved to <code>babel-core</code>.</p>

<p>webpack中的loader：  babel 改成 babel-loader</p>
<h3 id="八、样式文件中引入npm安装包报错"><a href="#八、样式文件中引入npm安装包报错" class="headerlink" title="八、样式文件中引入npm安装包报错"></a>八、样式文件中引入npm安装包报错</h3><p style="color:red;"><br>Module not found: Error: Can’t resolve ‘./phoenix-styles/less/public.less’ in ‘/Users/chang/future-team/swan-ui/src/modules’<br> @ ./~/css-loader!./~/vue-loader/lib/style-compiler?{“vue”:true,”id”:”data-v-e577e6cc”,”scoped”:false,”hasInlineConfig”:false}!./~/vue-loader/lib/selector.js?type=styles&amp;index=0!./src/modules/Input.vue 3:10-95<br></p>

<p> *.vue文件中引入npm安装包:</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;style lang="less" src="phoenix-styles/less/public.less"&gt;&lt;/style&gt;</div></pre></td></tr></table></figure>
<h3 id="九、class属性不能作为组件的prop"><a href="#九、class属性不能作为组件的prop" class="headerlink" title="九、class属性不能作为组件的prop"></a>九、class属性不能作为组件的prop</h3><p style="color:red;"><br> “class” is a reserved attribute and cannot be used as component prop.<br></p>

<p>我想拿到传给组件的class，不想让他直接添加到组件根元素上肿么破？</p>
<blockquote>
<p>Vue handles passing the class attribute through automatically - I think you can just delete the entire object and prop declaration and it will continue working fine.</p>
</blockquote>
<h2 id="开发技巧"><a href="#开发技巧" class="headerlink" title="开发技巧"></a>开发技巧</h2><h3 id="一、将属性合并赋值"><a href="#一、将属性合并赋值" class="headerlink" title="一、将属性合并赋值"></a>一、将属性合并赋值</h3><p>利用v-bind可以直接赋值对象</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"ph-multi-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"`ph-$&#123;type&#125;`"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind</span>=<span class="string">"nativeProps"</span> @<span class="attr">change</span>=<span class="string">"handleChange"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;label&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure>
<p>-</p>
<h3 id="二、-在vue的render方法中使用JSX"><a href="#二、-在vue的render方法中使用JSX" class="headerlink" title="二、 在vue的render方法中使用JSX"></a>二、 在vue的render方法中使用JSX</h3><p>babel配置文件.babelrc添加插件 transform-vue-jsx</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"presets"</span>: [[<span class="string">"es2015"</span>, &#123; <span class="attr">"loose"</span>: <span class="literal">false</span> &#125;]],</div><div class="line">  <span class="attr">"plugins"</span>: [<span class="string">"transform-vue-jsx"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>安装插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev babel-plugin-transform-vue-jsx</div></pre></td></tr></table></figure>
<h3 id="三、自定义-v-model-mixins"><a href="#三、自定义-v-model-mixins" class="headerlink" title="三、自定义 v-model + mixins"></a>三、自定义 v-model + mixins</h3><p>隐藏/显示类组件采用双向绑定，避免书写关闭打开等样板代码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 定制隐藏/显示切换类组件的 v-model</div><div class="line"> */</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">model</span>: &#123;</div><div class="line">        <span class="attr">prop</span>: <span class="string">'visible'</span>,</div><div class="line">        <span class="attr">event</span>: <span class="string">'toggle'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        handleToggle(val)&#123;</div><div class="line">            <span class="keyword">this</span>.$emit(<span class="string">'toggle'</span>,val)</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">props</span>: &#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 是否可见标识</div><div class="line">         * @property visible</div><div class="line">         * @type Boolean</div><div class="line">         * */</div><div class="line">        visible: &#123;</div><div class="line">            <span class="attr">type</span>: <span class="built_in">Boolean</span>,</div><div class="line">            <span class="attr">default</span>: <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="四、声明组件props时，同时声明组件内部使用的其他组件的props"><a href="#四、声明组件props时，同时声明组件内部使用的其他组件的props" class="headerlink" title="四、声明组件props时，同时声明组件内部使用的其他组件的props"></a>四、声明组件props时，同时声明组件内部使用的其他组件的props</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">sw-checkbox</span> <span class="attr">v-bind</span>=<span class="string">"$props"</span> @<span class="attr">change</span>=<span class="string">"handleChange"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">import</span> SwCheckbox <span class="keyword">from</span> <span class="string">'../checkbox/Checkbox.vue'</span></div><div class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'SwRadio'</span>,</div><div class="line">        <span class="attr">components</span>: &#123;SwCheckbox&#125;,</div><div class="line">        <span class="attr">methods</span>: &#123;</div><div class="line">            handleChange(value,evt)&#123;</div><div class="line">                <span class="keyword">this</span>.$emit(<span class="string">'change'</span>,value,evt)</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">props</span>: <span class="built_in">Object</span>.assign(&#123;&#125;,SwCheckbox.props,&#123;</div><div class="line">            <span class="attr">type</span>: &#123;</div><div class="line">                <span class="attr">type</span>: <span class="built_in">String</span>,</div><div class="line">                <span class="attr">default</span>: <span class="string">'radio'</span></div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="我希望vue可以改进的地方"><a href="#我希望vue可以改进的地方" class="headerlink" title="我希望vue可以改进的地方"></a>我希望vue可以改进的地方</h2><ul>
<li>props校验希望能自定义错误提示信息</li>
<li>props属性必须声明才有用，这对类似Input之类的组件扩展性不好，需要把input属性都声明出来，有点啰嗦。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[给Hexo+Github page博客绑定域名的一些问题]]></title>
      <url>/%E7%BB%99hexo+githubpage%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>项目终于做完了，忽然想到买了很久的域名一直没有用，本来以为还要备案啥的，就一直没倒腾。<br>今天研究了下域名绑定，居然很快就弄好了。但是也遇到了几个问题，还是记录一下吧~</p>
<ul>
<li>升级Node.js后，执行hexo generate报错</li>
<li>Hexo博客绑定域名 CNAME文件问题</li>
<li>个人主页添加域名后项目主页访问不了了</li>
</ul>
<a id="more"></a>
<h3 id="升级Node-js后，执行hexo-generate报错"><a href="#升级Node-js后，执行hexo-generate报错" class="headerlink" title="升级Node.js后，执行hexo generate报错"></a>升级Node.js后，执行hexo generate报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Error: The module &apos;/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/build/Release/DTraceProviderBindings.node&apos;</div><div class="line">was compiled against a different Node.js version using</div><div class="line">NODE_MODULE_VERSION 48. This version of Node.js requires</div><div class="line">NODE_MODULE_VERSION 51. Please try re-compiling or re-installing</div><div class="line">the module (for instance, using npm rebuild ornpm install).</div></pre></td></tr></table></figure>
<p>重新安装 hexo-cli</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>如果提示没有权限，再加上sudo。<br>然后删除node_modules 再重新 npm install 国内hexo好像都得cnpm</p>
<h3 id="Hexo博客绑定域名"><a href="#Hexo博客绑定域名" class="headerlink" title="Hexo博客绑定域名"></a>Hexo博客绑定域名</h3><p>使用的github page，绑定域名过程如下：</p>
<p><strong>1、在阿里云购买域名</strong></p>
<p><a href="https://wanwang.aliyun.com/domain/" target="_blank" rel="external">戳链接</a>   恩，chang20159.com 这个域名我买下了</p>
<p><strong>2、准备好github项目的机器IP</strong></p>
<p>终端执行    <code>ping chang20159.github.io</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;ping chang20159.github.io</div><div class="line">PING github.map.fastly.net (151.101.72.133): 56 data bytes</div><div class="line">64 bytes from 151.101.72.133: icmp_seq=0 ttl=50 time=90.449 ms</div><div class="line">64 bytes from 151.101.72.133: icmp_seq=1 ttl=50 time=91.037 ms</div></pre></td></tr></table></figure>
<p>  拿到github项目的机器IP   151.101.72.133</p>
<p><strong>3、绑定域名</strong></p>
<p>  要把域名chang20159.com 与 github page项目 chang20159.github.io绑定</p>
<p>  域名买好了之后，在控制台找到域名的入口，就可以看到这个，添加了主机记录@和www<br>  这样我们就可以访问 chang20159.com 和 www.chang20159.com 了<br>  <img src="/images/domain/domain1.png" alt=""><br>  点击域名&gt;域名解析&gt;新手引导设置<br> <img src="/images/domain/domain2.png" alt=""><br>  按步骤绑定，绑定好了就能看到下面这个<br> <img src="/images/domain/domain3.png" alt=""></p>
<p>  现在还不能访问chang20159.com，还有一步<br><strong>4、 添加CNAME文件</strong><br>在chang20159.github.io项目中添加CNAME文件，文件没有后缀名，文件内容是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chang20159.com</div></pre></td></tr></table></figure>
<p>CNAME文件要添加到hexo项目的source目录下，在github项目的setting里面有个Custom domain选项，如果在那里添加cname也可以，但是hexo项目不行，因为如果source目录下没有cname文件的话每次deploy后那个设置又没有了。</p>
<h3 id="个人主页添加域名后项目主页访问不了了"><a href="#个人主页添加域名后项目主页访问不了了" class="headerlink" title="个人主页添加域名后项目主页访问不了了"></a>个人主页添加域名后项目主页访问不了了</h3><p>github上还有个项目sharing，本来没有cname，通过chang20159.github.io/sharing可以直接访问这个项目的，但是个人主页项目cname后项目主页就404了。</p>
<p>因为 访问 chang20159.github.io/sharing 会跳转到 chang20159.com/sharing ,但是chang20159.github.io项目是没有sharing文件的，所以就404了。</p>
<p>问题有了，办法也是有的。</p>
<p><strong>1、 在sharing这个项目中也添加CNAME文件</strong><br>文件内容是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sharing.chang20159.com</div></pre></td></tr></table></figure>
<p><strong>2、 在阿里云域名管理页面chang20159.com下添加一个记录</strong><br>就是下面这样：<br>这样就可以通过sharing.chang20159.com 访问 sharing项目的内容了。<br> <img src="/images/domain/domain4.png" alt=""></p>
<p>这样 访问sharing.chang20159.com 就能与机器151.101.72.133连接，然后通过cname找到sharing项目了</p>
]]></content>
      
        <categories>
            
            <category> 静态博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Immutable.js 使用mergeWith解决Map和List相互嵌套时的合并问题]]></title>
      <url>/Immutable.js%E4%BD%BF%E7%94%A8mergeWith%E8%A7%A3%E5%86%B3Map%E5%92%8CList%E7%9B%B8%E4%BA%92%E5%B5%8C%E5%A5%97%E6%97%B6%E7%9A%84%E5%90%88%E5%B9%B6%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>这里有两组不可变数据，Map里面有List，List 又包含Map。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> defaultData = Immutable.fromJS(&#123;</div><div class="line">	  <span class="attr">condition</span>:&#123;</div><div class="line">	    <span class="attr">mainCategory</span>: <span class="number">23</span>,</div><div class="line">	    <span class="attr">category</span>: <span class="number">2185</span></div><div class="line">	  &#125;,</div><div class="line">	  <span class="attr">categoryOptions</span>: [</div><div class="line">	        &#123; <span class="attr">id</span>:<span class="number">51</span>, <span class="attr">name</span>:<span class="string">"KTV"</span> &#125;,</div><div class="line">	        &#123; <span class="attr">id</span>:<span class="number">2184</span>, <span class="attr">name</span>:<span class="string">"录音棚"</span> &#125;,</div><div class="line">	        &#123; <span class="attr">id</span>:<span class="number">2185</span>, <span class="attr">name</span>:<span class="string">"其他KTV"</span> &#125;</div><div class="line">	  ],</div><div class="line">	  <span class="attr">regionOptions</span>: [</div><div class="line">	      &#123; <span class="attr">id</span>: <span class="number">1924</span>, <span class="attr">name</span>: <span class="string">"古城/八角"</span> &#125;</div><div class="line">	  ]</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">const</span> data = Immutable.fromJS(&#123;</div><div class="line">	  <span class="attr">condition</span>:&#123;</div><div class="line">	    <span class="attr">category</span>: <span class="number">275</span></div><div class="line">	  &#125;,</div><div class="line">	  <span class="attr">categoryOptions</span>: [</div><div class="line">	      &#123; <span class="attr">id</span>:<span class="number">275</span>, <span class="attr">name</span>: <span class="string">"洗浴足疗养生"</span> &#125;,</div><div class="line">	      &#123; <span class="attr">id</span>:<span class="number">2139</span>, <span class="attr">name</span>: <span class="string">"棋牌"</span> &#125;</div><div class="line">	  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>要将data与defaultData合并，Immutable.js合并有哪些方法？ </p>
<ul>
<li>merge </li>
<li>mergeDeep</li>
<li>mergeWith</li>
</ul>
<a id="more"></a>
<p>可以使用merge或者mergeDeep方法合并，都只对相同的key合并，不同的key保留，但merge是浅合并，mergeDeep是深合并。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> resultMerge = defaultData.merge(data)</div><div class="line"><span class="built_in">console</span>.dir(resultMerge.toJS())</div><div class="line"></div><div class="line"><span class="keyword">const</span> resultMergeDeep = defaultData.mergeDeep(data)</div><div class="line"><span class="built_in">console</span>.dir(resultMergeDeep.toJS())</div></pre></td></tr></table></figure>
<p>上面代码执行后，merge的结果是：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"condition"</span>:&#123;</div><div class="line">        <span class="attr">"category"</span>:<span class="number">275</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"categoryOptions"</span>:[</div><div class="line">        &#123; <span class="attr">"id"</span>:<span class="number">275</span>, <span class="attr">"name"</span>:<span class="string">"洗浴足疗养生"</span> &#125;,</div><div class="line">        &#123; <span class="attr">"id"</span>:<span class="number">2139</span>, <span class="attr">"name"</span>:<span class="string">"棋牌"</span> &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">"regionOptions"</span>:[</div><div class="line">        &#123; <span class="attr">"id"</span>:<span class="number">1924</span>, <span class="attr">"name"</span>:<span class="string">"古城/八角"</span> &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，具有相同key的 condition和categoryOptions完全被替代了，regionOptions因为没有相同key比较因而保留。</p>
<p>mergeDeep的执行结果是：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"condition"</span>:&#123;</div><div class="line">        <span class="attr">"mainCategory"</span>:<span class="number">23</span>,</div><div class="line">        <span class="attr">"category"</span>:<span class="number">275</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"categoryOptions"</span>:[</div><div class="line">        &#123; <span class="attr">"id"</span>:<span class="number">275</span>, <span class="attr">"name"</span>:<span class="string">"洗浴足疗养生"</span> &#125;,</div><div class="line">        &#123; <span class="attr">"id"</span>:<span class="number">2139</span>, <span class="attr">"name"</span>:<span class="string">"棋牌"</span> &#125;,</div><div class="line">        &#123; <span class="attr">"id"</span>:<span class="number">2185</span>, <span class="attr">"name"</span>:<span class="string">"其他KTV"</span> &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">"regionOptions"</span>:[</div><div class="line">        &#123; <span class="attr">"id"</span>:<span class="number">1924</span>, <span class="attr">"name"</span>:<span class="string">"古城/八角"</span> &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Map的深度合并会根据key合并Map的内容，数组深度合并也一样，会按照数组索引合并，所以就有上面的结果，前者的categoryOptions第一项和第二项被后者第一项和第二项替换了，但第三项仍然保留。</p>
<p>再举个例子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> array = Immutable.fromJS([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</div><div class="line"><span class="keyword">const</span> array1 = Immutable.fromJS([<span class="string">'a'</span>,<span class="string">'c'</span>])</div><div class="line"></div><div class="line"><span class="keyword">const</span> result = array.mergeDeep(array1)</div><div class="line"><span class="comment">//output:  ['a','c','c']</span></div></pre></td></tr></table></figure>
<p>数组的这种深合并符合深度合并的概念，但是一般不符合实际应用需求。</p>
<p>比如上面defaultData中的categoryOptions属于‘K歌’这个分类，data中的categoryOptions属于‘休闲娱乐这个分类’,我不希望合并之后两个分类混杂在一起，而是希望完全被替代</p>
<h2 id="Map深合并，List浅合并"><a href="#Map深合并，List浅合并" class="headerlink" title="Map深合并，List浅合并"></a>Map深合并，List浅合并</h2><p>幸好，Immutable.js提供了mergeWith方法，我可以自定义合并的逻辑。</p>
<p>mergeWith的用法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> resultMergeWith = defaultData.mergeWith(merger,data)</div></pre></td></tr></table></figure>
<p>这样我只要实现merger方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">merger</span>(<span class="params">prev,next</span>)</span>&#123;</div><div class="line">	<span class="comment">// console.log(prev,next);</span></div><div class="line">	<span class="keyword">if</span>(Immutable.List.isList(prev) &amp;&amp; Immutable.List.isList(next))&#123;</div><div class="line">		<span class="keyword">return</span> next</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(prev &amp;&amp; prev.mergeWith)&#123;</div><div class="line">		<span class="keyword">return</span> prev.mergeWith(merger,next)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> next</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>就可以得到resultMergeWith的结果：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"condition"</span>:&#123;</div><div class="line">        <span class="attr">"mainCategory"</span>:<span class="number">23</span>,</div><div class="line">        <span class="attr">"category"</span>:<span class="number">275</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"categoryOptions"</span>:[</div><div class="line">        &#123; <span class="attr">"id"</span>:<span class="number">275</span>, <span class="attr">"name"</span>:<span class="string">"洗浴足疗养生"</span> &#125;,</div><div class="line">        &#123; <span class="attr">"id"</span>:<span class="number">2139</span>, <span class="attr">"name"</span>:<span class="string">"棋牌"</span> &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">"regionOptions"</span>:[</div><div class="line">        &#123; <span class="attr">"id"</span>:<span class="number">1924</span>, <span class="attr">"name"</span>:<span class="string">"古城/八角"</span> &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完美~~~</p>
<h2 id="Map深合并，List-Concat"><a href="#Map深合并，List-Concat" class="headerlink" title="Map深合并，List Concat"></a>Map深合并，List Concat</h2><p>我在项目中遇到的场景，是需要像上面那样将数组全部替换的，应该也有需要把数组concat的场景吧，也是可以自己实现一个merger方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">merger</span>(<span class="params">prev,next</span>)</span>&#123;</div><div class="line">  <span class="comment">// console.log(prev,next);</span></div><div class="line">  <span class="keyword">if</span>(Immutable.List.isList(prev) &amp;&amp; Immutable.List.isList(next))&#123;</div><div class="line">    <span class="keyword">return</span> prev.concat(next)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(prev &amp;&amp; prev.mergeWith)&#123;</div><div class="line">    <span class="keyword">return</span> prev.mergeWith(merger,next)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> next</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那结果就是下面这样的：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"condition"</span>:&#123;</div><div class="line">        <span class="attr">"mainCategory"</span>:<span class="number">23</span>,</div><div class="line">        <span class="attr">"category"</span>:<span class="number">275</span> </div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"categoryOptions"</span>:[</div><div class="line">        &#123; <span class="attr">"id"</span>:<span class="number">51</span>, <span class="attr">"name"</span>:<span class="string">"KTV"</span> &#125;,</div><div class="line">        &#123; <span class="attr">"id"</span>:<span class="number">2184</span>, <span class="attr">"name"</span>:<span class="string">"录音棚"</span> &#125;,</div><div class="line">        &#123; <span class="attr">"id"</span>:<span class="number">2185</span>, <span class="attr">"name"</span>:<span class="string">"其他KTV"</span> &#125;,</div><div class="line">        &#123; <span class="attr">"id"</span>:<span class="number">275</span>, <span class="attr">"name"</span>:<span class="string">"洗浴足疗养生"</span> &#125;,</div><div class="line">        &#123; <span class="attr">"id"</span>:<span class="number">2139</span>, <span class="attr">"name"</span>:<span class="string">"棋牌"</span> &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">"regionOptions"</span>:[</div><div class="line">        &#123; <span class="attr">"id"</span>:<span class="number">1924</span>, <span class="attr">"name"</span>:<span class="string">"古城/八角"</span> &#125;</div><div class="line">    ] </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完毕~~</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://facebook.github.io/immutable-js/" target="_blank" rel="external">Immutable.js</a></li>
<li><a href="https://github.com/facebook/immutable-js/issues/406" target="_blank" rel="external">mergeDeep clobbers List items; concatDeep isn’t implemented</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 工作 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[使用socket.io进行websocket通信无法连接]]></title>
      <url>/socket.io%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="socket-io连接后一直polling"><a href="#socket-io连接后一直polling" class="headerlink" title="socket.io连接后一直polling"></a>socket.io连接后一直polling</h2><p>客户端启动后一直发送这个连接<strong><a href="http://127.0.0.1:8080/socket.io/?EIO=3&amp;transport=polling&amp;t=1496800827548-2891" target="_blank" rel="external">http://127.0.0.1:8080/socket.io/?EIO=3&amp;transport=polling&amp;t=1496800827548-2891</a></strong><br><img src="/images/socketio_pooling.png" alt=""><br><a id="more"></a><br>并不想使用polling,我想用websocket通信，在连接时，后面带上参数，指明websocket方式优先<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">window.socket = io.connect(&apos;ws://127.0.0.1:8080&apos;,&#123;transports:[&apos;websocket&apos;,&apos;polling&apos;]&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="使用socket-io进行websocket通信，返回400"><a href="#使用socket-io进行websocket通信，返回400" class="headerlink" title="使用socket.io进行websocket通信，返回400"></a>使用socket.io进行websocket通信，返回400</h2><p><img src="/images/socketio_400.png" alt=""></p>
<p>由于请求是发送到Nginx反向代理服务器，nginx需做相应配置，支持客户端和服务端保持连接,例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">location /wsapp/ &#123;</div><div class="line">    proxy_pass http://wsbackend;</div><div class="line">    proxy_http_version 1.1;</div><div class="line">    proxy_set_header Upgrade $http_upgrade;</div><div class="line">    proxy_set_header Connection &quot;upgrade&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://nginx.org/en/docs/http/websocket.html" target="_blank" rel="external">WebSocket proxying</a></li>
<li><a href="https://www.nginx.com/blog/websocket-nginx/" target="_blank" rel="external">NGINX as a WebSocket Proxy</a></li>
<li><a href="https://tools.ietf.org/html/rfc2616#section-13.5.1" target="_blank" rel="external">Hypertext Transfer Protocol – HTTP/1.1</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 工作 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> socket.io </tag>
            
            <tag> websocket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解BFC]]></title>
      <url>/%E7%90%86%E8%A7%A3BFC/</url>
      <content type="html"><![CDATA[<p>网上有太多关于BFC的文章，看了很多，还是不能理解。想想还是看全英文的官方文档，关于BFC的规则，在w3c文档中的<a href="https://www.w3.org/TR/CSS21/visuren.html" target="_blank" rel="external">第9章</a>和<a href="https://www.w3.org/TR/CSS21/visudet.html" target="_blank" rel="external">第10章</a>全局搜一下Block formatting context，就能找到。<br><a id="more"></a></p>
<h2 id="什么是BFC"><a href="#什么是BFC" class="headerlink" title="什么是BFC"></a>什么是BFC</h2><p>CSS中每个元素都会根据盒模型生成0个或多个Box，Box是布局的对象和基本单位，Visual formatting model描述了一套规则，决定元素如何对其内容进行布局，以及与其他元素的关系和作用。盒布局由以下几个方面组成：</p>
<ul>
<li>盒的尺寸和类型（明确指定、受限或没有指定   行内级盒、块级盒）</li>
<li>盒布局方案（常规流、浮动、绝对定位）</li>
<li>文档树中元素之间的关系</li>
<li>其他 如视口、图片大小等</li>
</ul>
<p>对于浮动布局，由float属性决定<br>对于绝对定位布局，由position属性决定<br>而对于常规流的布局，则与display属性有很大关系</p>
<p>根据display属性的计算值，可以将box分为块级盒和行内级盒</p>
<ul>
<li>块级盒<br>  display的计算值 为 block, list-item 或 table </li>
<li>行内级盒<br>  display的计算值为 inline, inline-block 或 inline-table </li>
</ul>
<p>在常规流中，不同的Box会参与不同formatting context（在这个格式化上下文中有一套渲染规则），block-level box（块级盒）参与block formatting context（BFC）中的规则，inline-level box（行内级盒）参与 inline formatting context(IFC)中的规则。</p>
<p>我们常常会让一个元素生成block formatting context（BFC），在这个block formatting context中的块级盒都遵循一套布局规则，下面会讲怎样让一个元素生成BFC以及块级盒在BFC中会遵循哪些规则</p>
<h2 id="哪些元素会触发BFC"><a href="#哪些元素会触发BFC" class="headerlink" title="哪些元素会触发BFC"></a>哪些元素会触发BFC</h2><p>官方文档是这样说的</p>
<blockquote>
<p>Floats, absolutely positioned elements, block containers (such as inline-blocks, table-cells, and table-captions) that are not block boxes, and block boxes with ‘overflow’ other than ‘visible’ (except when that value has been propagated to the viewport) establish new block formatting contexts for their contents.</p>
</blockquote>
<p>解释一下就是，以下这些元素可以生成BFC,其内部块级盒按照BFC的规则布局</p>
<ul>
<li>浮动元素 float非none</li>
<li>绝对定位元素 position为absolute和fixed</li>
<li>diplay属性为：inline-block | table-cell | table-caption等非块盒</li>
<li>overflow属性是非visible值</li>
</ul>
<p>一般情况下，都是使用overflow:hidden来触发BFC，对元素内部布局影响比较小，也不会影响其他元素</p>
<h2 id="BFC规则"><a href="#BFC规则" class="headerlink" title="BFC规则"></a>BFC规则</h2><p>官方文档是这样说的：</p>
<blockquote>
<p>In a block formatting context, boxes are laid out one after the other, vertically, beginning at the top of a containing block. </p>
</blockquote>
<hr>
<blockquote>
<p>The vertical distance between two sibling boxes is determined by the ‘margin’ properties. Vertical margins between adjacent block-level boxes in a block formatting context collapse.</p>
</blockquote>
<hr>
<blockquote>
<p>In a block formatting context, each box’s left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch). This is true even in the presence of floats (although a box’s line boxes may shrink due to the floats), unless the box establishes a new block formatting context (in which case the box itself may become narrower due to the floats).</p>
</blockquote>
<hr>
<blockquote>
<p>The border box of a table, a block-level replaced element, or an element in the normal flow that establishes a new block formatting context (such as an element with ‘overflow’ other than ‘visible’) must not overlap the margin box of any floats in the same block formatting context as the element itself.</p>
</blockquote>
<hr>
<blockquote>
<p>But in CSS 2.1, if, within the block formatting context, there is an in-flow negative vertical margin such that the float’s position is above the position it would be at were all such negative margins set to zero, the position of the float is undefined.</p>
</blockquote>
<hr>
<blockquote>
<p>10.6.7 ‘Auto’ heights for block formatting context roots<br>In certain cases (see, e.g., sections 10.6.4 and 10.6.6 above), the height of an element that establishes a block formatting context is computed as follows:</p>
<p>If it only has inline-level children, the height is the distance between the top of the topmost line box and the bottom of the bottommost line box.</p>
<p>If it has block-level children, the height is the distance between the top margin-edge of the topmost block-level child box and the bottom margin-edge of the bottommost block-level child box.</p>
<p>Absolutely positioned children are ignored, and relatively positioned boxes are considered without their offset. Note that the child box may be an anonymous block box.</p>
<p>In addition, if the element has any floating descendants whose bottom margin edge is below the element’s bottom content edge, then the height is increased to include those edges. Only floats that participate in this block formatting context are taken into account, e.g., floats inside absolutely positioned descendants or other floats are not.</p>
</blockquote>
<p>按照顺序来解释一下BFC规则就是这些<br>1、从包含块顶部开始，内部的box一个接一个垂直排列<br>2、两相邻box在垂直方向的距离由margin决定，<strong>属于同一个BFC的相邻box的margin会发生重叠collapse</strong><br>3、在同一个BFC中，每个box的左外边缘（margin边界）与包含块的左边缘(border内边界)接触（对于从右至左排列的布局则相反）;这对于浮动元素也一样<br>4、<strong>常规流中一个建立块格式化上下文的元素（触发BFC的元素）不会和任何浮动元素的外边界框重叠</strong><br>5、没明白啥意思 囧<br>6、关于BFC中元素高度的计算<br> 在某些情况下，建立块格式化上下文的元素的高度是这样计算的：</p>
<ul>
<li>如果它只有行内级child box，它的高度就是最上面的线框的顶部和最下面的线框的底部之间的距离；</li>
<li>如果它有块级child box，它的高度就是最上面块child box的上外边界（margin-top）与最下面块child box的下外边界（margin-bottom）之间的距离；</li>
<li>绝对定位的child box会被忽略，相对定位的child box不将偏移计算在内。注意child box可能是匿名块盒；</li>
<li>另外，<strong>如果这个元素有任何浮动后代的底部外边界超出了在这个元素底部内容边界，这些超出的边界也计算在元素的高度之内</strong><br>注意：只有参与这个元素产生的BFC的浮动元素才会参与此元素的高度计算，在绝对定位的child box中的浮动元素不参与计算</li>
</ul>
<h2 id="BFC的应用"><a href="#BFC的应用" class="headerlink" title="BFC的应用"></a>BFC的应用</h2><p>这是一个测试的文档结构和样式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"other"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span>&#123;</div><div class="line">    <span class="attribute">border</span>:<span class="number">5px</span> solid <span class="number">#000</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.div1</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#43235e</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.div2</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#ee5511</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.other</span>&#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#666</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="解决垂直margin重叠问题"><a href="#解决垂直margin重叠问题" class="headerlink" title="解决垂直margin重叠问题"></a>解决垂直margin重叠问题</h3><p>div1和div2的上下外边距重叠,间距两者最大值：30px</p>
<div style="border:5px solid #000;color:#fff;"><div style="width: 200px;
            height: 100px;
            background-color: #43235e;
            margin-bottom: 20px;">div1  margin-bottom: 10px</div><div style="width: 300px;
            height: 100px;
            background-color: #ee5511;
            margin-top: 30px;">div2   margin-top: 20px</div></div> <div style="background-color: #666;
            height: 100px;"></div>



<p>第二条说：属于同一个BFC的相邻box的margin会发生重叠，那只要相邻的box不属于同一个BFC，垂直margin就不会重叠啦</p>
<div style="border:5px solid #000;color:#fff;"><div style="overflow:hidden"><div style="width: 200px;
            height: 100px;
            background-color: #43235e;
            margin-bottom: 20px;">div1  margin-bottom: 10px</div></div><div style="width: 300px;
            height: 100px;
            background-color: #ee5511;
            margin-top: 30px;">div2   margin-top: 20px</div><br>    </div> <div style="background-color: #666;
            height: 100px;"></div>

<h3 id="自适应多栏布局"><a href="#自适应多栏布局" class="headerlink" title="自适应多栏布局"></a>自适应多栏布局</h3><p>下面div1左浮动，脱离了常规流，margin外边界与包含块左侧边框内边界接触，div2向上移动，与div1重叠。</p>
<div style="border:5px solid #000;color:#fff;"><div style="width: 200px;
            height: 50px;
            background-color: #43235e;
            margin-bottom: 20px;float:left">div1 左浮动 </div><div style="width: 600px;
            height: 100px;
            background-color: #ee5511;">div2  </div><br>    </div> <div style="background-color: #666;
            height: 100px;"></div>

<p>根据第四条：<strong>常规流中一个建立块格式化上下文的元素（触发BFC的元素）不会和任何浮动元素的外边界框重叠</strong><br>所以只要让div2形成BFC，就不会重叠了,这里还是用overflow的非visible属性生成BFC<br>  <div style="border:5px solid #000;color:#fff;"><div style="width: 200px;
            height: 50px;
            background-color: #43235e;
            margin-bottom: 20px;float:left">div1 左浮动 </div><div style="width: 600px;
            height: 100px;
            background-color: #ee5511;
            overflow:hidden;">div2触发BFC  </div><br>    </div> <div style="background-color: #666;
            height: 100px;"></div>          </p>
<h3 id="解决浮动元素父元素高度塌陷问题"><a href="#解决浮动元素父元素高度塌陷问题" class="headerlink" title="解决浮动元素父元素高度塌陷问题"></a>解决浮动元素父元素高度塌陷问题</h3><p>这里只有div1是浮动的，因为浮动元素脱离文档流，不参与父元素高度的计算</p>
<div style="border:5px solid #000;color:#fff;"><div style="width: 200px;
            height: 100px;
            background-color: #43235e;
            margin-bottom: 20px;float:left">div1 左浮动</div><div style="width: 500px;
            height: 50px;
            background-color: #ee5511;
            margin-top: 30px;
        ">div2   margin-top: 20px</div></div> <div style="background-color: #666;
            height: 100px;"></div>


<p>根据第六条，<br>如果一个生成BFC的元素有任何浮动后代的底部外边界超出了在这个元素底部内容边界，这些超出的边界也计算在元素的高度之内<br>所以，如果让container触发BFC，浮动元素div1超出container的那部分也会计入container的高度,<strong>包括浮动元素div1的外边距</strong></p>
<p><div style="border:5px solid #000;overflow:hidden;color:#fff;"><div style="width: 200px;
            height: 100px;
            background-color: #43235e;
            margin-bottom: 20px;float:left">div1左浮动</div><div style="width: 500px;
            height: 50px;
            background-color: #ee5511;
            margin-top: 30px;
        ">div2   margin-top: 20px</div></div> <div style="background-color: #666;
            height: 100px;"></div></p>
<h2 id="BFC兼容性"><a href="#BFC兼容性" class="headerlink" title="BFC兼容性"></a>BFC兼容性</h2><p>在IE6和IE7中不是所有元素都拥有布局，元素是否拥有布局由hasLayout属性决定，hasLayout与BFC相似，有触发hasLayoutyongyong（hasLayout == true）的条件，也有拥有布局后的一套规则。<br>触发hasLayout的条件有：</p>
<ul>
<li>float: 非none</li>
<li>display: inline-block</li>
<li>position: absolute</li>
<li>width: 非auto</li>
<li>height: 非auto</li>
<li>zoom: 非normal值</li>
<li>writing-mode: tb-rl</li>
</ul>
<p>hasLayout == true时的规则：</p>
<ul>
<li>相对定位的元素没有布局</li>
<li>拥有布局的元素外边距不叠加</li>
<li>等等。。</li>
</ul>
<p>在IE6和IE7中可以通过为元素添加zoom：1属性触发haslayout，修复因浮动引起的高度塌陷问题</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.w3.org/TR/CSS21/box.html#box-dimensions" target="_blank" rel="external">Box model</a></li>
<li><a href="Visual formatting model">Visual formatting model</a></li>
<li><a href="https://www.w3.org/TR/CSS21/visudet.html" target="_blank" rel="external">Visual formatting model details</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display" target="_blank" rel="external">display</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nodejs开发问题小结]]></title>
      <url>/Node%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="执行node-app-js-监听80端口报错"><a href="#执行node-app-js-监听80端口报错" class="headerlink" title="执行node app.js 监听80端口报错"></a>执行node app.js 监听80端口报错</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//app.js</span></div><div class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</div><div class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Koa();</div><div class="line">...</div><div class="line">app.listen(<span class="number">80</span>);</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">events.js:160</div><div class="line">      throw er; // Unhandled &apos;error&apos; event</div><div class="line">      ^</div><div class="line"></div><div class="line">Error: listen EACCES 0.0.0.0:80</div><div class="line">    at Object.exports._errnoException (util.js:1026:11)</div><div class="line">    at exports._exceptionWithHostPort (util.js:1049:20)</div><div class="line">    at Server._listen2 (net.js:1240:19)</div><div class="line">    at listen (net.js:1289:10)</div><div class="line">    at Server.listen (net.js:1385:5)</div><div class="line">    at Application.listen (/Users/chang/future-team/ft-merchant-sso/node_modules/koa/lib/application.js:64:26)</div><div class="line">    at Object.&lt;anonymous&gt; (/Users/chang/future-team/ft-merchant-sso/example/app.js:20:5)</div><div class="line">    at Module._compile (module.js:556:32)</div><div class="line">    at Object.Module._extensions..js (module.js:565:10)</div><div class="line">    at Module.load (module.js:473:32)</div></pre></td></tr></table></figure>
<p><strong>在Linux下，默认端口1024下的是要在root下才能使用，普通用户执行node app.js会报错</strong><br>解决办法是： <code>sudo node app.js</code></p>
<h2 id="node升级后执行npm报错-Cannot-find-module-‘internal-fs’"><a href="#node升级后执行npm报错-Cannot-find-module-‘internal-fs’" class="headerlink" title="node升级后执行npm报错 Cannot find module ‘internal/fs’"></a>node升级后执行npm报错 Cannot find module ‘internal/fs’</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">npm WARN package.json apollo-shop-map-static@0.1.0 No README data</div><div class="line">npm ERR! Darwin 16.3.0</div><div class="line">npm ERR! argv &quot;/usr/local/bin/node&quot; &quot;/usr/local/lib/node_modules/cnpm/node_modules/.bin/npm&quot; &quot;--userconfig=/Users/chang/.cnpmrc&quot; &quot;--disturl=https://npm.taobao.org/mirrors/node&quot; &quot;--cache=/Users/chang/.cnpm&quot; &quot;--registry=https://registry.npm.taobao.org&quot; &quot;--node-gyp=/usr/local/lib/node_modules/cnpm/node_modules/node-gyp/bin/node-gyp.js&quot; &quot;install&quot; &quot;eagle-ui&quot; &quot;--save&quot;</div><div class="line">npm ERR! node v7.10.0</div><div class="line">npm ERR! npm  v2.14.11</div><div class="line">npm ERR! code MODULE_NOT_FOUND</div><div class="line"></div><div class="line">npm ERR! Cannot find module &apos;internal/fs&apos;</div><div class="line">npm ERR! </div><div class="line">npm ERR! If you need help, you may report this error at:</div><div class="line">npm ERR!     &lt;https://github.com/npm/npm/issues&gt;</div><div class="line"></div><div class="line">npm ERR! Please include the following file with any support request:</div><div class="line">npm ERR!     /Users/chang/merchant/frontend/apollo-shop-map-static/npm-debug.log</div></pre></td></tr></table></figure>
<p><strong>解决办法：</strong></p>
<ul>
<li>rm -rf /usr/local/lib/node_modules/npm </li>
<li>安装nodejs <a href="http://nodejs.cn/download/" target="_blank" rel="external">http://nodejs.cn/download/</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;node -v</div><div class="line">v8.0.0</div><div class="line">&gt;npm -v</div><div class="line">5.0.0</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 工作 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移动端H5开发小经验]]></title>
      <url>/%E7%A7%BB%E5%8A%A8%E7%AB%AFH5%E5%BC%80%E5%8F%91%E5%B0%8F%E7%BB%8F%E9%AA%8C/</url>
      <content type="html"><![CDATA[<p>Android手机软键盘挡住输入框？Android设置border-radius,背景颜色溢出？页面上数字变成可以点击的电话号码？<br><a id="more"></a></p>
<h3 id="android手机软键盘挡住输入框"><a href="#android手机软键盘挡住输入框" class="headerlink" title="android手机软键盘挡住输入框"></a>android手机软键盘挡住输入框</h3><p>在点击输入框时，软键盘升起会挡住输入框，IOS手机则会把输入框顶起来不会遮住。<br>解决办法是:给输入框添加一个点击事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">clickHandler(e)&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        e.target.scrollIntoViewIfNeeded();</div><div class="line">    &#125;,<span class="number">400</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="android设置border-radius-背景颜色溢出"><a href="#android设置border-radius-背景颜色溢出" class="headerlink" title="android设置border-radius,背景颜色溢出"></a>android设置border-radius,背景颜色溢出</h3><p>background-clip  设置元素的背景（背景图片或颜色）是否延伸到边框下面</p>
<ul>
<li>border-box<br>  背景延伸到边框外沿（但是在边框之下）。</li>
<li>padding-box<br>  边框下面没有背景，即背景延伸到内边距外沿。</li>
<li>content-box<br>  背景裁剪到内容区 (content-box) 外沿。<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attribute">background-clip</span>: padding-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="页面上数字变成可以点击的电话号码"><a href="#页面上数字变成可以点击的电话号码" class="headerlink" title="页面上数字变成可以点击的电话号码"></a>页面上数字变成可以点击的电话号码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="点击输入框调出数字键盘"><a href="#点击输入框调出数字键盘" class="headerlink" title="点击输入框调出数字键盘"></a>点击输入框调出数字键盘</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'number'</span> <span class="attr">pattern</span>=<span class="string">"[0-9]*"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'tel'</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="ios-click事件300ms延时"><a href="#ios-click事件300ms延时" class="headerlink" title="ios click事件300ms延时"></a>ios click事件300ms延时</h3><p>最近有个项目，其中有个场景是这样的，一个批量选择图片的页面还带分页，在选择图片时checkbox从未选择状态变为已选择状态，在安卓上反映很快，在ios上表现很迟钝。原来这是因为click事件300ms延时导致的。</p>
<p>并不是只有ios才有click事件300ms延时，设计click事件300ms延时的原因是为了支持双击缩放，判断是否在300ms内有第二次点击。支持双机缩放这种功能的一都般会有单击延时的问题。<br>chrome 和 firefox 的移动版本禁用缩放就可以解决300ms延时的问题</p>
<p><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1.0, user-scalable=no, minimal-ui"><br>但是这在移动端safari上并不起作用。</p>
<p>可以通过监听 touchend事件处理， touchend事件没有延迟。<br>另外还可以使用fastclick，可以看下 <a href="https://github.com/ftlabs/fastclick" target="_blank" rel="external">fastclick github </a></p>
<h3 id="ios-autofocus不起作用"><a href="#ios-autofocus不起作用" class="headerlink" title="ios autofocus不起作用"></a>ios autofocus不起作用</h3><p>移动端safari上不支持autofocus，可以查看<a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/autofocus#Browser_compatibility" target="_blank" rel="external">MDN autofocus Browser_compatibility</a><br>只能通过用户主动出发事件时手动聚焦。<br>例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">id</span>=<span class="string">'focus'</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'touchend'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'focus'</span>).focus();</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 工作 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[常用 Web API 接口]]></title>
      <url>/%E5%B8%B8%E7%94%A8WebAPI%E6%8E%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<p>有时候是不是很容易头大，很多常见的api分不清，看下面这些，能弄明白它们的区别么？</p>
<ul>
<li>document.location 与 window.location</li>
<li>document.URL 与 document.documentURI</li>
<li>nodeValue、innerText 、textContent、innerHTML、outerHTML、outerText</li>
<li>clientHeight、scrollHeight、offsetHeight（Left/Top/Width）</li>
</ul>
<a id="more"></a>
<p>要想知道它们有什么不同，还是得先捋捋它们都是谁的属性和方法，看看常用web api的继承关系，想想它们都有哪些属性和方法</p>
<p><img src="/images/note_web_api.png" alt=""></p>
<h2 id="EventTarget"><a href="#EventTarget" class="headerlink" title="EventTarget"></a>EventTarget</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul>
<li>EventTarget.addEventListener()</li>
<li>EventTarget.removeEventListener()</li>
<li>EventTarget.dispatchEvent()</li>
</ul>
<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p>Node是一个接口，许多DOM类型从这个接口继承,如Document，Element</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul>
<li>Node.baseURI</li>
<li>Node.childNodes      所有子节点</li>
<li>Node.firstChild      第一个子节点</li>
<li>Node.lastChild       最后一个子节点</li>
<li>Node.previousSibling 前一个兄弟节点</li>
<li>Node.nextSibling     下一个兄弟节点</li>
<li>Node.parentNode      父节点(可能是元素节点也可能是文档节点)</li>
<li>Node.parentElement   当前节点的父元素节点</li>
<li>Node.nodeValue   返回或设置当前节点的值</li>
<li>Node.nodeType    节点的类型</li>
<li>Node.nodeName    节点名称</li>
<li>Node.innerText    一个节点及其后代的“渲染”文本内容的属性   </li>
<li>Node.textContent  一个节点及其后代的文本内容</li>
<li>Node.replaceChild(newChild, oldChild)</li>
</ul>
<h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><ul>
<li>parentNode.appendChild(child)  将一个节点添加到指定父节点的子节点列表末尾</li>
<li>parentNode.removeChild(child) </li>
<li>Node.cloneNode  返回调用该方法的节点的一个副本</li>
<li>parentElement.contains( otherNode )   传入的节点是否为该节点的后代节点</li>
<li>parentElement.hasChildNodes() 当前节点是否包含有子节点</li>
<li>parentElement.insertBefore(newElement, referenceElement)</li>
</ul>
<h3 id="节点类型常量"><a href="#节点类型常量" class="headerlink" title="节点类型常量"></a>节点类型常量</h3><table>
<thead>
<tr>
<th style="text-align:left">常量</th>
<th style="text-align:left">值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Node.ELEMENT_NODE</td>
<td style="text-align:left">1</td>
<td style="text-align:left">一个 元素 节点，例如 &lt;p&gt; 和 &lt;div&gt;</td>
</tr>
<tr>
<td style="text-align:left">Node.TEXT_NODE</td>
<td style="text-align:left">3</td>
<td style="text-align:left">Element 或者 Attr 中实际的  文字</td>
</tr>
<tr>
<td style="text-align:left">Node.PROCESSING_INSTRUCTION_NODE</td>
<td style="text-align:left">7</td>
<td style="text-align:left">一个用于XML文档的 ProcessingInstruction ，例如 &lt;?xml-stylesheet … ?&gt; 声明</td>
</tr>
<tr>
<td style="text-align:left">Node.COMMENT_NODE</td>
<td style="text-align:left">8</td>
<td style="text-align:left">一个 Comment 节点</td>
</tr>
<tr>
<td style="text-align:left">Node.DOCUMENT_NODE</td>
<td style="text-align:left">9</td>
<td style="text-align:left">一个 Document 节点。</td>
</tr>
<tr>
<td style="text-align:left">Node.DOCUMENT_TYPE_NODE</td>
<td style="text-align:left">10</td>
<td style="text-align:left">描述文档类型的 DocumentType 节点。例如 &lt;!DOCTYPE html&gt;  就是用于 HTML5 的。</td>
</tr>
<tr>
<td style="text-align:left">Node.DOCUMENT_FRAGMENT_NODE</td>
<td style="text-align:left">11</td>
<td style="text-align:left">一个 DocumentFragment 节点</td>
</tr>
</tbody>
</table>
<h2 id="ParentNode"><a href="#ParentNode" class="headerlink" title="ParentNode"></a>ParentNode</h2><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><ul>
<li>childElementCount</li>
<li>children</li>
<li>firstElementChild</li>
<li>lastElementChild</li>
</ul>
<h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><ul>
<li>append()</li>
<li>prepend()</li>
<li>querySelectorAll()</li>
</ul>
<h2 id="ChildNode"><a href="#ChildNode" class="headerlink" title="ChildNode"></a>ChildNode</h2><h3 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h3><ul>
<li>after()</li>
<li>before()</li>
<li>remove()</li>
</ul>
<h2 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h2><h3 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h3><ul>
<li>document.body  </li>
<li>document.characterSet</li>
<li>document.doctype</li>
<li>document.domain</li>
<li>document.head</li>
<li>document.body</li>
<li>document.location</li>
<li>document.documentURI</li>
<li>document.URL</li>
</ul>
<h3 id="方法-4"><a href="#方法-4" class="headerlink" title="方法"></a>方法</h3><ul>
<li>document.createElement()</li>
<li>document.createTextNode</li>
<li>document.getElementById()</li>
<li>document.getElementsByClassName()</li>
<li>document.getElementsByName()</li>
<li>document.getElementsByTagName()</li>
<li>document.querySelector()</li>
<li>document.querySelectorAll()</li>
<li>document.write()</li>
<li>document.writeln()</li>
</ul>
<h2 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h2><h3 id="属性-3"><a href="#属性-3" class="headerlink" title="属性"></a>属性</h3><ul>
<li>Element.attributes</li>
<li>Element.classList<ul>
<li>Element.classList.add()</li>
<li>Element.classList.remove()</li>
<li>Element.classList.item()</li>
<li>Element.classList.toggle()</li>
<li>Element.classList.contains()</li>
</ul>
</li>
<li>Element.className</li>
<li>Element.tagName</li>
<li>Element.id</li>
<li><p>Element.name</p>
</li>
<li><p>Element.innerHTML</p>
</li>
<li><p>Element.outerHTML</p>
</li>
<li><p>Element.clientHeight</p>
</li>
<li>Element.clientLeft</li>
<li>Element.clientTop</li>
<li><p>Element.clientWidth</p>
</li>
<li><p>Element.scrollHeight</p>
</li>
<li>Element.scrollLeft</li>
<li>Element.scrollTop</li>
<li>Element.scrollWidth</li>
</ul>
<h3 id="方法-5"><a href="#方法-5" class="headerlink" title="方法"></a>方法</h3><ul>
<li>Element.getElementsByClassName()</li>
<li>Element.getElementsByTagName()</li>
<li>Element.querySelector()</li>
<li>Element.querySelectorAll()</li>
<li>Element.getAttribute()</li>
<li>Element.removeAttribute()</li>
</ul>
<h2 id="HTMLElement"><a href="#HTMLElement" class="headerlink" title="HTMLElement"></a>HTMLElement</h2><h3 id="属性-4"><a href="#属性-4" class="headerlink" title="属性"></a>属性</h3><ul>
<li>HTMLElement.offsetHeight</li>
<li>HTMLElement.offsetLeft</li>
<li>HTMLElement.offsetTop</li>
<li>HTMLElement.offsetWidth</li>
<li>HTMLElement.offsetParent 返回一个指向最近的包含该元素的定位元素</li>
<li><p>HTMLElement.style</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">elt.style.cssText = &quot;color: blue&quot;; // 设置多个样式属性 </div><div class="line">elt.setAttribute(&quot;style&quot;, &quot;color: blue&quot;); // 设置多个样式属性 </div><div class="line">elt.style.color = &quot;blue&quot;; // 直接设置样式属性</div></pre></td></tr></table></figure>
</li>
<li><p>HTMLElement.dataset  获取自定义的数据属性</p>
</li>
<li>HTMLElement.contentEditable  表明元素是否是可编辑的</li>
<li>HTMLElement.dir  获取或设置当前元素的元素内容的文本书写方向</li>
</ul>
<h3 id="方法-6"><a href="#方法-6" class="headerlink" title="方法"></a>方法</h3><ul>
<li>HTMLElement.click() 可以用来模拟鼠标左键单击一个元素</li>
<li>HTMLElement.blur()  用来移除当前元素所获得的键盘焦点</li>
<li>HTMLElement.focus() 可以设置指定元素获取焦点</li>
</ul>
<h2 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h2><h3 id="属性-5"><a href="#属性-5" class="headerlink" title="属性"></a>属性</h3><ul>
<li>window.console</li>
<li>window.document</li>
<li>window.history 用来获取History 对象的引用</li>
<li>window.innerHeight 浏览器窗口的视口（viewport）高度（以像素为单位），包括水平滚动条</li>
<li>window.innerWidth 浏览器视口（viewport）宽度（单位：像素）包括垂直滚动条</li>
<li>window.location</li>
<li>window.navigator 查询一些关于运行当前脚本的应用程序的相关信息</li>
<li>window.top  返回窗口体系中的最顶层窗口的引用</li>
<li>window.parent 返回当前窗口的父对象</li>
</ul>
<h3 id="方法-7"><a href="#方法-7" class="headerlink" title="方法"></a>方法</h3><ul>
<li>window.setInterval  重复调用一个函数或执行一个代码段，以固定的时间延迟在每次调用之间。返回一个 intervalID</li>
<li>window.setTimeout 在定时到期后执行一段代码</li>
<li>window.resizeTo(aWidth, aHeight)   动态调整窗口的大小</li>
</ul>
<h2 id="区分相似接口属性"><a href="#区分相似接口属性" class="headerlink" title="区分相似接口属性"></a>区分相似接口属性</h2><h3 id="document-location-与-window-location"><a href="#document-location-与-window-location" class="headerlink" title="document.location 与 window.location"></a>document.location 与 window.location</h3><p>没发现有啥区别</p>
<h3 id="Node-nodeValue、Node-innerText-、Node-textContent-、Element-innerHTML、Element-outerHTML"><a href="#Node-nodeValue、Node-innerText-、Node-textContent-、Element-innerHTML、Element-outerHTML" class="headerlink" title="Node.nodeValue、Node.innerText 、Node.textContent 、Element.innerHTML、Element.outerHTML"></a>Node.nodeValue、Node.innerText 、Node.textContent 、Element.innerHTML、Element.outerHTML</h3><p>1、Node.nodeValue<br>返回或设置当前节点的值,不同类型的节点nodeValue值不同.nodeValue为null,对它赋值也没效果.<br>|节点类型  | nodeValue的值<br>|:—|:—<br>|Node.COMMENT_NODE |注释的文本内容<br>|Node.DOCUMENT_FRAGMENT_NODE   | null<br>|Node.DOCUMENT_TYPE_NODE        | null<br>|Node.ELEMENT_NODE | null<br>|Node.TEXT_NODE |  文本节点的内容</p>
<p>2、Node.innerText<br>表示一个节点及其后代的“渲染”文本内容。<br>3、Node.textContent<br>表示一个节点及其后代的文本内容</p>
<p>4、Element.innerHTML<br>返回元素后代 HTML 文本</p>
<p>5、Element.outerHTML<br>返回包含描述元素及其后代的序列化HTML片段</p>
<p>innerText意识到样式，并且不会返回隐藏元素的文本，而textContent会。<br>innerText 受 CSS 样式的影响，它会触发重排（reflow），但textContent 不会<br>textContent会获取所有元素的内容，包括 script 和 style 元素，而 innerText 不会<br>innerHTML文本会被解析为HTML,但textContent不会，使用textContent可以防止XSS 攻击<br>outerHTML不仅返回元素后代 HTML 文本，还包括元素本身<br>例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p1"</span>&gt;</span>111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p2"</span>&gt;</span>222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p3"</span>&gt;</span>333<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&gt;$(&apos;#container&apos;).innerText</div><div class="line">&quot;111</div><div class="line"></div><div class="line">222&quot;</div><div class="line">&gt;$(&apos;#container&apos;).textContent</div><div class="line">&quot;</div><div class="line">        111</div><div class="line">        222</div><div class="line">    &quot;</div><div class="line">&gt;$(&apos;#container&apos;).innerHTML</div><div class="line">&quot;</div><div class="line">        &lt;p class=&quot;p1&quot;&gt;111&lt;/p&gt;</div><div class="line">        &lt;p class=&quot;p2&quot;&gt;222&lt;/p&gt;</div><div class="line">    &quot;</div><div class="line">&gt;$(&apos;#container&apos;).outerHTML</div><div class="line">&quot;&lt;div id=&quot;container&quot;&gt;</div><div class="line">        &lt;p class=&quot;p1&quot;&gt;111&lt;/p&gt;</div><div class="line">        &lt;p class=&quot;p2&quot;&gt;222&lt;/p&gt;</div><div class="line">    &lt;/div&gt;&quot;</div><div class="line">&gt;$(&apos;#container&apos;).nodeValue</div><div class="line">null</div></pre></td></tr></table></figure>
<h3 id="Element-clientHeight、Element-scrollHeight、HTMLElement-offsetHeight（Left-Top-Width）"><a href="#Element-clientHeight、Element-scrollHeight、HTMLElement-offsetHeight（Left-Top-Width）" class="headerlink" title="Element.clientHeight、Element.scrollHeight、HTMLElement.offsetHeight（Left/Top/Width）"></a>Element.clientHeight、Element.scrollHeight、HTMLElement.offsetHeight（Left/Top/Width）</h3><p>1、Element.clientHeight<br>只读属性，返回<strong>元素内部</strong>的高度(单位像素)，包含内边距，但不包括水平滚动条、边框和外边距。<br>2、Element.scrollHeight<br>只读属性，计量<strong>元素内容高度</strong>，包括overflow样式属性导致的视图中不可见内容。<br>没有垂直滚动条的情况下，scrollHeight值与clientHeight值相同<br>3、HTMLElement.offsetHeight<br>只读属性,返回该元素的像素高度，高度包含该元素的垂直内边距和边框，且是一个整数。<br>通常，元素的offsetHeight是一种衡量标准，包括元素的边框、垂直内边距和元素的水平滚动条（如果存在且渲染的话）和元素的CSS高度。</p>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> &lt;div id=&quot;container&quot;&gt;</div><div class="line">    &lt;div class=&quot;content&quot;&gt;111&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">#container&#123;</div><div class="line">    width: 200px;</div><div class="line">    height: 200px;</div><div class="line">    border: 5px solid #ff6633;</div><div class="line">    overflow: scroll;</div><div class="line">    padding: 3px;</div><div class="line">&#125;</div><div class="line">.content&#123;</div><div class="line">    height: 300px;</div><div class="line">    width: 100px;</div><div class="line">    border: 10px solid #000;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt;$(&apos;#container&apos;).clientHeight</div><div class="line">206  </div><div class="line">&gt;$(&apos;#container&apos;).scrollHeight</div><div class="line">326  </div><div class="line">&gt;$(&apos;#container&apos;).offsetHeight</div><div class="line">216</div><div class="line"></div><div class="line">&gt;$(&apos;.content&apos;).clientHeight</div><div class="line">300</div><div class="line">&gt;$(&apos;.content&apos;).scrollHeight</div><div class="line">300</div><div class="line">&gt;$(&apos;.content&apos;).offsetHeight</div><div class="line">320</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget" target="_blank" rel="external">EventTarget</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window" target="_blank" rel="external">Window</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node" target="_blank" rel="external">Node</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ParentNode" target="_blank" rel="external">ParentNode</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ChildNode" target="_blank" rel="external">ChildNode</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element" target="_blank" rel="external">Element</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document" target="_blank" rel="external">Document</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement" target="_blank" rel="external">HTMLElement</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers" target="_blank" rel="external">GlobalEventHandlers</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小程序初体验]]></title>
      <url>/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<p>小程序刚出来的时候就刷爆了朋友圈，各种铺天盖地的文章说是小程序的到来要改变前端的开发模式，不再需要客户端开发云云。。当时我也是热血沸腾，以为属于前端的时代来了，加入了“微信应用号开发群-4”，关注了微信公众号“很小的程序”，还加入了github上的组织“微信小程序开发者”。每天看着群里各种开发中遇到的问题抛出来，大家聊得很high，然而我也就运行了一下官方demo，浏览了一遍官网文档。大概那时候是没有太多时间去学习了。。。。<br><a id="more"></a><br>现在已经有很多小程序上线了，我也下载了很多，像</p>
<ul>
<li>滴滴出行</li>
<li>大众点评+</li>
<li>摩拜单车</li>
<li>印象笔记微清单</li>
<li>美柚App</li>
<li>京东购物</li>
</ul>
<p>然而体验了一番后，除了 印象笔记微清单 和  美柚App 其他的都删了。</p>
<p>出行类APP 滴滴出行和摩拜单车 因为体验没有下载的客户端应用好<br>购物类APP 大众点评+和京东购物   因为功能太简单了 不满足我的需求 </p>
<p>留下印象笔记微清单和美柚App只是因为功能比较简单又好用，一个记录我要做的事情，一个记录姨妈周期。</p>
<p>最近看到群里有人在问，小程序是不是要死了？哈哈，确实，还真没预期的那样好，我身边都没有人用呀。。。</p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>正好最近事情不多，恩，可以写个小程序体验一下了。<br>找了个口碑外卖的模子，按照口碑外卖的视觉和交互，写了个小程序，半拉子，没有完全写好，以后有时间再补咯。</p>
<p>现在是长这样子，代码在 <a href="https://github.com/chang20159/weapp-waimai" target="_blank" rel="external">小程序-口碑外卖</a><br><img src="/images/weapp/wx_waimai.jpg" alt=""></p>
<h3 id="开发中遇到的问题"><a href="#开发中遇到的问题" class="headerlink" title="开发中遇到的问题"></a>开发中遇到的问题</h3><p>虽然只是简单的几个页面，遇到的问题还是不少。</p>
<h4 id="navigation无法跳转"><a href="#navigation无法跳转" class="headerlink" title="navigation无法跳转"></a>navigation无法跳转</h4><p>   页面跳转有两种方法，一个是用<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/component/navigator.html" target="_blank" rel="external">navigation组件</a>，还有一个是绑定事件，在事件处理器中调用小程序提供的<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/api/ui-navigate.html" target="_blank" rel="external">navigate api</a><br>   在使用navigation组件跳转页面时可能会出现无法跳转的问题，有几种可能原因：</p>
<ul>
<li>所有要跳转的页面都要配置在app.json的pages属性中</li>
<li>对于open-type=”navigate”和open-type=”redirect” 跳转的应用内得是 非 tabBar的页面的路径。</li>
<li>对于open-type=”switchTab”，跳转的页面必须在app.json的tabBar属性中配置  </li>
</ul>
<h4 id="无法使用js操作DOM"><a href="#无法使用js操作DOM" class="headerlink" title="无法使用js操作DOM"></a>无法使用js操作DOM</h4><p>如果想获得当前DOM的信息，可以在组件上自定义data-*属性，并通过绑定事件函数获取事件对象，从e.currentTarget.dataset中获取数据。如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;view data-shopId=<span class="string">"123"</span> bindtap=<span class="string">"toggleClick"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleClick</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> dataset = e.currentTarget.dataset;</div><div class="line">    <span class="built_in">console</span>.log(dataset.shopid);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意： data-<em>属性中的</em>都会被转成小写</p>
<h4 id="CSS尺寸单位最好使用rpx"><a href="#CSS尺寸单位最好使用rpx" class="headerlink" title="CSS尺寸单位最好使用rpx"></a>CSS尺寸单位最好使用rpx</h4><p>刚开始使用的px，同样的尺寸，在iphone6上显示正常，在iphone5上就被挤掉了，在iphone6 plus上尺寸又变得很小不美观。rpx对设备尺寸做了自适应。</p>
<table>
<thead>
<tr>
<th style="text-align:center">设备</th>
<th style="text-align:center">rpx换算px (屏幕宽度/750)</th>
<th style="text-align:center">px换算rpx (750/屏幕宽度)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">iPhone5</td>
<td style="text-align:center">1rpx = 0.42px</td>
<td style="text-align:center">1px = 2.34rpx</td>
</tr>
<tr>
<td style="text-align:center">iPhone6</td>
<td style="text-align:center">1rpx = 0.5px</td>
<td style="text-align:center">1px = 2rpx</td>
</tr>
<tr>
<td style="text-align:center">iPhone6 Plus</td>
<td style="text-align:center">1rpx = 0.552px</td>
<td style="text-align:center">1px = 1.81rpx</td>
</tr>
</tbody>
</table>
<h4 id="循环渲染时要加上wx-key-”id”"><a href="#循环渲染时要加上wx-key-”id”" class="headerlink" title="循环渲染时要加上wx:key=”id”"></a>循环渲染时要加上wx:key=”id”</h4><p>不然会warning，Now you can provide attr “wx:key” for a “wx:for” to improve performance.<br>加上可提升重新渲染时的效率</p>
<h4 id="swiper组件可支持垂直轮播，官方文档中没有写-不知道是为啥。"><a href="#swiper组件可支持垂直轮播，官方文档中没有写-不知道是为啥。" class="headerlink" title="swiper组件可支持垂直轮播，官方文档中没有写,不知道是为啥。"></a>swiper组件可支持垂直轮播，官方文档中没有写,不知道是为啥。</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">vertical</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="简单的组件化"><a href="#简单的组件化" class="headerlink" title="简单的组件化"></a>简单的组件化</h4><p>在index页面的js,wxml,wxss文件中分别引入组件Shop对应文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.js</span></div><div class="line"><span class="keyword">import</span> Shop <span class="keyword">from</span> <span class="string">'../../component/shop/shop.js'</span>;</div><div class="line"></div><div class="line"><span class="comment">//index.wxml </span></div><div class="line">&lt;<span class="keyword">import</span> src=<span class="string">"../../component/shop/shop.wxml"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">//index.wxss</span></div><div class="line">@<span class="keyword">import</span> <span class="string">"../../component/shop/shop.wxss"</span>;</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/MINA.html" target="_blank" rel="external">小程序 官方文档</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 小程序 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript浮点运算在某些情况下产生误差]]></title>
      <url>/javacript%E4%B8%AD%E6%B5%AE%E7%82%B9%E8%BF%90%E7%AE%97%E4%BA%A7%E7%94%9F%E8%AF%AF%E5%B7%AE/</url>
      <content type="html"><![CDATA[<p>商家创建一个发礼品券的活动，券金额0.1, 库存9999，那么活动成本是：0.1 × 9999 = 999.9000000000001<br>额。。。 不应该是99.99么？？<br>原来计算机进行四则运算时，在某些情况下会有误差，这是在safari上的测试结果。<br>0.1 + 0.2  = 0.30000000000000004<br>1.0 - 0.8  = 0.19999999999999996<br>1.6 × 9999 = 15998.400000000001<br>999.9 ÷ 9999 = 0.09999999999999999<br><a id="more"></a></p>
<h3 id="误差原因"><a href="#误差原因" class="headerlink" title="误差原因"></a>误差原因</h3><p>要弄明白出现这种问题的原因，得知道计算机是怎么处理小数的。计算机处理的是二进制数据，只有0和1。将十进制整数转换成二进制很简单，商除以2取余，小数点左侧从右向左排列就是整数部分二进制了。将小数部分转换成二进制，小数部分乘以2取整，小数点右侧从左向右排列就是小数部分的二进制，就可能出现无限循环。例如:<br>十进制  6.1<br>二进制  110.0001 1001 1001 1001 …<br>整数部分 6 ，余数在小数点左侧的顺序 110.<br>6 ÷ 2 = 3 … 0<br>3 ÷ 2 = 1 … 1<br>1 ÷ 2 = 0 … 1<br>小数部分 0.1 , 取结果的整数部分，结果的小数部分继续乘以2，知道结果没有小数部分为止<br>在小数点右侧的顺序  .0001 1001 1001 …<br>0.1 × 2 = 0.2   0.2 + 0<br>0.2 × 2 = 0.4   0.4 + 0<br>0.4 × 2 = 0.8   0.8 + 0<br>0.8 × 2 = 1.6   0.6 + 1<br>0.6 × 2 = 1.2   0.2 + 1<br>0.2 × 2 = 0.4   0.4 + 0<br>0.4 × 2 = 0.8   0.8 + 0<br>0.8 × 2 = 1.6   0.6 + 1<br>0.6 × 2 = 1.2   0.2 + 1<br>0.2 × 2 = 0.4   0.4 + 0<br>0.4 × 2 = 0.8   0.8 + 0<br>0.8 × 2 = 1.6   0.6 + 1<br>…<br>说明，有些十进制小数是不能用二进制有限位数表示的。</p>
<table>
<thead>
<tr>
<th style="text-align:center">十进制</th>
<th style="text-align:center">二进制        </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0.1</td>
<td style="text-align:center">0.0001 1001 1001 1001 …</td>
</tr>
<tr>
<td style="text-align:center">0.2</td>
<td style="text-align:center">0.0011 0011 0011 0011 …</td>
</tr>
<tr>
<td style="text-align:center">0.3</td>
<td style="text-align:center">0.0100 1100 1100 1100 …</td>
</tr>
<tr>
<td style="text-align:center">0.4</td>
<td style="text-align:center">0.0110 0110 0110 0110 …</td>
</tr>
<tr>
<td style="text-align:center">0.5</td>
<td style="text-align:center">0.1</td>
</tr>
<tr>
<td style="text-align:center">0.6</td>
<td style="text-align:center">0.1001 1001 1001 1001 …</td>
</tr>
</tbody>
</table>
<p>计算机无法表示无限小数，会进行取舍，从而造成误差。</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>对于加减法和乘法，可以先将参加运算的小数扩大n倍，变成整数，整数运算后再缩小n倍。对于除法，可以两个参数同时扩大n倍，再运算。例如加法运算：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cadd</span>(<span class="params">arg1,arg2</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> max_decimal_length,l1,l2,expand_multiple;</div><div class="line">    l1 = arg1.toString().split(<span class="string">'.'</span>)[<span class="number">1</span>].length;</div><div class="line">    l2 = arg2.toString().split(<span class="string">'.'</span>)[<span class="number">1</span>].length;</div><div class="line">    max_decimal_length = l1 &gt; l2 ? l1 : l2; <span class="comment">//最长的小数位数</span></div><div class="line">    expand_multiple = <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="built_in">Math</span>.max(l1, l2)); <span class="comment">//扩大倍数</span></div><div class="line">    <span class="keyword">return</span> (arg1 * expand_multiple + arg2 * expand_multiple) / expand_multiple;</div><div class="line">&#125;</div><div class="line"><span class="built_in">Number</span>.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> cadd(arg,<span class="keyword">this</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://segmentfault.com/a/1190000004090283" target="_blank" rel="external">妥协与取舍，解构计算机中的二进制浮点数运算</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2010/06/ieee_floating-point_representation.html" target="_blank" rel="external">浮点数的二进制表示</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 工作 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【jQuery源码】从事件绑定看缓存设计]]></title>
      <url>/jQuery%E6%BA%90%E7%A0%81-%E4%BB%8E%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E7%9C%8B%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p>当事件绑定顺序如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"J_content"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"J_jump"</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"J_jump1"</span>&gt;</span>跳转1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery-3.1.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    $(<span class="string">'#J_content'</span>).on(<span class="string">'click'</span>,clickHandler);</div><div class="line">    $(<span class="string">'#J_content'</span>).on(<span class="string">'click'</span>,clickHandler);</div><div class="line">    $(<span class="string">'#J_content'</span>).on(<span class="string">'click'</span>,<span class="string">'#J_jump'</span>,clickHandler);</div><div class="line">    $(<span class="string">'#J_content'</span>).on(<span class="string">'click'</span>,<span class="string">'#J_jump1'</span>,clickHandler1);</div><div class="line">    $(<span class="string">'#J_content'</span>).on(<span class="string">'mousedown'</span>,<span class="string">'#J_jump1'</span>,clickHandler1);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>dataPriv.get(elem)得到的结果如下，其中elem是id为J_content的DOM节点,dataPriv.get(elem)中存放的是elem元素的相关数据（这里是绑定的事件信息)。</p>
<p>而dataPriv由 var dataPriv = new Data();而来，jQuery设计了缓存系统，在给元素绑定事件时，事件信息不是直接依附在dom元素上，而是将事件信息放在缓存中，与dom元素关联。这样可以有效的避免内存泄漏。<br><img src="/images/jqueryData/QQ20170208-223553@2x.png" alt=""></p>
<h3 id="jQuery缓存设计原理"><a href="#jQuery缓存设计原理" class="headerlink" title="jQuery缓存设计原理"></a>jQuery缓存设计原理</h3><p>var dataPriv = new Data();<br>elemData = dataPriv.get( elem );使用get方法去cache中取值。</p>
<p>jQuery缓存的设计思路是这样的：</p>
<ul>
<li>对于DOM元素，给其扩展一个属性，属性名是jQuery.expando + Data.uid++的值</li>
<li>将数据存放在该属性中，也就是该属性的属性值就是要存储的数据</li>
<li>这样在读取、设置、和移除都是操作这个属性</li>
</ul>
<p>直观一点就是下面这样，其实就是原本要直接附加到DOM元素上的对象，附加到DOM元素一个新的属性上。<br><img src="/images/jqueryData/QQ20170209-210553@2x.png" alt=""><br>给DOM节点elem绑定事件，事件对象都存放在elem的jQuery311093659233154491051属性中</p>
<h3 id="Data类"><a href="#Data类" class="headerlink" title="Data类"></a>Data类</h3><p>这个缓存机制的实现由Data类完成,Data类的提供的实例方法都是对扩展属性(jQuery311093659233154491051)及其对象属性的操作。<br><img src="/images/jqueryData/QQ20170208-223615@2x.png" alt=""><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Data</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//每个页面都会生成一个jQuery的唯一标识</span></div><div class="line">    <span class="comment">// jQuery.expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),如jQuery31109365923315449105</span></div><div class="line">    <span class="keyword">this</span>.expando = jQuery.expando + Data.uid++;</div><div class="line">    <span class="comment">//结果是： jQuery311093659233154491051</span></div><div class="line">&#125;</div><div class="line">Data.uid = <span class="number">1</span>;</div><div class="line">Data.prototype = &#123;</div><div class="line">    <span class="attr">cache</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> owner </span>) </span>&#123; <span class="comment">//当owner是id为J_content的DOM节点</span></div><div class="line">        <span class="keyword">var</span> value = owner[ <span class="keyword">this</span>.expando ];</div><div class="line">        <span class="keyword">if</span> ( !value ) &#123;</div><div class="line">            value = &#123;&#125;; <span class="comment">// cache中如果没有，就创建&#123;&#125;,在内存中开辟区域存储</span></div><div class="line">            <span class="keyword">if</span> ( acceptData( owner ) ) &#123;</div><div class="line">                <span class="keyword">if</span> ( owner.nodeType ) &#123;</div><div class="line">                    <span class="comment">//并让DOM节点的jQuery311093659233154491051属性指向这个内存区域</span></div><div class="line">                    owner[ <span class="keyword">this</span>.expando ] = value;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="built_in">Object</span>.defineProperty( owner, <span class="keyword">this</span>.expando, &#123;</div><div class="line">                        <span class="attr">value</span>: value,</div><div class="line">                        <span class="attr">configurable</span>: <span class="literal">true</span></div><div class="line">                    &#125; );</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> owner, key </span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> key === <span class="literal">undefined</span> ? <span class="keyword">this</span>.cache( owner ) :</div><div class="line">            <span class="comment">// Always use camelCase key (gh-2257)</span></div><div class="line">            owner[ <span class="keyword">this</span>.expando ] &amp;&amp; owner[ <span class="keyword">this</span>.expando ][ jQuery.camelCase( key ) ];</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> owner, data, value </span>) </span>&#123;... &#125;,</div><div class="line">    <span class="attr">access</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> owner, key, value </span>) </span>&#123;...&#125;,</div><div class="line">    <span class="attr">remove</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> owner, key </span>) </span>&#123;...&#125;,</div><div class="line">    <span class="attr">hasData</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> owner </span>) </span>&#123;...&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> dataPriv = <span class="keyword">new</span> Data(); <span class="comment">//jQuery内部使用,如事件</span></div><div class="line"><span class="keyword">var</span> dataUser = <span class="keyword">new</span> Data(); <span class="comment">//给开发者使用，如$.attr(),$.date()</span></div></pre></td></tr></table></figure></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://jquery.com/" target="_blank" rel="external">jQuery官网</a></li>
<li><a href="https://github.com/jquery/jquery" target="_blank" rel="external">jQuery GitHub</a></li>
<li><a href="http://www.imooc.com/learn/172" target="_blank" rel="external">慕课网 jQuery源码解析（架构与依赖模块）</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> JQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery3.1.1源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【jQuery源码】事件绑定与解绑]]></title>
      <url>/jQuery%E6%BA%90%E7%A0%81-%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E4%B8%8E%E8%A7%A3%E7%BB%91/</url>
      <content type="html"><![CDATA[<p>jQuery事件是DOM事件的封装，提供了一些事件绑定和触发的方法,并且支持自定义事件。</p>
<ul>
<li>绑定事件 <ul>
<li><a href="http://jquery.cuishifeng.cn/bind.html" target="_blank" rel="external">bind</a></li>
<li><a href="http://jquery.cuishifeng.cn/delegate.html" target="_blank" rel="external">delegate</a>  </li>
<li><a href="http://jquery.cuishifeng.cn/on.html" target="_blank" rel="external">on</a></li>
<li><a href="http://jquery.cuishifeng.cn/one.html" target="_blank" rel="external">one</a></li>
<li>blur focus focusin focusout resize scroll …等事件名方法</li>
</ul>
</li>
<li>解绑事件 <ul>
<li><a href="http://jquery.cuishifeng.cn/unbind.html" target="_blank" rel="external">unbind</a></li>
<li><a href="http://jquery.cuishifeng.cn/undelegate.html" target="_blank" rel="external">undelegate</a></li>
<li><a href="http://jquery.cuishifeng.cn/off.html" target="_blank" rel="external">off</a></li>
</ul>
</li>
<li>触发事件 <ul>
<li><a href="http://jquery.cuishifeng.cn/trigger.html" target="_blank" rel="external">trigger</a><a id="more"></a>
</li>
</ul>
</li>
</ul>
<h3 id="对外提供的方法"><a href="#对外提供的方法" class="headerlink" title="对外提供的方法"></a>对外提供的方法</h3><p>从源码看<br>1、绑定事件的bind、delegate最终都是调用jQuery.prototype.on方法，jQuery.prototype.on调用的是一个全局的on方法 on( elem, types, selector, data, fn, one ) ，与on方法的区别：</p>
<ul>
<li>bind方法的selector是null,不支持传入selector</li>
<li>delegate方法只是参数的传入顺序与on方法不同,jQuery 3.0中已弃用此方法，用 on()代替。</li>
</ul>
<p>2、 移除事件的unbind、undelegate最终都是调用jQuery.prototype.off方法function( types, selector, fn ) ,与off方法的区别：</p>
<ul>
<li>unbind方法的selector是null,不支持传入selector</li>
<li>undelegate方法只是参数的传入顺序与off方法不同</li>
</ul>
<p>3、 one方法绑定的事件处理器只执行一次，它与on方法相同，调用的全局的on方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">jQuery.fn.extend( &#123;</div><div class="line">    <span class="attr">bind</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> types, data, fn </span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.on( types, <span class="literal">null</span>, data, fn );</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">unbind</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> types, fn </span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.off( types, <span class="literal">null</span>, fn );</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">delegate</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> selector, types, data, fn </span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.on( types, selector, data, fn );</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">undelegate</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> selector, types, fn </span>) </span>&#123;</div><div class="line">        <span class="comment">// ( namespace ) or ( selector, types [, fn] )</span></div><div class="line">        <span class="keyword">return</span> <span class="built_in">arguments</span>.length === <span class="number">1</span> ?</div><div class="line">            <span class="keyword">this</span>.off( selector, <span class="string">"**"</span> ) :</div><div class="line">            <span class="keyword">this</span>.off( types, selector || <span class="string">"**"</span>, fn );</div><div class="line">    &#125;</div><div class="line">&#125; );</div><div class="line">jQuery.fn.extend( &#123;</div><div class="line">    <span class="attr">on</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> types, selector, data, fn </span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> on( <span class="keyword">this</span>, types, selector, data, fn );</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">one</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> types, selector, data, fn </span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> on( <span class="keyword">this</span>, types, selector, data, fn, <span class="number">1</span> );</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">off</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> types, selector, fn </span>) </span>&#123;</div><div class="line">        ....</div><div class="line">    &#125;</div><div class="line">&#125; );</div></pre></td></tr></table></figure></p>
<p>jQuery还提供了一种绑定事件的方法,将事件类型名作为jQuery.prototype的方法属性名，所以我们还可以这样绑定事件：$(‘#id’).click(eventHandler)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">jQuery.each( ( <span class="string">"blur focus focusin focusout resize scroll click dblclick "</span> +</div><div class="line">    <span class="string">"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave "</span> +</div><div class="line">    <span class="string">"change select submit keydown keypress keyup contextmenu"</span> ).split( <span class="string">" "</span> ),</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"> i, name </span>) </span>&#123;</div><div class="line">    <span class="comment">// Handle event binding</span></div><div class="line">    jQuery.fn[ name ] = <span class="function"><span class="keyword">function</span>(<span class="params"> data, fn </span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">arguments</span>.length &gt; <span class="number">0</span> ?</div><div class="line">            <span class="keyword">this</span>.on( name, <span class="literal">null</span>, data, fn ) :</div><div class="line">            <span class="keyword">this</span>.trigger( name );</div><div class="line">    &#125;;</div><div class="line">&#125; );</div><div class="line">jQuery.fn.extend( &#123;</div><div class="line">    <span class="attr">hover</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> fnOver, fnOut </span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mouseenter( fnOver ).mouseleave( fnOut || fnOver );</div><div class="line">    &#125;</div><div class="line">&#125; );</div></pre></td></tr></table></figure></p>
<h3 id="on函数"><a href="#on函数" class="headerlink" title="on函数"></a>on函数</h3><p>jQuery.prototype上绑定事件的方法 bind、delegate、on、one最终都是调用全局的on( elem, types, selector, data, fn, one )方法，有这些参数：</p>
<ul>
<li>elem 数组类型 要绑定事件的dom元素 </li>
<li>types 事件对象(a map of types/handlers) 或者事件类型(click、change) </li>
<li>selector 选择器</li>
<li>data 附加参数，在使用trigger方法触发事件时传入，用户操作触发时，data是undefined</li>
<li>fn  事件处理函数，事件触发后要做的事情</li>
<li>one 传入参数为1，事件只执行一次，然后移除事件<br>on方法的绝大部分代码都是在处理参数不同（数量和类型）的情况下，统一调用jQuery.event.add( this, types, fn, data, selector )方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">on</span>(<span class="params"> elem, types, selector, data, fn, one </span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> origFn, type;</div><div class="line">    <span class="comment">// Types can be a map of types/handlers</span></div><div class="line">    <span class="comment">// 例如$('#id').on(&#123;click:clickHandler,change:changeHandler&#125;,'#id0',&#123;name:'on'&#125;)</span></div><div class="line">    <span class="keyword">if</span> ( <span class="keyword">typeof</span> types === <span class="string">"object"</span> ) &#123; </div><div class="line">        <span class="comment">// 【1】( types-Object, selector, data ) types是object时只有三个参数的情况</span></div><div class="line">        <span class="comment">// 当types是一个对象时，需要对每一个type依次绑定对应的事件处理器</span></div><div class="line">        <span class="comment">// 并在一次调用on方法前做个参数处理</span></div><div class="line">        <span class="keyword">if</span> ( <span class="keyword">typeof</span> selector !== <span class="string">"string"</span> ) &#123;</div><div class="line">            <span class="comment">//【2】( types-Object, data )</span></div><div class="line">            <span class="comment">// 如果第三个参数不是string类型，那参数中就没有selector</span></div><div class="line">            <span class="comment">// 例如$('#id').on(&#123;click:clickHandler,change:changeHandler&#125;,&#123;name:'on'&#125;)</span></div><div class="line">            data = data || selector; <span class="comment">// data = null || &#123;name:'on'&#125;</span></div><div class="line">            selector = <span class="literal">undefined</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> ( type <span class="keyword">in</span> types ) &#123;</div><div class="line">            on( elem, type, selector, data, types[ type ], one );</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> elem;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//如果第4位参数data 和第5位参数fn没有，即$('#id').on(param1,param2)这样只有两位参数</span></div><div class="line">    <span class="comment">//elem之后的参数依次是事件类型和事件处理函数</span></div><div class="line">    <span class="keyword">if</span> ( data == <span class="literal">null</span> &amp;&amp; fn == <span class="literal">null</span> ) &#123;</div><div class="line">        <span class="comment">// 【3】( types, fn ) 只有两个参数，事件类型和事件处理器</span></div><div class="line">        fn = selector;</div><div class="line">        data = selector = <span class="literal">undefined</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( fn == <span class="literal">null</span> ) &#123;</div><div class="line">        <span class="keyword">if</span> ( <span class="keyword">typeof</span> selector === <span class="string">"string"</span> ) &#123;</div><div class="line">            <span class="comment">// 【4】( types, selector, fn ) 三个参数，事件类型，过滤elem后代元素的选择器，事件处理器</span></div><div class="line">            fn = data;</div><div class="line">            data = <span class="literal">undefined</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//【5】( types, data, fn )</span></div><div class="line">            fn = data;</div><div class="line">            data = selector;</div><div class="line">            selector = <span class="literal">undefined</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//【6】fn也可以是一个false值，在on方法中fn为false时，转为一个直接返回false的函数，作为后续调用的jQuery.event.add方法的参数</span></div><div class="line">    <span class="comment">// false值就是做一个直接返回false的函数的简写</span></div><div class="line">    <span class="keyword">if</span> ( fn === <span class="literal">false</span> ) &#123;</div><div class="line">        fn = <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( !fn ) &#123; <span class="comment">//如果没有事件处理器就啥也不干，返回这个dom元素</span></div><div class="line">        <span class="keyword">return</span> elem;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//【7】事件只会触发一次就移除时，对事件处理函数进行封装</span></div><div class="line">    <span class="comment">//第一次触发执行时，先移除事件处理器，再执行事件</span></div><div class="line">    <span class="keyword">if</span> ( one === <span class="number">1</span> ) &#123;</div><div class="line">        origFn = fn;</div><div class="line">        fn = <span class="function"><span class="keyword">function</span>(<span class="params"> event </span>) </span>&#123;</div><div class="line">            <span class="comment">// Can use an empty set, since event contains the info</span></div><div class="line">            jQuery().off( event );</div><div class="line">            <span class="keyword">return</span> origFn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> );</div><div class="line">        &#125;;</div><div class="line">        <span class="comment">// Use same guid so caller can remove using origFn</span></div><div class="line">        fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> elem.each( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        jQuery.event.add( <span class="keyword">this</span>, types, fn, data, selector );</div><div class="line">    &#125; );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="jQuery-event-add方法"><a href="#jQuery-event-add方法" class="headerlink" title="jQuery.event.add方法"></a>jQuery.event.add方法</h4><p>jQuery.event.add将每个事件处理器封装成事件处理对象，包括唯一标识、事件处理函数、选择器等属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">add: <span class="function"><span class="keyword">function</span>(<span class="params"> elem, types, handler, data, selector </span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> handleObjIn, eventHandle, tmp,</div><div class="line">            events, t, handleObj,</div><div class="line">            special, handlers, type, namespaces, origType,</div><div class="line">            elemData = dataPriv.get( elem );</div><div class="line">        <span class="comment">// 对elem第一次绑定事件前，elemData为空对象&#123;&#125;</span></div><div class="line">        <span class="keyword">if</span> ( !elemData ) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 传入的形式是&#123;handler：handler，selector：selector&#125;</span></div><div class="line">        <span class="keyword">if</span> ( handler.handler ) &#123;</div><div class="line">            handleObjIn = handler;</div><div class="line">            handler = handleObjIn.handler;</div><div class="line">            selector = handleObjIn.selector;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 判断选择器是否存在</span></div><div class="line">        <span class="keyword">if</span> ( selector ) &#123;</div><div class="line">            jQuery.find.matchesSelector( documentElement, selector );</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 给事件处理器添加唯一标识</span></div><div class="line">        <span class="keyword">if</span> ( !handler.guid ) &#123;</div><div class="line">            handler.guid = jQuery.guid++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 第一次给该元素绑定时初始化elemData的events属性和handle属性</span></div><div class="line">        <span class="keyword">if</span> ( !( events = elemData.events ) ) &#123;</div><div class="line">            events = elemData.events = &#123;&#125;;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ( !( eventHandle = elemData.handle ) ) &#123;</div><div class="line">            eventHandle = elemData.handle = <span class="function"><span class="keyword">function</span>(<span class="params"> e </span>) </span>&#123;</div><div class="line">                <span class="comment">// Discard the second event of a jQuery.event.trigger() and</span></div><div class="line">                <span class="comment">// when an event is called after a page has unloaded</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">typeof</span> jQuery !== <span class="string">"undefined"</span> &amp;&amp; jQuery.event.triggered !== e.type ?</div><div class="line">                    jQuery.event.dispatch.apply( elem, <span class="built_in">arguments</span> ) : <span class="literal">undefined</span>;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">        types = ( types || <span class="string">""</span> ).match( rnothtmlwhite ) || [ <span class="string">""</span> ];</div><div class="line">        t = types.length;</div><div class="line">        <span class="keyword">while</span> ( t-- ) &#123;</div><div class="line">            tmp = rtypenamespace.exec( types[ t ] ) || [];</div><div class="line">            type = origType = tmp[ <span class="number">1</span> ];</div><div class="line">            namespaces = ( tmp[ <span class="number">2</span> ] || <span class="string">""</span> ).split( <span class="string">"."</span> ).sort();</div><div class="line">            <span class="keyword">if</span> ( !type ) &#123; <span class="keyword">continue</span>; &#125;</div><div class="line">            <span class="comment">// If event changes its type, use the special event handlers for the changed type</span></div><div class="line">            special = jQuery.event.special[ type ] || &#123;&#125;;</div><div class="line">            <span class="comment">// If selector defined, determine special event api type, otherwise given type</span></div><div class="line">            type = ( selector ? special.delegateType : special.bindType ) || type;</div><div class="line">            <span class="comment">// Update special based on newly reset type</span></div><div class="line">            special = jQuery.event.special[ type ] || &#123;&#125;;</div><div class="line">            <span class="comment">// handleObj is passed to all event handlers</span></div><div class="line">            handleObj = jQuery.extend( &#123;</div><div class="line">                <span class="attr">type</span>: type,</div><div class="line">                <span class="attr">origType</span>: origType,</div><div class="line">                <span class="attr">data</span>: data,</div><div class="line">                <span class="attr">handler</span>: handler,</div><div class="line">                <span class="attr">guid</span>: handler.guid,</div><div class="line">                <span class="attr">selector</span>: selector,</div><div class="line">                <span class="attr">needsContext</span>: selector &amp;&amp; jQuery.expr.match.needsContext.test( selector ),</div><div class="line">                <span class="attr">namespace</span>: namespaces.join( <span class="string">"."</span> )</div><div class="line">            &#125;, handleObjIn );</div><div class="line"></div><div class="line">            <span class="comment">// 在events对象中，存储该元素绑定事件对应的事件处理器数组</span></div><div class="line">            <span class="comment">// 对该元素的某一类型事件第一次绑定事件处理器时，对handlers初始化为空数组[]</span></div><div class="line">            <span class="keyword">if</span> ( !( handlers = events[ type ] ) ) &#123;</div><div class="line">                handlers = events[ type ] = [];</div><div class="line">                handlers.delegateCount = <span class="number">0</span>;</div><div class="line">                <span class="comment">// Only use addEventListener if the special events handler returns false</span></div><div class="line">                <span class="comment">// 只有在此种条件下才会直接用addEventListener绑定事件</span></div><div class="line">                <span class="keyword">if</span> ( !special.setup ||</div><div class="line">                    special.setup.call( elem, data, namespaces, eventHandle ) === <span class="literal">false</span> ) &#123;</div><div class="line">                    <span class="keyword">if</span> ( elem.addEventListener ) &#123;</div><div class="line">                        elem.addEventListener( type, eventHandle );</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> ( special.add ) &#123;</div><div class="line">                special.add.call( elem, handleObj );</div><div class="line">                <span class="keyword">if</span> ( !handleObj.handler.guid ) &#123;</div><div class="line">                    handleObj.handler.guid = handler.guid;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 将处理器对象存放在dataPriv.get( elem )[type].handlers中</span></div><div class="line">            <span class="comment">// 如果是事件代理，处理器对象放在列表前面，用splice实现，将handleObj插入最后一个事件代理处理器之后 </span></div><div class="line">            <span class="keyword">if</span> ( selector ) &#123;</div><div class="line">                handlers.splice( handlers.delegateCount++, <span class="number">0</span>, handleObj );</div><div class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果不是事件代理，直接放在列表最后，用push即可</span></div><div class="line">                handlers.push( handleObj );</div><div class="line">            &#125;</div><div class="line">            jQuery.event.global[ type ] = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>当事件绑定顺序如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#J_content'</span>).on(<span class="string">'click'</span>,clickHandler);</div><div class="line">$(<span class="string">'#J_content'</span>).on(<span class="string">'click'</span>,clickHandler);</div><div class="line">$(<span class="string">'#J_content'</span>).on(<span class="string">'click'</span>,<span class="string">'#J_jump'</span>,clickHandler);</div><div class="line">$(<span class="string">'#J_content'</span>).on(<span class="string">'click'</span>,<span class="string">'#J_jump1'</span>,clickHandler1);</div><div class="line">$(<span class="string">'#J_content'</span>).on(<span class="string">'mousedown'</span>,<span class="string">'#J_jump1'</span>,clickHandler1);</div></pre></td></tr></table></figure></p>
<p>events的内容为：<br><img src="/images/jqueryEventAdd/QQ20170208-213500@2x.png" alt=""></p>
<ul>
<li>其中guid为事件处理器的唯一标识，事件处理器clickHandler的guid为1，clickHandler1的guid为2。</li>
<li>events中存放每个事件对应的多个事件处理器对象</li>
<li>当类型相同、处理器相同是，也会存入一个事件处理器对象</li>
<li>对于同一类型的事件处理器，事件代理处理器总会放在前面<h4 id="事件绑定用法"><a href="#事件绑定用法" class="headerlink" title="事件绑定用法"></a>事件绑定用法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickHandler</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"事件处理"</span>);</div><div class="line">&#125;</div><div class="line">$(<span class="string">'#J_confirm'</span>).click(clickHandler);</div><div class="line">$(<span class="string">'#J_confirm'</span>).on(<span class="string">'click'</span>,clickHandler);</div><div class="line">$(<span class="string">'#J_confirm'</span>).on(&#123;</div><div class="line">    <span class="attr">click</span>:  clickHandler,</div><div class="line">    <span class="attr">mousedown</span>: clickHandler</div><div class="line">&#125;);</div><div class="line">$(<span class="string">'#J_confirm'</span>).bind(<span class="string">'click'</span>,clickHandler)</div><div class="line">$(<span class="string">'#J_content'</span>).on(<span class="string">'click'</span>,<span class="string">'#J_jump'</span>,clickHandler);</div><div class="line">$(<span class="string">'#J_content'</span>).one(<span class="string">'click'</span>,<span class="string">'#J_jump'</span>,clickHandler);</div><div class="line">$(<span class="string">'#J_confirm'</span>).one(<span class="string">'click'</span>,clickHandler);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>用trigger触发事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function clickHandler(e,name)&#123;</div><div class="line">    console.log(name + &quot; 事件处理&quot;);</div><div class="line">&#125;</div><div class="line">$(&quot;#J_confirm&quot;).click(clickHandler);</div><div class="line">$(&quot;#J_confirm&quot;).trigger(&quot;click&quot;, &quot;use trigger&quot;);</div><div class="line">// 可简写如下</div><div class="line">$(&quot;#J_confirm&quot;).click(clickHandler).trigger(&quot;click&quot;, &quot;use trigger&quot;);</div></pre></td></tr></table></figure></p>
<h3 id="off方法"><a href="#off方法" class="headerlink" title="off方法"></a>off方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">off: <span class="function"><span class="keyword">function</span>(<span class="params"> types, selector, fn </span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> handleObj, type;</div><div class="line">        <span class="keyword">if</span> ( types &amp;&amp; types.preventDefault &amp;&amp; types.handleObj ) &#123;</div><div class="line">            <span class="comment">// ( event )  dispatched jQuery.Event</span></div><div class="line">            handleObj = types.handleObj;</div><div class="line">            jQuery( types.delegateTarget ).off(</div><div class="line">                handleObj.namespace ?</div><div class="line">                    handleObj.origType + <span class="string">"."</span> + handleObj.namespace :</div><div class="line">                    handleObj.origType,</div><div class="line">                handleObj.selector,</div><div class="line">                handleObj.handler</div><div class="line">            );</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ( <span class="keyword">typeof</span> types === <span class="string">"object"</span> ) &#123;</div><div class="line">            <span class="comment">// ( types-object [, selector] )</span></div><div class="line">            <span class="keyword">for</span> ( type <span class="keyword">in</span> types ) &#123;</div><div class="line">                <span class="keyword">this</span>.off( type, selector, types[ type ] );</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ( selector === <span class="literal">false</span> || <span class="keyword">typeof</span> selector === <span class="string">"function"</span> ) &#123;</div><div class="line">            <span class="comment">// ( types [, fn] )</span></div><div class="line">            fn = selector;</div><div class="line">            selector = <span class="literal">undefined</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ( fn === <span class="literal">false</span> ) &#123;</div><div class="line">            fn = returnFalse;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.each( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            jQuery.event.remove( <span class="keyword">this</span>, types, fn, selector );</div><div class="line">        &#125; );</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="jQuery-event-remove方法"><a href="#jQuery-event-remove方法" class="headerlink" title="jQuery.event.remove方法"></a>jQuery.event.remove方法</h4><p>remove方法最终调用javascript提供的removeEventListener<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( elem.removeEventListener ) &#123;</div><div class="line">        elem.removeEventListener( type, handle );</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h4 id="事件解绑用法"><a href="#事件解绑用法" class="headerlink" title="事件解绑用法"></a>事件解绑用法</h4><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://jquery.com/" target="_blank" rel="external">jQuery官网</a></li>
<li><a href="https://github.com/jquery/jquery" target="_blank" rel="external">jQuery GitHub</a></li>
<li><a href="http://jquery.cuishifeng.cn/index.html" target="_blank" rel="external">jQuery API 3.1.0 速查表  –作者：Shifone</a></li>
<li><a href="http://www.imooc.com/learn/222" target="_blank" rel="external">慕课网 jQuery源码解析（DOM与核心模块）</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> JQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery3.1.1源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS小经验]]></title>
      <url>/CSS%E5%B0%8F%E7%BB%8F%E9%AA%8C/</url>
      <content type="html"><![CDATA[<h3 id="隐藏滚动条"><a href="#隐藏滚动条" class="headerlink" title="隐藏滚动条"></a>隐藏滚动条</h3><p>见<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::-webkit-scrollbar" target="_blank" rel="external">::-webkit-scrollbar</a><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.visible-scrollbar</span>, <span class="selector-class">.invisible-scrollbar</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">width</span>: <span class="number">10em</span>;</div><div class="line">  <span class="attribute">overflow</span>: auto;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.invisible-scrollbar</span><span class="selector-pseudo">::-webkit-scrollbar</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="display-inline-block-元素之间有空白间隙"><a href="#display-inline-block-元素之间有空白间隙" class="headerlink" title="display:inline-block 元素之间有空白间隙"></a>display:inline-block 元素之间有空白间隙</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ul</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">li</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">50%</span>;</div><div class="line">    <span class="attribute">display</span>:inline-block;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果html结构写成这样，两个li中间会有间隙假设为n px ,那这一行就放不下两个li<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>最好的解决办法是将html结构写成这样<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    第一个<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    第二个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="定宽不换行"><a href="#定宽不换行" class="headerlink" title="定宽不换行"></a>定宽不换行</h3><p>white-space: nowrap;</p>
<h3 id="单行文本溢出显示省略号"><a href="#单行文本溢出显示省略号" class="headerlink" title="单行文本溢出显示省略号"></a>单行文本溢出显示省略号</h3><p>有两个条件</p>
<ul>
<li>设置文本显示在一行  white-space:nowrap</li>
<li>溢出时隐藏内容   overflow:hidden<br>再设置：text-overflow:ellipsis       ellipsis翻译：（语法结构上的）省略</li>
</ul>
<h3 id="多行文本移除显示省略号"><a href="#多行文本移除显示省略号" class="headerlink" title="多行文本移除显示省略号"></a>多行文本移除显示省略号</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 仅适用于webkit内核浏览器</div><div class="line">p&#123;</div><div class="line">  display: -webkit-box;   //设置display，将对象作为弹性伸缩盒子模型显示</div><div class="line">  -webkit-box-orient: vertical;  //规定框的子元素应该被水平或垂直排列</div><div class="line">  -webkit-line-clamp: 4;  //限制在一个块元素显示的文本的行数</div><div class="line">  overflow: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="z-index无效"><a href="#z-index无效" class="headerlink" title="z-index无效"></a>z-index无效</h3><p>需要设置position属性为非static值</p>
<h3 id="弹窗滚动到底时，后面的页面也跟着滚动"><a href="#弹窗滚动到底时，后面的页面也跟着滚动" class="headerlink" title="弹窗滚动到底时，后面的页面也跟着滚动"></a>弹窗滚动到底时，后面的页面也跟着滚动</h3><p>在点开弹窗时给html和body添加class ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.forbidden-root-scroll&#123;</div><div class="line">  overflow:hidden;</div><div class="line">  height:100%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关闭弹窗时remove class</p>
<p>这样设置会让页面重置到没有滚动的状态。这样会造成一个问题，比如查看第二页时点击弹窗，页面会重置到第一页，关闭弹窗时就不是原来的位置了。所以在添加上面的属性之前要先记下body的scrollTop，remove class之后设置body的scrollTop为前面记下的值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">this.html = document.getElementsByTagName(&apos;html&apos;)[0];</div><div class="line">this.body = document.getElementsByTagName(&apos;body&apos;)[0];</div><div class="line">this.scrollTop = 0</div><div class="line"></div><div class="line">forbiddenRootScroll(flag)&#123;</div><div class="line">    if(flag)&#123;</div><div class="line">        this.scrollTop = this.body.scrollTop</div><div class="line">        this.html.setAttribute(&apos;class&apos;,&apos;forbidden-root-scroll&apos;)</div><div class="line">        this.body.setAttribute(&apos;class&apos;,&apos;forbidden-root-scroll&apos;)</div><div class="line"></div><div class="line">    &#125;else&#123;</div><div class="line">        this.html.removeAttribute(&apos;class&apos;,&apos;forbidden-root-scroll&apos;)</div><div class="line">        this.body.removeAttribute(&apos;class&apos;,&apos;forbidden-root-scroll&apos;)</div><div class="line">        this.body.scrollTop = this.scrollTop</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//打开弹窗调用this.forbiddenRootScroll(true)</div><div class="line">//关闭弹窗调用this.forbiddenRootScroll(false)</div></pre></td></tr></table></figure>
<h2 id="input-placeholder与value重叠"><a href="#input-placeholder与value重叠" class="headerlink" title="input placeholder与value重叠"></a>input placeholder与value重叠</h2><p>妖孽的问题啊  等我复现了再研究是个什么鬼</p>
]]></content>
      
        <categories>
            
            <category> 工作 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[下雨天]]></title>
      <url>/%E4%B8%8B%E9%9B%A8%E5%A4%A9/</url>
      <content type="html"><![CDATA[<p>周末依然宅公司<br>午餐是水果Family<br>留个照<br>欧耶~~<br><a id="more"></a><br><img src="/images/fruits/P70107-123326_mh1483763908233.jpg" alt=""><br><img src="/images/fruits/P70107-122828_mh1483764159420.jpg" alt=""><br><img src="/images/fruits/P70107-122930_mh1483764119073.jpg" alt=""></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=368764&auto=1&height=66"></iframe>

]]></content>
      
        <categories>
            
            <category> 日常 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[【jQuery源码】第一篇]]></title>
      <url>/jQuery%E6%BA%90%E7%A0%81-%E7%AC%AC%E4%B8%80%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>在使用jQuery的过程中遇到很多的疑惑。<br>jQuery为什么可以用美元符$表示？<br>事件绑定的几个方法bind、delegate、on之间有什么区别？<br>jQuery怎么判断checkbox是否被选中，有哪几种方法？<br>这样的问题有很多，还记不住，日常使用到的jQuery API，既然用到了，就学习一下源码吧~<br>理解了实现，就不怕忘记了。<br>目前学习的版本是3.1.1，代码已经1万+行了。最新源码可从<a href="https://github.com/jquery/jquery" target="_blank" rel="external">jquery GitHub</a>获取。<br><a id="more"></a></p>
<h2 id="总体结构"><a href="#总体结构" class="headerlink" title="总体结构"></a>总体结构</h2><p>JQuery的源码是一个立即执行的函数,带两个参数,对象global和函数factory</p>
<ul>
<li>global   &gt;  typeof window !== “undefined” ? window : this</li>
<li>factory  &gt;  function( window, noGlobal ) {  …  }</li>
<li><p>factory函数是构建jQuery的工厂，提供jQuery各种方法。当作为模块被引入时，输出jQuery，在浏览器中直接使用时，将jQuery赋给window.$。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">( <span class="function"><span class="keyword">function</span>(<span class="params"> global, factory </span>) </span>&#123;</div><div class="line"><span class="meta">	"use strict"</span>;</div><div class="line">	<span class="keyword">if</span> ( <span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.exports === <span class="string">"object"</span> ) &#123;</div><div class="line">		<span class="built_in">module</span>.exports = global.document ?</div><div class="line">			factory( global, <span class="literal">true</span> ) :</div><div class="line">			<span class="function"><span class="keyword">function</span>(<span class="params"> w </span>) </span>&#123;</div><div class="line">				<span class="keyword">if</span> ( !w.document ) &#123;</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>( <span class="string">"jQuery requires a window with a document"</span>);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">return</span> factory( w );</div><div class="line">			&#125;;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		factory( global );</div><div class="line">	&#125;</div><div class="line">&#125; )( <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">"undefined"</span> ? <span class="built_in">window</span> : <span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> window, noGlobal </span>) </span>&#123;</div><div class="line">	<span class="comment">//jQuery 是一个函数</span></div><div class="line">	<span class="keyword">var</span>	jQuery = <span class="function"><span class="keyword">function</span>(<span class="params"> selector, context </span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init( selector, context );</div><div class="line">		&#125;;</div><div class="line">		<span class="comment">// 核心方法</span></div><div class="line">		<span class="comment">// 回调系统</span></div><div class="line">		<span class="comment">// 异步队列</span></div><div class="line">		<span class="comment">// 数据缓存</span></div><div class="line">		<span class="comment">// 队列操作</span></div><div class="line">		<span class="comment">// 选择器引</span></div><div class="line">		<span class="comment">// 属性操作</span></div><div class="line">		<span class="comment">// 节点遍历</span></div><div class="line">		<span class="comment">// 文档处理</span></div><div class="line">		<span class="comment">// 样式操作</span></div><div class="line">		<span class="comment">// 属性操作</span></div><div class="line">		<span class="comment">// 事件体系</span></div><div class="line">		<span class="comment">// AJAX交互</span></div><div class="line">		<span class="comment">// 动画引擎</span></div><div class="line">	<span class="keyword">if</span> ( <span class="keyword">typeof</span> define === <span class="string">"function"</span> &amp;&amp; define.amd ) &#123;</div><div class="line">		define( <span class="string">"jquery"</span>, [], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> jQuery;</div><div class="line">		&#125; );</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//在没有作为模块引入时，将jQuery赋给window.$和window.jQuery</span></div><div class="line">	<span class="keyword">if</span> ( !noGlobal ) &#123;</div><div class="line">		<span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> jQuery;</div><div class="line">&#125; );</div></pre></td></tr></table></figure>
</li>
<li><p>当在其他模块中通过require(jQuery)的形式（CommonJS AMD等规范引入模块的方式）引入，并且在浏览器环境下，那这个代码的逻辑是这样的，将jQuery输出</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"> window, true </span>) </span>&#123; </div><div class="line">	... </div><div class="line">	if ( <span class="keyword">typeof</span> define === <span class="string">"function"</span> &amp;&amp; define.amd ) &#123;</div><div class="line">		define( <span class="string">"jquery"</span>, [], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> jQuery;</div><div class="line">		&#125; );</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>当在其他模块中通过require(jQuery)的形式引入，但不是在浏览器环境下，比如在nodejs环境中，global.document是不存在的，那逻辑就是这样。输出模块时抛出错误，提示当前环境因为没有window.document而不支持jQuery</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"> w </span>) </span>&#123;</div><div class="line">				<span class="keyword">if</span> ( !w.document ) &#123;</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>( <span class="string">"jQuery requires a window with a document"</span> );</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">return</span> factory( w );</div><div class="line">			&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>如果不是用require(jQuery)的形式引入，比如直接使用window.$，逻辑就是这样的，将构建好的jQuery赋给window.$和window.jQuery，这样就可以直接使用$了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"> window, false </span>) </span>&#123; </div><div class="line">	... </div><div class="line">	window.jQuery = <span class="built_in">window</span>.$ = jQuery;</div><div class="line">	<span class="keyword">return</span> jQuery;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在浏览器中 window == this，window.document存在，在nodejs环境下 global == this，不存在global.document。所以在nodejs环境中是不支持jQuery的。</p>
<h2 id="JQuery扩展方法extend"><a href="#JQuery扩展方法extend" class="headerlink" title="JQuery扩展方法extend"></a>JQuery扩展方法extend</h2><h3 id="源码中extend方法的使用"><a href="#源码中extend方法的使用" class="headerlink" title="源码中extend方法的使用"></a>源码中extend方法的使用</h3><p>给jQuery自身和jQuery原型都定义了一个extend方法，在jQuery源码内部大部分jQuery和jQuery原型的属性都是用extend方法扩展的，jQuery的extend方法也常用来扩展对象，或者用于jQuery插件的开发。在jQuery中定义和使用extend如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置prototype属性</span></div><div class="line">jQuery.fn = jQuery.prototype = &#123; ... &#125;;</div><div class="line"><span class="comment">//给jQuery自身和jQuery原型都定义一个extend方法，</span></div><div class="line"><span class="comment">//用于扩展jQuery和jQuery.prototype的属性</span></div><div class="line">jQuery.extend = jQuery.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; ... &#125;;</div><div class="line">jQuery.fn.extend( &#123;</div><div class="line">	<span class="attr">on</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> types, selector, data, fn </span>) </span>&#123; ... &#125;,</div><div class="line">	<span class="attr">one</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> types, selector, data, fn </span>) </span>&#123; ... &#125;,</div><div class="line">	<span class="attr">off</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> types, selector, fn </span>) </span>&#123; ... &#125; </div><div class="line">&#125;);</div><div class="line">jQuery.extend( &#123;</div><div class="line">	<span class="attr">attr</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> elem, name, value </span>) </span>&#123; ... &#125;,</div><div class="line">	<span class="attr">removeAttr</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> elem, value </span>) </span>&#123; ... &#125;</div><div class="line">&#125; );</div></pre></td></tr></table></figure></p>
<h3 id="extend方法实现解析"><a href="#extend方法实现解析" class="headerlink" title="extend方法实现解析"></a>extend方法实现解析</h3><p>extend方法将参数都合并到target中,用法是这种形式： $.extend(target,src1,src2,…)</p>
<ul>
<li>如果第一个参数是布尔值，target就是第二个参数</li>
<li>如果第一个参数不是布尔值，target就是第一个参数</li>
<li>如果只有一个参数，target就是jQuery本身</li>
<li>如果target不是object类型或者函数类型，target就是{}<br>扩展后返回的是target,所以如果不希望影响原有参数，可以设定一个空对象{}作为target,如$.extend({},src1,src2,…)或$.extend(true,{},src1,src2,…)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">jQuery.extend = jQuery.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> options, name, src, copy, copyIsArray, clone,</div><div class="line">		target = <span class="built_in">arguments</span>[ <span class="number">0</span> ] || &#123;&#125;,  i = <span class="number">1</span>, length = <span class="built_in">arguments</span>.length,deep =<span class="literal">false</span>;</div><div class="line">	<span class="comment">//如果第一个参数是一个布尔值，根据这个布尔值决定是否深拷贝</span></div><div class="line">	<span class="keyword">if</span> ( <span class="keyword">typeof</span> target === <span class="string">"boolean"</span> ) &#123; </div><div class="line">		deep = target;</div><div class="line">		<span class="comment">// 如果第一个参数是一个布尔值，第二个参数作为target</span></div><div class="line">		target = <span class="built_in">arguments</span>[ i ] || &#123;&#125;;</div><div class="line">		i++;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 如果target不是对象也不是函数，则将&#123;&#125;作为target，并且这个非对象的target不会被合并</span></div><div class="line">	<span class="keyword">if</span> ( <span class="keyword">typeof</span> target !== <span class="string">"object"</span> &amp;&amp; !jQuery.isFunction( target ) ) &#123;</div><div class="line">		target = &#123;&#125;;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// target就是jQuery</span></div><div class="line">	<span class="keyword">if</span> ( i === length ) &#123;</div><div class="line">		target = <span class="keyword">this</span>;</div><div class="line">		i--;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> ( ; i &lt; length; i++ ) &#123;</div><div class="line">		<span class="comment">// 只处理非null 非undefined值</span></div><div class="line">		<span class="keyword">if</span> ( ( options = <span class="built_in">arguments</span>[ i ] ) != <span class="literal">null</span> ) &#123; </div><div class="line">			<span class="comment">// 合并每个参数对象的每一个属性</span></div><div class="line">			<span class="keyword">for</span> ( name <span class="keyword">in</span> options ) &#123;</div><div class="line">				src = target[ name ];</div><div class="line">				copy = options[ name ];</div><div class="line">				<span class="comment">// 已经合并的到target的就不再合并，如果要合并的参数中有相同的属性，但是属性值不同，会被覆盖</span></div><div class="line">				<span class="keyword">if</span> ( target === copy ) &#123;</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="comment">// 如果属性值是对象或者数组，并且deep为true,递归扩展，clone是子对象扩展的target</span></div><div class="line">				<span class="keyword">if</span> ( deep &amp;&amp; copy &amp;&amp; ( jQuery.isPlainObject( copy ) || ( copyIsArray = jQuery.isArray( copy ) ) ) ) &#123;</div><div class="line">					<span class="keyword">if</span> ( copyIsArray ) &#123;</div><div class="line">						copyIsArray = <span class="literal">false</span>;</div><div class="line">						clone = src &amp;&amp; jQuery.isArray( src ) ? src : [];</div><div class="line">					&#125; <span class="keyword">else</span> &#123;</div><div class="line">						clone = src &amp;&amp; jQuery.isPlainObject( src ) ? src : &#123;&#125;;</div><div class="line">					&#125;</div><div class="line">					<span class="comment">//子对象合并后的结果</span></div><div class="line">					target[ name ] = jQuery.extend( deep, clone, copy );</div><div class="line">				<span class="comment">// 如果属性值是undefined，不会合并到target中</span></div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> ( copy !== <span class="literal">undefined</span> ) &#123;</div><div class="line">					target[ name ] = copy;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 返回最终合并的结果</span></div><div class="line">	<span class="keyword">return</span> target;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="extend的用法"><a href="#extend的用法" class="headerlink" title="extend的用法"></a>extend的用法</h3><h4 id="如果有相同属性，且属性值都是对象"><a href="#如果有相同属性，且属性值都是对象" class="headerlink" title="如果有相同属性，且属性值都是对象"></a>如果有相同属性，且属性值都是对象</h4><p>var src1 = {name:”chang”,info:{age:24,sex:1,time:”2016”}};<br>var src2 = {name:”chen”,info:{age:26,sex:2,birth:”1945”}};</p>
<h5 id="子对象递归合并"><a href="#子对象递归合并" class="headerlink" title="子对象递归合并"></a>子对象递归合并</h5><p>$.extend(true,{},src1,src2);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Object</div><div class="line">	info: Object</div><div class="line">		age: 26</div><div class="line">		birth: &quot;1945&quot;</div><div class="line">		sex: 2</div><div class="line">		time: &quot;2016&quot;</div><div class="line">		__proto__: Object</div><div class="line">	name: &quot;chen&quot;</div><div class="line">	__proto__: Object</div></pre></td></tr></table></figure></p>
<h5 id="子对象后者属性值覆盖前者"><a href="#子对象后者属性值覆盖前者" class="headerlink" title="子对象后者属性值覆盖前者"></a>子对象后者属性值覆盖前者</h5><p>$.extend({},src1,src2); $.extend(false,{},src1,src2);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Object</div><div class="line">	info: Object</div><div class="line">		age: 26</div><div class="line">		birth: &quot;1945&quot;</div><div class="line">		sex: 2</div><div class="line">		__proto__: Object</div><div class="line">	name: &quot;chen&quot;</div><div class="line">	__proto__: Object</div></pre></td></tr></table></figure></p>
<h4 id="有相同属性，但是只有一个属性是对象的情况"><a href="#有相同属性，但是只有一个属性是对象的情况" class="headerlink" title="有相同属性，但是只有一个属性是对象的情况"></a>有相同属性，但是只有一个属性是对象的情况</h4><p>var src1 = {namee:”chang”,info:{age:24,sex:1,time:”2016”}};<br>var src2 = {namee:”chen”,info:1234};</p>
<h5 id="true-子对象info合并时不进行深度合并"><a href="#true-子对象info合并时不进行深度合并" class="headerlink" title="true + 子对象info合并时不进行深度合并"></a>true + 子对象info合并时不进行深度合并</h5><p>最后的src2合并时由于不是对象，所以不会进行深度合并，直接覆盖target中已有的info<br>$.extend(true,{},src1,src2);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object &#123;namee: &quot;chen&quot;, info: 1234&#125;</div></pre></td></tr></table></figure></p>
<h5 id="true-子对象info合并时-target不是对象则不合并"><a href="#true-子对象info合并时-target不是对象则不合并" class="headerlink" title="true + 子对象info合并时,target不是对象则不合并"></a>true + 子对象info合并时,target不是对象则不合并</h5><p>子对象info合并时，是这样的，$.extend(true,1234,{age:24,sex:1,time:”2016”})<br>第一个合并参数不是对象，所有target是{}<br>$.extend(true,{},src2,src1)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Object</div><div class="line">	info: Object</div><div class="line">		age: 24</div><div class="line">		sex: 1</div><div class="line">		time: &quot;2016&quot;</div><div class="line">		__proto__: Object</div><div class="line">	namee: &quot;chang&quot;</div><div class="line">	__proto__: Object</div></pre></td></tr></table></figure></p>
<h4 id="合并到自身"><a href="#合并到自身" class="headerlink" title="合并到自身"></a>合并到自身</h4><p>$.extend(src1);<br>$.info;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object &#123;age: 24, sex: 1, time: &quot;2016&quot;&#125;</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://jquery.com/" target="_blank" rel="external">jquery官网</a></li>
<li><a href="https://github.com/jquery/jquery" target="_blank" rel="external">jquery GitHub</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> JQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery3.1.1源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery在动态生成的节点上绑定事件无效]]></title>
      <url>/Jquery%E5%9C%A8%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E7%9A%84DOM%E8%8A%82%E7%82%B9%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6%E6%97%A0%E6%95%88/</url>
      <content type="html"><![CDATA[<p>在有些情况下，需要在DOM节点存在之前就给这个节点绑定事件，在使用Jquery给尚不存在的dom节点绑定事件时发现并不起作用，事件并没有绑定在dom节点上，但也不报错。而使用原生的JavaScript绑定事件，如果绑定事件的DOM节点不存在，是会报错的。<br><a id="more"></a></p>
<h3 id="原生JS绑定事件"><a href="#原生JS绑定事件" class="headerlink" title="原生JS绑定事件"></a>原生JS绑定事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> !<span class="attr">DOCTYPE</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>原生js绑定事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span>	</div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"J_confirm"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"J_content"</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 动态生成dom节点 --&gt;</span></div><div class="line">			<span class="comment">&lt;!-- &lt;button id="J_jump"&gt;跳转&lt;/button&gt; --&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="comment">// 已存在节点</span></div><div class="line">			<span class="built_in">document</span>.getElementById(<span class="string">'J_confirm'</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="built_in">console</span>.log(<span class="string">"J_confirm is clicked."</span>);</div><div class="line">			&#125;;</div><div class="line"></div><div class="line">			<span class="comment">// 在尚未生成的节点上绑定事件</span></div><div class="line">			<span class="built_in">document</span>.getElementById(<span class="string">'J_jump'</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="built_in">console</span>.log(<span class="string">"J_jump is clicked without event delegate using onclick."</span>);</div><div class="line">			&#125;;</div><div class="line"></div><div class="line">			<span class="comment">// 在尚未生成的节点上绑定事件</span></div><div class="line">			<span class="built_in">document</span>.getElementById(<span class="string">'J_jump'</span>).addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			 	<span class="built_in">console</span>.log(<span class="string">"J_jump is clicked without event delegate using addEventListener."</span>);</div><div class="line">			&#125;);</div><div class="line"></div><div class="line">			<span class="comment">// 在事件绑定之后才生成节点</span></div><div class="line">			<span class="built_in">document</span>.getElementById(<span class="string">'J_content'</span>).appendChild();</div><div class="line">			<span class="function"><span class="keyword">function</span> <span class="title">genNode</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> node = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</div><div class="line">				node.setAttribute(<span class="string">'id'</span>,<span class="string">'J_jump'</span>);</div><div class="line">				node.append(<span class="string">"跳转"</span>);</div><div class="line">				<span class="keyword">return</span> node;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>先给id为J_jump的dom节点绑定事件，然后再生成此节点，刷新页面就会报错，动态产生的跳转按钮也不会出现在页面上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Uncaught TypeError: Cannot read property &apos;addEventListener&apos; of null</div><div class="line"></div><div class="line">Uncaught TypeError: Cannot set property &apos;onclick&apos; of null</div></pre></td></tr></table></figure>
<h3 id="JQuery绑定事件"><a href="#JQuery绑定事件" class="headerlink" title="JQuery绑定事件"></a>JQuery绑定事件</h3><p>而使用Jquery在未生成的节点上绑定事件，跳转按钮是会正常展示的，但是点击没有反应。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> !<span class="attr">DOCTYPE</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>动态生成的元素绑定事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"J_confirm"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"J_content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.0.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			$(<span class="string">'#J_confirm'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="built_in">console</span>.log(<span class="string">"J_confirm is clicked."</span>);</div><div class="line">			&#125;);</div><div class="line">			$(<span class="string">'#J_jump'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="built_in">console</span>.log(<span class="string">"J_jump is clicked."</span>);</div><div class="line">			&#125;);</div><div class="line">			$(<span class="string">'#J_content'</span>).html(<span class="string">'&lt;button id="J_jump"&gt;跳转&lt;/button&gt;'</span>);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="原生JS事件委托"><a href="#原生JS事件委托" class="headerlink" title="原生JS事件委托"></a>原生JS事件委托</h3><p>可以通过事件代理解决这个问题，在使用原生的javascript绑定事件时，可以将事件绑定在确定会存在的祖先节点上，委托祖先节点处理事件.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> !<span class="attr">DOCTYPE</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>原生js绑定事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span>	</div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"J_confirm"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"J_content"</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- &lt;button id="J_jump"&gt;跳转&lt;/button&gt; --&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 动态生成dom节点 --&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="comment">// 已存在节点</span></div><div class="line">			<span class="built_in">document</span>.getElementById(<span class="string">'J_confirm'</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="built_in">console</span>.log(<span class="string">"J_confirm is clicked."</span>);</div><div class="line">			&#125;;</div><div class="line">			<span class="comment">// 事件委托</span></div><div class="line">			<span class="built_in">document</span>.getElementById(<span class="string">'J_content'</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> target = e.target;</div><div class="line">				<span class="built_in">console</span>.log(target.innerText + <span class="string">" is clicked with event delegate using onclick."</span>);</div><div class="line">			&#125;;</div><div class="line"></div><div class="line">			<span class="comment">// 事件委托</span></div><div class="line">			<span class="built_in">document</span>.getElementById(<span class="string">'J_content'</span>).addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">			 	<span class="keyword">var</span> target = e.target;</div><div class="line">				<span class="built_in">console</span>.log(target.innerText + <span class="string">" is clicked with event delegate using addEventListener."</span>);</div><div class="line">			&#125;);</div><div class="line"></div><div class="line">			<span class="comment">// 在事件绑定之后才生成节点</span></div><div class="line">			<span class="built_in">document</span>.getElementById(<span class="string">'J_content'</span>).appendChild(genNode(<span class="string">"跳转1"</span>));</div><div class="line">			<span class="built_in">document</span>.getElementById(<span class="string">'J_content'</span>).appendChild(genNode(<span class="string">"跳转2"</span>));</div><div class="line">			<span class="function"><span class="keyword">function</span> <span class="title">genNode</span>(<span class="params">text</span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> node = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</div><div class="line">				node.setAttribute(<span class="string">'id'</span>,<span class="string">'J_jump'</span>);</div><div class="line">				node.append(text);</div><div class="line">				<span class="keyword">return</span> node;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">跳转1 is clicked with event delegate using onclick.</div><div class="line">跳转1 is clicked with event delegate using addEventListener.</div><div class="line">跳转2 is clicked with event delegate using onclick.</div><div class="line">跳转2 is clicked with event delegate using addEventListener.</div></pre></td></tr></table></figure></p>
<h3 id="JQuery事件委托"><a href="#JQuery事件委托" class="headerlink" title="JQuery事件委托"></a>JQuery事件委托</h3><p>在Jquery中还是可以用on方法实现事件代理。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> !<span class="attr">DOCTYPE</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>动态生成的元素绑定事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"J_confirm"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"J_content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.0.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			$(<span class="string">'#J_confirm'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="built_in">console</span>.log(<span class="string">"J_confirm is clicked."</span>);</div><div class="line">			&#125;);</div><div class="line">			$(<span class="string">'#J_content'</span>).on(<span class="string">'click'</span>,<span class="string">'#J_jump1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="built_in">console</span>.log($(<span class="keyword">this</span>).text() + <span class="string">" is clicked with event delegate."</span>);</div><div class="line">			&#125;);</div><div class="line">			$(<span class="string">'#J_content'</span>).on(<span class="string">'click'</span>,<span class="string">'#J_jump2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">				<span class="built_in">console</span>.log($(<span class="keyword">this</span>).text() + <span class="string">" is clicked with event delegate."</span>);</div><div class="line">			&#125;);</div><div class="line">			$(<span class="string">'#J_content'</span>).append(<span class="string">'&lt;button id="J_jump1"&gt;跳转1&lt;/button&gt;'</span>);	</div><div class="line">			$(<span class="string">'#J_content'</span>).append(<span class="string">'&lt;button id="J_jump2"&gt;跳转2&lt;/button&gt;'</span>);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>所以，动态生成的节点上绑定事件无效，其实是如果事件在dom节点不存在时绑定，才会无效，对于动态生成的节点如果事件是在节点存在之后绑定的，是没有问题的。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://api.jquery.com/category/events/event-handler-attachment/" target="_blank" rel="external">JQuery Event Handler Attachment</a></li>
<li><a href="http://api.jquery.com/on/" target="_blank" rel="external">JQuery .on()</a></li>
<li><a href="http://jquery.cuishifeng.cn/index.html" target="_blank" rel="external">jQuery API </a></li>
<li><a href="http://www.jquery123.com/" target="_blank" rel="external">jQuery API 中文文档</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> JQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IE浏览器跨域访问失败]]></title>
      <url>/IE%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE%E5%A4%B1%E8%B4%A5/</url>
      <content type="html"><![CDATA[<p>PC前端项目放在h5.dianping.com域名下， 后端项目在e.dianping.com下。<br>chrome浏览器是可以正常访问的，IE浏览器访问页面获取不到数据。<br>在IE7以下版本的IE浏览器中使用ActiveXObject发送Ajax请求，IE7以上版本使用XMLHttpRequest发送Ajax请求，在IE8和IE9可以使用XDomainRequest进行跨域请求，IE10及以上使用支持跨域的XMLHttpRequest。<br>这次问题的产生来源于根据不同浏览器获得XMLHttpRequest对象逻辑有问题。<br><a id="more"></a></p>
<h3 id="跨域访问没有权限"><a href="#跨域访问没有权限" class="headerlink" title="跨域访问没有权限"></a>跨域访问没有权限</h3><p><img src="/images/IECORS/QQ20161224-1.png" alt=""><br>在ajax请求调用send方法时出错，提示没有权限。<br>因为IE浏览器默认对跨域访问有限制。需要在浏览器设置中去除限制。</p>
<ul>
<li>设置 &gt; Internet选项 &gt; 安全 &gt; 自定义级别 &gt; 在设置中找到其他</li>
<li>在【其他】中将【通过域访问数据源】启用</li>
</ul>
<h3 id="ActiveXObject没有withCredentials属性"><a href="#ActiveXObject没有withCredentials属性" class="headerlink" title="ActiveXObject没有withCredentials属性"></a>ActiveXObject没有withCredentials属性</h3><p>解决了这个问题之后，依然获取不到数据，提示对象没有此属性，在调用send方法时出错。<br><img src="/images/IECORS/QQ20161224-0.png" alt=""><br>查阅依赖fetch文件源码发现问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">getXMLHttpRequest() &#123;</div><div class="line">    <span class="keyword">var</span> xhr = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"microsoft.xmlhttp"</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (e1) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//非IE浏览器</span></div><div class="line">            xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">        &#125; <span class="keyword">catch</span> (e2) &#123;</div><div class="line">            <span class="built_in">window</span>.alert(<span class="string">"您的浏览器不支持ajax，请更换！"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> xhr;</div><div class="line">&#125;;</div><div class="line">send(url,opts=&#123;&#125;)&#123;</div><div class="line">    ...</div><div class="line">    let xhr = <span class="keyword">this</span>.getXMLHttpRequest();</div><div class="line">    <span class="keyword">if</span> (opts.credentials === <span class="string">'include'</span>) &#123;</div><div class="line">        xhr.withCredentials = <span class="literal">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>代码中先new ActiveXObject,如果出现异常再new XMLHttpRequest。<br>这样做会有问题，IE浏览器中new ActiveXObject并不会出现异常，new ActiveXObject(“microsoft.xmlhttp”)的结果是一个空的对象。这是在IE11上的运行结果：<br><img src="/images/IECORS/QQ20161224-2.png" alt=""><br><img src="/images/IECORS/QQ20161224-3.png" alt=""><br>所以在后续设置withCreditial字段支持cookie跨域访问时，会提示该对象没有此属性。</p>
<p>在IE10及后续的版本都已支持包含CORS的XMLHttpRequest，如果需要跨域访问cookie,还需要升级到IE10或以上版本。</p>
<p>因为要跨域访问cookie, IE用户都需要升级到IE10或此版本以上。并且代码需要修改，通过判断window.XMLHttpRequest是否存在再去new实例，并且对象具有withCredentials属性才赋值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">getXMLHttpRequest() &#123;</div><div class="line">    <span class="keyword">var</span> xhr;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</div><div class="line">                xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">            &#125;<span class="keyword">else</span>(<span class="built_in">window</span>.ActiveXObject)&#123;</div><div class="line">                <span class="comment">//IE浏览器低版本</span></div><div class="line">                xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"microsoft.xmlhttp"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">            <span class="built_in">console</span>.log(e);</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(<span class="string">"XMLHttpRequest is not supported"</span>)</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">return</span> xhr;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">send(url,opts=&#123;&#125;)&#123;</div><div class="line">    ...</div><div class="line">    let xhr = <span class="keyword">this</span>.getXMLHttpRequest();</div><div class="line">    <span class="keyword">if</span> (opts.credentials === <span class="string">'include'</span> &amp;&amp; xhr.withCredentials) &#123;</div><div class="line">        xhr.withCredentials = <span class="literal">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>如此，问题解决了~~</p>
<h3 id="浏览器对XMLHttpRequest的兼容性"><a href="#浏览器对XMLHttpRequest的兼容性" class="headerlink" title="浏览器对XMLHttpRequest的兼容性"></a>浏览器对XMLHttpRequest的兼容性</h3><p><img src="/images/IECORS/QQ20161224-0%402x.png" alt=""></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/AJAX/Getting_Started" target="_blank" rel="external">AJAX</a></li>
<li><a href="https://segmentfault.com/a/1190000005830066#articleHeader16" target="_blank" rel="external">ajax相关完整知识</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XDomainRequest#.E5.B1.9E.E6.80.A7" target="_blank" rel="external">XDomainRequest</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XDomainRequest" target="_blank" rel="external">HTTP访问控制(CORS)</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 工作 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CORS </tag>
            
            <tag> 兼容性问题 </tag>
            
            <tag> IE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ECharts绘制图形，不同时间段区域颜色不同]]></title>
      <url>/ECharts%E7%BB%98%E5%88%B6%E5%9B%BE%E5%BD%A2%EF%BC%8C%E4%B8%8D%E5%90%8C%E6%97%B6%E9%97%B4%E6%AE%B5%E5%8C%BA%E5%9F%9F%E9%A2%9C%E8%89%B2%E4%B8%8D%E5%90%8C/</url>
      <content type="html"><![CDATA[<p>ECharts很强大，所以各种配置项和参数也超多，要想画出想要的效果，还真是一个细致活儿。在项目中使用echarts需要先 npm install echarts –save 或者直接下载js文件引入到项目中。<br>可以先在官网上用模拟数据调试好配置项，然后把options直接copy到项目里，刚开始不知道可以在官网上调试，耽误了好多时间。<br>这次画的曲线有一个特点：有促销和无促销的面积区域需要用颜色区分，有促销：橙色，无促销：灰色。<br><img src="/images/echarts/销售量曲线图.png" alt=""><br><a id="more"></a></p>
<h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p><img src="/images/echarts/QQ20161210-1@2x.png" alt=""></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>下面是在ECharts调试的代码，也可以到<a href="http://gallery.echartsjs.com/editor.html?c=xHJpzlHKQe查看" target="_blank" rel="external">http://gallery.echartsjs.com/editor.html?c=xHJpzlHKQe查看</a></p>
<ul>
<li>按照时间顺序和每天的状态status，将数据分割成多个series,每个series设置不同的areaStyle和itemStyle。</li>
<li>图例的颜色会与itemStyle.normal.color的颜色相同，例如这里有两个图例legend：有促销和无促销，它们的颜色对应series中有相同name的itemStyle.normal.color。</li>
<li>所以如果itemStyle.normal.color要求都是蓝色，图例就不能按需求展示有促销为橙色，无促销为灰色，而是展示的itemStyle.normal.color。</li>
<li>所以其实项目中的图例是我自己画的，并不是用的echarts的legend属性<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数据 status为0表示这一天无促销，为1表示有促销</span></div><div class="line"><span class="keyword">var</span> effectDTOList = [</div><div class="line">    &#123; <span class="string">"date"</span>: <span class="string">"2016-10-30"</span>, <span class="string">"salesCnt"</span>: <span class="number">22</span>, <span class="string">"status"</span>: <span class="number">0</span> &#125;, </div><div class="line">    &#123; <span class="string">"date"</span>: <span class="string">"2016-10-31"</span>, <span class="string">"salesCnt"</span>: <span class="number">27</span>, <span class="string">"status"</span>: <span class="number">0</span> &#125;, </div><div class="line">    &#123; <span class="string">"date"</span>: <span class="string">"2016-11-01"</span>, <span class="string">"salesCnt"</span>: <span class="number">44</span>, <span class="string">"status"</span>: <span class="number">0</span> &#125;, </div><div class="line">    &#123; <span class="string">"date"</span>: <span class="string">"2016-11-02"</span>, <span class="string">"salesCnt"</span>: <span class="number">64</span>, <span class="string">"status"</span>: <span class="number">0</span> &#125;, </div><div class="line">    &#123; <span class="string">"date"</span>: <span class="string">"2016-11-03"</span>, <span class="string">"salesCnt"</span>: <span class="number">77</span>, <span class="string">"status"</span>: <span class="number">1</span> &#125;, </div><div class="line">    &#123; <span class="string">"date"</span>: <span class="string">"2016-11-04"</span>, <span class="string">"salesCnt"</span>: <span class="number">99</span>, <span class="string">"status"</span>: <span class="number">1</span> &#125;, </div><div class="line">    &#123; <span class="string">"date"</span>: <span class="string">"2016-11-05"</span>, <span class="string">"salesCnt"</span>: <span class="number">102</span>, <span class="string">"status"</span>: <span class="number">1</span> &#125;, </div><div class="line">    &#123; <span class="string">"date"</span>: <span class="string">"2016-11-06"</span>, <span class="string">"salesCnt"</span>: <span class="number">116</span>, <span class="string">"status"</span>: <span class="number">1</span> &#125;, </div><div class="line">    &#123; <span class="string">"date"</span>: <span class="string">"2016-11-07"</span>, <span class="string">"salesCnt"</span>: <span class="number">99</span>, <span class="string">"status"</span>: <span class="number">0</span> &#125;, </div><div class="line">    &#123; <span class="string">"date"</span>: <span class="string">"2016-11-08"</span>, <span class="string">"salesCnt"</span>: <span class="number">77</span>, <span class="string">"status"</span>: <span class="number">0</span> &#125;, </div><div class="line">    &#123; <span class="string">"date"</span>: <span class="string">"2016-11-09"</span>, <span class="string">"salesCnt"</span>: <span class="number">64</span>, <span class="string">"status"</span>: <span class="number">0</span> &#125;, </div><div class="line">    &#123; <span class="string">"date"</span>: <span class="string">"2016-11-10"</span>, <span class="string">"salesCnt"</span>: <span class="number">70</span>, <span class="string">"status"</span>: <span class="number">0</span> &#125;</div><div class="line">    ];</div><div class="line"><span class="comment">//准备数据源和配置项</span></div><div class="line"><span class="keyword">var</span> xAxis = [], <span class="comment">//x轴数据</span></div><div class="line">    yAxis = [], <span class="comment">//y轴数据</span></div><div class="line">    data = [],  <span class="comment">//每个系列（series）图表数据，是个二维数组</span></div><div class="line">    series = [], </div><div class="line">    seriesItem;</div><div class="line"><span class="keyword">var</span> st = effectDTOList[<span class="number">0</span>].status;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; effectDTOList.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> date = effectDTOList[i].date.substring(<span class="number">5</span>);</div><div class="line">    xAxis.push(date);</div><div class="line">    yAxis.push(effectDTOList[i].salesCnt);</div><div class="line">    data.push([date, effectDTOList[i].salesCnt]);</div><div class="line">    <span class="keyword">if</span> (st != effectDTOList[i].status || (i == effectDTOList.length - <span class="number">1</span>)) &#123;</div><div class="line">        <span class="keyword">var</span> color = st == <span class="number">1</span> ? <span class="string">'#ff8c66'</span> : <span class="string">"#e2e2e2"</span>;</div><div class="line">        <span class="keyword">var</span> name1 = st == <span class="number">1</span> ? <span class="string">'有促销'</span> : <span class="string">"无促销"</span>;</div><div class="line">        seriesItem = &#123;</div><div class="line">            <span class="attr">name</span>: name1,</div><div class="line">            <span class="attr">type</span>: <span class="string">'line'</span>,</div><div class="line">            <span class="attr">smooth</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">symbolSize</span>: <span class="number">7</span>, <span class="comment">//转折点的大小</span></div><div class="line">            data: data,</div><div class="line">            <span class="attr">areaStyle</span>: &#123;</div><div class="line">                <span class="attr">normal</span>: &#123;</div><div class="line">                    <span class="attr">color</span>: color,</div><div class="line">                    <span class="attr">opacity</span>: <span class="number">1</span></div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">lineStyle</span>: &#123; <span class="comment">//曲线样式</span></div><div class="line">                normal: &#123;</div><div class="line">                    <span class="attr">color</span>: <span class="string">'#ff8c66'</span></div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">itemStyle</span>: &#123; <span class="comment">//转折点的样式</span></div><div class="line">                normal: &#123;</div><div class="line">                    <span class="attr">color</span>: color,</div><div class="line">                    <span class="attr">borderWidth</span>: <span class="number">2</span>,</div><div class="line">                    <span class="attr">borderType</span>: <span class="string">'solid'</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        series.push(seriesItem);</div><div class="line">        data = [</div><div class="line">            [date, effectDTOList[i].salesCnt]</div><div class="line">        ];</div><div class="line">        st = effectDTOList[i].status;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//配置项</span></div><div class="line">option = &#123;</div><div class="line">    <span class="attr">grid</span>: &#123;</div><div class="line">        <span class="attr">left</span>: <span class="string">'3%'</span>,</div><div class="line">        <span class="attr">right</span>: <span class="string">'4%'</span>,</div><div class="line">        <span class="attr">bottom</span>: <span class="string">'3%'</span>,</div><div class="line">        <span class="attr">containLabel</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">title</span>: &#123;</div><div class="line">        <span class="attr">text</span>: <span class="string">'销售量曲线图'</span>,</div><div class="line">        <span class="attr">subtext</span>: <span class="string">'不同时间段面积标记不同颜色'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">legend</span>: &#123;</div><div class="line">        <span class="attr">right</span>: <span class="number">50</span>,</div><div class="line">        <span class="attr">top</span>: <span class="number">20</span>,</div><div class="line">        <span class="attr">data</span>: [&#123;</div><div class="line">                <span class="attr">name</span>: <span class="string">'无促销'</span>,</div><div class="line">                <span class="attr">icon</span>: <span class="string">'circle'</span>,</div><div class="line">                <span class="attr">textStyle</span>: &#123;</div><div class="line">                    <span class="attr">color</span>: <span class="string">'#333'</span>,</div><div class="line">                    <span class="attr">fontSize</span>: <span class="string">'14'</span></div><div class="line">                &#125;</div><div class="line">            &#125;, &#123;</div><div class="line">                <span class="attr">name</span>: <span class="string">'有促销'</span>,</div><div class="line">                <span class="attr">icon</span>: <span class="string">'circle'</span>,</div><div class="line">                <span class="attr">textStyle</span>: &#123;</div><div class="line">                    <span class="attr">color</span>: <span class="string">'#333'</span>,</div><div class="line">                    <span class="attr">fontSize</span>: <span class="string">'14'</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//工具栏</span></div><div class="line">    toolbox: &#123;  </div><div class="line">        <span class="attr">feature</span>: &#123;</div><div class="line">            <span class="attr">saveAsImage</span>: &#123;&#125;  <span class="comment">//下载图片</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//缩放配置</span></div><div class="line">    dataZoom: [&#123;</div><div class="line">        <span class="attr">type</span>: <span class="string">'inside'</span>, <span class="comment">//内嵌缩放，如鼠标滚轮滚动、两指滑动</span></div><div class="line">        xAxisIndex: [<span class="number">0</span>] <span class="comment">//x轴可缩放</span></div><div class="line">    &#125;],</div><div class="line">    <span class="attr">tooltip</span>: &#123;</div><div class="line">        <span class="attr">trigger</span>: <span class="string">'axis'</span>,</div><div class="line">        <span class="attr">formatter</span>: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; params.length; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (params[i].value) &#123;</div><div class="line">                    <span class="keyword">return</span> params[i].value[<span class="number">1</span>];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="string">'loading'</span>;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">backgroundColor</span>: <span class="string">'#ff6633'</span>,</div><div class="line">        <span class="attr">padding</span>: [<span class="number">10</span>],</div><div class="line">        <span class="attr">axisPointer</span>: &#123;</div><div class="line">            <span class="attr">lineStyle</span>: &#123;</div><div class="line">                <span class="attr">color</span>: <span class="string">'#ddd'</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">xAxis</span>: &#123;</div><div class="line">        <span class="attr">axisTick</span>: &#123;</div><div class="line">            <span class="attr">show</span>: <span class="literal">true</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">type</span>: <span class="string">'category'</span>,</div><div class="line">        <span class="attr">boundaryGap</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">data</span>: xAxis,</div><div class="line">        <span class="attr">axisLine</span>: &#123;</div><div class="line">            <span class="attr">lineStyle</span>: &#123;</div><div class="line">                <span class="attr">color</span>: <span class="string">'#ddd'</span></div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">axisLabel</span>: &#123;</div><div class="line">            <span class="attr">textStyle</span>: &#123;</div><div class="line">                <span class="attr">color</span>: <span class="string">'#333'</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">yAxis</span>: &#123;</div><div class="line">        <span class="attr">axisTick</span>: &#123;</div><div class="line">            <span class="attr">show</span>: <span class="literal">false</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">type</span>: <span class="string">'value'</span>,</div><div class="line">        <span class="attr">axisLine</span>: &#123;</div><div class="line">            <span class="attr">show</span>: <span class="literal">false</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">splitLine</span>: &#123;</div><div class="line">            <span class="attr">lineStyle</span>: &#123;</div><div class="line">                <span class="attr">color</span>: <span class="string">'#ddd'</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">series</span>: series</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><p><a href="http://echarts.baidu.com/tutorial.html" target="_blank" rel="external">ECharts官网</a></p>
</li>
<li><p><a href="https://github.com/ecomfe/echarts" target="_blank" rel="external">ECharts GitHub</a></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 工作 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ECharts </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小桔子]]></title>
      <url>/%E5%B0%8F%E6%A1%94%E5%AD%90/</url>
      <content type="html"><![CDATA[<p>最近有点忙晕，周末来公司坐坐。<br>平时的周末，一般都是待在家里。<br>早上起床，跟室友聊聊天，吃个饭，看个视频，看看书，睡个觉，一天就这么过去了。<br>偶尔出来，也能发现一些小惊喜。<br>要不，以后都记录下来吧~~<br><a id="more"></a><br>同组的姑娘，周末也来了公司，给了一个小桔子。<br>一眼就被萌到了，长得太萌，一个小桔子吃了半个小时。。<br>怎么连桔子都这么美丽@^@<br><img src="/images/life/2016121018113.jpg" class="full-image"><br><img src="/images/life/2016121018112.jpg" class="full-image"><br><img src="/images/life/2016121018111.jpg" class="full-image"></p>
]]></content>
      
        <categories>
            
            <category> 日常 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript事件]]></title>
      <url>/JavaScript%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>在web浏览器中操作页面时，会发生各种不同的事件，比如光标停留，鼠标点击。我们可以使用javascript应用程序关注特定类型的事件，并注册当事件发生时要调用的函数,即事件处理器。<br>事件有几个重要的概念：这几个概念：</p>
<ul>
<li>事件类型 event type</li>
<li>事件目标 event target</li>
<li>事件处理程序（event handler）或 事件监听程序（event listener）</li>
<li>事件对象：与特定事件相关的，包含该事件详细信息的对象，作为参数传递给事件处理函数。<a id="more"></a>
</li>
</ul>
<h3 id="事件注册和移除"><a href="#事件注册和移除" class="headerlink" title="事件注册和移除"></a>事件注册和移除</h3><h4 id="设置事件目标的onxxx属性"><a href="#设置事件目标的onxxx属性" class="headerlink" title="设置事件目标的onxxx属性"></a>设置事件目标的onxxx属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"clickHandler()"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickHandler</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"2017，你好。"</span>);</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>或者<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"id0"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"id0"</span>).onclick = <span class="function"><span class="keyword">function</span> <span class="title">clickHandler</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"2017，你好。"</span>);</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这种设置事件处理程序属性的方法适用于所有浏览器的所有常用事件类型，但是对于每个事件目标的每个事件类型最多只有一个处理程序，如果给某一个事件目标的某一个事件类型绑定多个事件处理程序，后面的事件处理程序会覆盖前面的，就是说只会执行最后一个事件处理函数。<br>例如下面的元素id0绑定了两个click事件函数，点击后控制台只会输出 【2016，再见。】<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"id0"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"id0"</span>).onclick = <span class="function"><span class="keyword">function</span> <span class="title">clickHandler</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"2017，你好。"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"id0"</span>).onclick = <span class="function"><span class="keyword">function</span> <span class="title">clickHandler</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"2016，再见。"</span>);</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>设置属性的方法注册事件，那移除事件自然是移除onxxx方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"id0"</span>).removeAttribute(<span class="string">"onclick"</span>);</div></pre></td></tr></table></figure></p>
<h4 id="addEventListener-eventType-eventHandler-boolean-方法"><a href="#addEventListener-eventType-eventHandler-boolean-方法" class="headerlink" title="addEventListener(eventType,eventHandler,boolean)方法"></a>addEventListener(eventType,eventHandler,boolean)方法</h4><ul>
<li>第一个参数 eventType 注册处理程序的事件类型</li>
<li>第二个参数 eventHandler 事件处理函数</li>
<li>第三个参数 boolean  是一个布尔值，表示是否注册为事件捕获处理函数，默认是false</li>
</ul>
<p><strong>注：</strong>addEventListener的更多用法参见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener" target="_blank" rel="external">MDN &gt; Web 技术文档 &gt; Web API 接口 &gt; EventTarget &gt; EventTarget.addEventListener()</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"id0"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"id0"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> <span class="title">clickHandler</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"2017，你好。"</span>);</div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>addEventListener方法在IE9之前的IE浏览器版本不支持，使用的方法是attachEvent()。<br>使用addEventListener可以对同一事件目标的同一事件类型绑定多个处理函数并且一次执行。控制台输出：<br>2017，你好。<br>2016，再见。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"id0"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"id0"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> <span class="title">clickHandler</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"2017，你好。"</span>);</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"id0"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> <span class="title">clickHandler</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"2016，再见。"</span>);</div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>并且不会修改或影响其他方式注册的事件处理程序，如下还是会打印两条信息<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"id0"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"id0"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> <span class="title">clickHandler</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"2016，再见。"</span>);</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"id0"</span>).onclick = <span class="function"><span class="keyword">function</span> <span class="title">clickHandler</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"2017，你好。"</span>);</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果使用相同的参数在同一对象上调用，只会注册一次处理程序。如下只会打印一条信息。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"id0"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"id0"</span>).addEventListener(<span class="string">"click"</span>,clickHandler);</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"id0"</span>).addEventListener(<span class="string">"click"</span>,clickHandler);</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">clickHandler</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"2016，再见。"</span>);</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>与addEventListener注册事件对应的移除事件的方法是removeEventListener方法，参数与addEventListener方法相同。<br>可见，使用addEventListener可以将事件注册为两种，默认都是冒泡事件处理程序</p>
<ul>
<li>冒泡事件处理程序 在冒泡阶段调用</li>
<li>捕获事件处理程序 在捕获阶段调用</li>
</ul>
<h4 id="IE浏览器中的attachEvent和detachEvent方法"><a href="#IE浏览器中的attachEvent和detachEvent方法" class="headerlink" title="IE浏览器中的attachEvent和detachEvent方法"></a>IE浏览器中的attachEvent和detachEvent方法</h4><p>IE5 ~ IE8 这些版本支持attachEvent和detachEvent方法，与addEventListener和removeEventListener方法类似。但也有几点不同：</p>
<ul>
<li>只接收两个参数，这也说明IE9版本之前的IE浏览器不支持事件捕获。</li>
<li>第一个参数事件类型带前缀‘on’</li>
<li>如果使用相同的参数在同一对象上调用，调用次数和注册次数相同。而且调用顺序可能和注册顺序不同。</li>
</ul>
<h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><p>调用事件处理程序时，会向其传入一个参数：事件对象event,但在IE8及以前的IE版本中不会传入，需要通过window.event获取事件对象 ,所以获取对象时可以这样写: event || window.event</p>
<h3 id="事件传播"><a href="#事件传播" class="headerlink" title="事件传播"></a>事件传播</h3><p>如果事件对象是文档或者文档元素，大部分事件会冒泡到DOM树根，再到document对象，再到window对象。有几种特例：</p>
<ul>
<li>focus、blur、srcoll事件不会冒泡；</li>
<li>还有load事件会冒泡到document对象停止，不再冒泡到window对象</li>
</ul>
<p><strong>事件传播的三个阶段：</strong></p>
<ul>
<li>事件捕获阶段<br>  依次调用 window对象的捕获处理程序 》 document对象的捕获处理程序 》 body对象的捕获处理程序 》 …（DOM树这条路径上的捕获处理程序）… 》 事件目标父元素的捕获处理程序</li>
<li>目标阶段<br>会触发目标对象上的所有监听器,不管是冒泡还是捕获事件处理程序</li>
<li>事件冒泡阶段  与捕获阶段的调用顺序相反，但调用的是这条路径上注册的冒泡处理程序<br>注： 事件捕获在IE9之前的IE中无法使用，一般用在程序调试或事件取消技术中。</li>
</ul>
<p><strong>阻止事件传播:</strong></p>
<ul>
<li>event.stopPropagation()<br>  IE9之前的IE不支持<br>  阻止事件在其他对象上的传播，在事件目标上的其他事件程序仍然会被调用<br>  适用于捕获阶段、目标对象本身、冒泡阶段</li>
<li>event.stopImmediatePropagation()<br>  部分浏览器支持<br>  阻止事件在其他对象上的传播，在事件目标上的其他事件程序也会被阻止调用<br>  适用于捕获阶段、目标对象本身、冒泡阶段<br>  jquery、YUI提供跨浏览器的stopImmediatePropagation()方法</li>
<li>event.cancelBubble = true<br>  IE的事件对象提供<br>  阻止事件在其他对象上的传播<br>  适用于目标对象本身、冒泡阶段</li>
</ul>
<h3 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h3><p>利用事件冒泡可以实现事件代理，在目标元素的祖先元素上注册事件处理程序，并可以通过事件对象的event.target || event.srcElement获取目标对象。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li>Javascript权威指南(第六版) 第17章 事件处理</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Events" target="_blank" rel="external">MDN &gt; Web 技术文档 &gt; Web API 接口 &gt; 文档对象模型 (DOM) &gt; 事件及DOM</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener" target="_blank" rel="external">MDN &gt; Web 技术文档 &gt; Web API 接口 &gt; EventTarget<br>EventTarget.addEventListener()</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端构建工具Gulp]]></title>
      <url>/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7Gulp/</url>
      <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>全局安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp -g</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>项目开发安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp -dev --save</div></pre></td></tr></table></figure>
<p>插件安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-concat gulp-minify-html gulp-minify-css gulp-rename  -dev --save</div></pre></td></tr></table></figure>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>在项目根目录下需要创建一个名为gulpfile.js的文件,例如</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp       = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> minifyHTML = <span class="built_in">require</span>(<span class="string">'gulp-minify-html'</span>);</div><div class="line"><span class="keyword">var</span> concat     = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</div><div class="line"><span class="keyword">var</span> minifyCSS  = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</div><div class="line"><span class="keyword">var</span> rename     = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);</div><div class="line"><span class="keyword">var</span> minifyJS   = <span class="built_in">require</span>(<span class="string">'gulp-jsmin'</span>);</div><div class="line"><span class="keyword">var</span> babel      = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>);</div><div class="line"><span class="keyword">var</span> connect    = <span class="built_in">require</span>(<span class="string">'gulp-connect'</span>);</div><div class="line"><span class="keyword">var</span> open       = <span class="built_in">require</span>(<span class="string">'gulp-open'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'html'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    gulp.src(<span class="string">'./src/html/*.html'</span>)</div><div class="line">        .pipe(minifyHTML())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./'</span>))</div><div class="line">        .pipe(connect.reload())</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'css'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    gulp.src(<span class="string">'./src/css/*.css'</span>)</div><div class="line">        .pipe(concat(<span class="string">'style.css'</span>))</div><div class="line">        .pipe((minifyCSS()))</div><div class="line">        .pipe(rename(&#123; <span class="attr">suffix</span> : <span class="string">'.min'</span>&#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'./assets/'</span>))</div><div class="line">        .pipe(connect.reload())</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'js'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    gulp.src(<span class="string">'./src/js/*.js'</span>)</div><div class="line">        .pipe(concat(<span class="string">'main.js'</span>))</div><div class="line">        .pipe(rename(&#123; <span class="attr">suffix</span> : <span class="string">'.min'</span>&#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'./assets/'</span>))</div><div class="line">        .pipe(connect.reload())</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'babel'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    gulp.src(<span class="string">'./src/exercise/**/*.js'</span>)</div><div class="line">        .pipe(babel())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./exercise/'</span>))</div><div class="line">        .pipe(connect.reload())</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watch'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    gulp.watch(<span class="string">'./src/html/*.html'</span>,[<span class="string">'html'</span>]);</div><div class="line">    gulp.watch(<span class="string">'./src/css/*.css'</span>,[<span class="string">'css'</span>]);</div><div class="line">    gulp.watch(<span class="string">'./src/js/*.js'</span>,[<span class="string">'js'</span>]);</div><div class="line">    gulp.watch(<span class="string">'./src/exercise/**/*.js'</span>,[<span class="string">'babel'</span>]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'connect'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    connect.server(&#123;</div><div class="line">        <span class="attr">root</span>:<span class="string">'./'</span>,</div><div class="line">        <span class="attr">ip</span>:<span class="string">'127.0.0.0'</span>,</div><div class="line">        <span class="attr">port</span>:<span class="string">'2000'</span>,</div><div class="line">        <span class="attr">livereload</span>:<span class="literal">true</span></div><div class="line">    &#125;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'html'</span>,<span class="string">'css'</span>,<span class="string">'js'</span>,<span class="string">'babel'</span>,<span class="string">'watch'</span>,<span class="string">'connect'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    gulp.src(__filename)</div><div class="line">        .pipe(open(&#123;<span class="attr">uri</span>:<span class="string">'http://localhost:2000'</span>&#125;))</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><h4 id="gulp-src-globs"><a href="#gulp-src-globs" class="headerlink" title="gulp.src(globs)"></a>gulp.src(globs)</h4><p>输出符合glob匹配模式的文件，返回Vinyl files的stream,可以pipe到别的文件或插件中。</p>
<h4 id="gulp-dest-path"><a href="#gulp-dest-path" class="headerlink" title="gulp.dest(path)"></a>gulp.dest(path)</h4><p>stream能被pipe进来写入一个文件，文件的上级路径在path下，path下文件的路径根据base路径和相对于base的路径计算，如果文件夹不存在会自动创建。</p>
<h4 id="gulp-task-name-function"><a href="#gulp-task-name-function" class="headerlink" title="gulp.task(name,function)"></a>gulp.task(name,function)</h4><p>定义一个任务，接收两个参数。第一个参数是任务的名字，第二个参数是要做的事情。如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'html'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    gulp.src(<span class="string">'./src/html/*.html'</span>)</div><div class="line">        .pipe(minifyHTML())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./'</span>))</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>任务的名字叫html,要做的事情就是把./src/html/目录下已.html结尾的文件进行压缩后，放到./目录下。<br>如果要执行多个任务，可以这样定义：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'dev'</span>,[<span class="string">'html'</span>,<span class="string">'css'</span>,<span class="string">'js'</span>,<span class="string">'babel'</span>,<span class="string">'watch'</span>]，<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</div></pre></td></tr></table></figure>
<p>任务dev就是执行任务html，css，js，babel，watch<br>css，js，babel，watch都要像任务html一样被定义</p>
<p>默认情况下，这些task会以最大的并发数执行</p>
<h4 id="gulp-watch-glob-tasks"><a href="#gulp-watch-glob-tasks" class="headerlink" title="gulp.watch(glob,tasks)"></a>gulp.watch(glob,tasks)</h4><p>监听文件，当文件改动时，做一些事情。</p>
<h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><ul>
<li><a href="https://github.com/stevelacy/gulp-open" target="_blank" rel="external">gulp-open</a>    –打开一个文件</li>
<li><a href="https://github.com/hparra/gulp-rename" target="_blank" rel="external">gulp-rename</a>  –重命名文件</li>
<li><a href="https://github.com/lazd/gulp-replace" target="_blank" rel="external">gulp-replace</a> –替换路径</li>
<li><a href="https://github.com/robrich/gulp-rimraf" target="_blank" rel="external">gulp-rimraf</a> –删除目录</li>
<li><a href="https://github.com/sanfords/gulp-minify-html" target="_blank" rel="external">gulp-minify-html</a> –压缩html文件</li>
<li><a href="https://github.com/nfroidure/gulp-minify-css" target="_blank" rel="external">gulp-minify-css</a> –压缩css文件</li>
<li><a href="https://github.com/chilijung/gulp-jsmin" target="_blank" rel="external">gulp-jsmin</a> –压缩js文件</li>
<li><a href="https://github.com/terinjokes/gulp-uglify" target="_blank" rel="external">gulp-uglify</a> –压缩javascript文件</li>
<li><a href="https://github.com/contra/gulp-concat" target="_blank" rel="external">gulp-concat</a>  –合并文件</li>
<li><a href="https://github.com/babel/gulp-babel" target="_blank" rel="external">gulp-babel</a> –把es6编译成es5</li>
<li><a href="https://github.com/plus3network/gulp-less" target="_blank" rel="external">gulp-less</a> –将less文件编译成css文件</li>
<li><a href="https://github.com/gulpjs/gulp-util" target="_blank" rel="external">gulp-util</a> –gulp插件的工具方法</li>
</ul>
<h3 id="Gulp插件开发"><a href="#Gulp插件开发" class="headerlink" title="Gulp插件开发"></a>Gulp插件开发</h3><p>待研究。。。</p>
]]></content>
      
        <categories>
            
            <category> 前端构建 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Gulp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Prism 轻量级代码语法高亮库]]></title>
      <url>/Prism%E8%BD%BB%E9%87%8F%E7%BA%A7%E4%BB%A3%E7%A0%81%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>Prism是一个轻量的、可扩展的代码语法高亮库，根据现代web标准设计。目前有很多网站在用，JavaScript的创始人Brendan Eich的个人博客也是用的Prism。Prism支持很多种语言，并且扩展性很好，它要求代码放在code标签下，code标签可包含在pre标签内。下面是多种写法下的显示效果。</p>
<p><img src="/images/prism/QQ20161123-1@2x.png" alt=""><br><a id="more"></a><br>Prism支持多种代码高亮风格，多种语言，并且可以添加插件来丰富Prism的功能。只需要在HTML中引入prism.js和prism.css。</p>
<p>在<a href="http://prismjs.com/" target="_blank" rel="external">Prism官网</a>点击下载，依次选择：</p>
<ul>
<li>是否压缩</li>
<li>选主题，代码风格这里用的okaidia</li>
<li>选语言，按需选择，选择语言越多文件越大</li>
<li>选插件，在prism.js中可以看到每个插件都对应一个立即执行的函数</li>
</ul>
<p>下载prism.js文件和prism.css文件，引入html文件中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"./prism.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"language-markup"</span> <span class="attr">id</span>=<span class="string">"different-markup"</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--这种写法需要插件File Highlight支持--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">pre</span> <span class="attr">data-src</span>=<span class="string">"./test.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">pre</span> <span class="attr">class</span>=<span class="string">"language-css"</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>p &#123; color: red; &#125;<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">pre</span> <span class="attr">class</span>=<span class="string">"language-css"</span>&gt;</span><span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">"language-*"</span>&gt;</span>p &#123; color: red; &#125;<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--pre和code标签之间有空格ode标签之间，展示出来的效果可以看到代码与边框上下左右间隔不均匀--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">pre</span> <span class="attr">class</span>=<span class="string">"language-css"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">"language-css"</span>&gt;</span>p &#123; color: red; &#125;<span class="tag">&lt;/<span class="name">code</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">code</span>&gt;</span>p &#123; color: red; &#125;<span class="tag">&lt;/<span class="name">code</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">"language-css"</span>&gt;</span>p &#123; color: red; &#125;<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- No language, should inherit .language-markup --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>p &#123; color: red; &#125;<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">"language-css"</span>&gt;</span>p &#123; color: red; &#125;<span class="tag">&lt;/<span class="name">code</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 没有设置language,会继承父节点的class .language-markup --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">"language-*"</span>&gt;</span>p &#123; color: red; &#125;<span class="tag">&lt;/<span class="name">code</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 没有高亮 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">"language-none"</span>&gt;</span>p &#123; color: red; &#125;<span class="tag">&lt;/<span class="name">code</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./prism.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>搞定~~</p>
<p>相关    </p>
<ul>
<li><a href="https://github.com/PrismLibrary" target="_blank" rel="external">Prism GitHub</a></li>
<li><a href="http://prismjs.com/" target="_blank" rel="external">Prism官网</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 语法高亮 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NexT主题中vendors目录下资源找不到报404]]></title>
      <url>/hexo-theme-next%E4%B8%BB%E9%A2%98vendors%E7%9B%AE%E5%BD%95%E4%B8%8B%E8%B5%84%E6%BA%90%E6%89%BE%E4%B8%8D%E5%88%B0/</url>
      <content type="html"><![CDATA[<p>昨天发了一篇新文章，部署之后博客都打不开了，两个站点控制台都抛红,NexT主题的source目录下有一个vendors目录，这个目录下的资源文件都无法加载，这是因为github和coding都升级了Jekyll的版本，新版本会忽略vendors文件，github在<a href="https://github.com/blog/2277-what-s-new-in-github-pages-with-jekyll-3-3" target="_blank" rel="external">What’s new in GitHub Pages with Jekyll 3.3</a>中给了解释和解决办法。</p>
<p> to make it easier to vendor third-party dependencies via package managers     like Bundler or NPM (or Yarn), Jekyll now ignores the vendor and node_modules directories by default, speeding up build times and avoiding potential errors. If you need those directories included in your site, set exclude: [] in your site’s configuration file.</p>
<a id="more"></a>
<p><img src="/images/vendors404/QQ20161110-1@2x.png" alt=""><br>这里有几个解决办法</p>
<ul>
<li>把vendors全部手动替换成lib</li>
<li>重新clone主题，NeXT的作者已经修复了这个问题，但是重新clone需要重新设置</li>
<li>项目根目录下新建一个 .nojekyll 隐藏文件 ，内容为!vendor/*</li>
</ul>
<p>参考：</p>
<ul>
<li><a href="https://github.com/blog/2277-what-s-new-in-github-pages-with-jekyll-3-3" target="_blank" rel="external">What’s new in GitHub Pages with Jekyll 3.3</a></li>
<li><a href="https://github.com/hexojs/hexo/issues/2238" target="_blank" rel="external">关于vendors文件夹里面的js文件和css文件404</a></li>
<li><a href="https://github.com/iissnan/hexo-theme-next/issues/1214" target="_blank" rel="external">Hexo本地预览没问题 deploy后主页空白</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 静态博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Jekyll </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo博客迁移至GitCafe(Coding)的Pages服务]]></title>
      <url>/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%87%B3GitCafe%E7%9A%84Pages%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>这个博客之前是挂在GitHub的Pages空间，这两天发现访问博客的速度好慢啊。啊不对，是一直都很慢，这两天是完全打不开了。。。找了找能优化访问速度的办法，最后决定在GitCafe上也部署一个。GitCafe是国内版的GitHub，有了它访问速度真的快好多。国内的支持部署静态博客的代码托管仓库还有Coding，不过打开<a href="https://coding.net/gitcafe.html" target="_blank" rel="external">GitCafe官网</a>发现，它已经被<a href="https://coding.net/" target="_blank" rel="external">Coding</a>收购了。。。<br><img src="/images/ToGitCafe/QQ20161109-2@2x.png" class="full-image"><br><a id="more"></a></p>
<h3 id="迁移步骤"><a href="#迁移步骤" class="headerlink" title="迁移步骤"></a>迁移步骤</h3><h4 id="注册Coding账号"><a href="#注册Coding账号" class="headerlink" title="注册Coding账号"></a>注册Coding账号</h4><p>用户名要想好，因为无法更改，而且博客的项目名称要跟用户名一致，作为博客网址的一部分。<br>比如用户名是chang20159,项目名是chang20159，博客网址就是<a href="http://chang20159.coding.me/" target="_blank" rel="external">http://chang20159.coding.me/</a><br><img src="/images/ToGitCafe/QQ20161109-3@2x.png" class="full-image"></p>
<h4 id="创建项目并开启Pages服务"><a href="#创建项目并开启Pages服务" class="headerlink" title="创建项目并开启Pages服务"></a>创建项目并开启Pages服务</h4><p>新建项目很简单，注意项目名最好与用户名一直，至于为什么我也不知道，没研究。。<br>进入项目，在Pages服务中开启Pages服务，并设置分支为master,因为你的项目开发分支是master。<br>这个与你要发布的分支名一直就可以。<br><img src="/images/ToGitCafe/QQ20161109-6@2x.png" class="full-image"><br>如果有自己的域名的话，可以将它的cname指向博客地址，并在开启Pages服务后绑定到自己的域名。   <img src="/images/ToGitCafe/QQ20161109-7@2x.png" class="full-image"></p>
<h4 id="编辑Hexo配置文件-config-yml"><a href="#编辑Hexo配置文件-config-yml" class="headerlink" title="编辑Hexo配置文件_config.yml"></a>编辑Hexo配置文件_config.yml</h4><p>这个跟部署到GitHub是一样的，加上在coding.net上刚创建项目的仓库地址。</p>
<pre><code>deploy:
  type: git
  repo: 
     github: git@github.com:chang20159/chang20159.github.io.git
     coding: git@git.coding.net:chang20159/chang20159.git
  branch: master
</code></pre><h4 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h4><p>如果之前生成过ssh,可以直接使用，存放在~/.ssh/id_rsa.pub这个目录下。<br>打开个人设置-SSH公钥，把id_rsa.pub这个文件里的内容粘贴上去，点击添加就可以了。<br>这一步不做的话，在hexo deploy的时候会提示没有权限，无法部署的。<br><img src="/images/ToGitCafe/QQ20161109-4@2x.png" class="full-image"></p>
<h4 id="添加Staticfile文件"><a href="#添加Staticfile文件" class="headerlink" title="添加Staticfile文件"></a>添加Staticfile文件</h4><p>最后需要在source/目录下放置一个名为Staticfile的文件，coding.net需要这个文件来作为以静态文件部署的标志。如果没有这个文件，打开<a href="http://chang20159.coding.me/就会看到**404" target="_blank" rel="external">http://chang20159.coding.me/就会看到**404</a> page not found**。</p>
<pre><code>cd source/
touch Staticfile  #名字必须是Staticfile
</code></pre><p>这样hexo deploy时就会同时部署到GitHub和Coding.net的Page服务上啦~~~   </p>
<pre><code>changdeMacBook-Pro:blog chang$ hexo deploy
INFO  Deploying: git
INFO  Clearing .deploy_git folder...
INFO  Copying files from public folder...
On branch master
nothing to commit, working directory clean
To git@git.coding.net:chang20159/chang20159.git
   c8979a1..18777cd  HEAD -&gt; master
Branch master set up to track remote branch master from git@git.coding.net:chang20159/chang20159.git.
On branch master
nothing to commit, working directory clean
To git@github.com:chang20159/chang20159.github.io.git
   c8979a1..18777cd  HEAD -&gt; master
Branch master set up to track remote branch master from git@github.com:chang20159/chang20159.github.io.git.
INFO  Deploy done: git 
</code></pre><p>然后<a href="http://chang20159.coding.me/和https://chang20159.github.io/都可以看到新发的内容啦~~~" target="_blank" rel="external">http://chang20159.coding.me/和https://chang20159.github.io/都可以看到新发的内容啦~~~</a><br>不过，新发布的内容coding上需要等几分钟才会更新。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>附上一篇写得很好的文章 》》》》》    </p>
<ul>
<li><a href="https://segmentfault.com/a/1190000004548638" target="_blank" rel="external">hexo同时托管到coding.net与github</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 静态博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Coding </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[制作WebIcon字体]]></title>
      <url>/%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>字体图标，又名IconFont。<br>在画页面的时候常常会碰到向下的箭头、向上的箭头、向左的箭头、向右的箭头。 额，当然除了箭头还有这样一些东西…<br><img src="/images/IconMoon/QQ20161108-4@2x.png"><br><a id="more"></a></p>
<p>一个页面可能会有很多这种小图标，如果每个图标当用作图片来加载，速度会很慢。像对勾（√）这种简单又有规则的图标，可以用border+rotate画出来，也可以用雪碧图（CSS Sprit），但都没有字体图标扩展性好，而且放大不失真，比较好维护。    </p>
<p>要制作想要的字体图标样式，推荐<a href="http://www.iconfont.cn/plus" target="_blank" rel="external">阿里巴巴字体图标库</a>和<a href="http://iconmoon.io/" target="_blank" rel="external">IcoMoon</a>,下面记录一下我的使用心得。</p>
<h3 id="收集或自己制作SVG格式图标"><a href="#收集或自己制作SVG格式图标" class="headerlink" title="收集或自己制作SVG格式图标"></a>收集或自己制作SVG格式图标</h3><p>在<a href="http://www.iconfont.cn/plus" target="_blank" rel="external">阿里巴巴字体图标库</a>找到需要的图标并下载，比如我需要一个“加”的图标，像这样<br><img src="/images/IconMoon/QQ20161109-0@2x.png" alt=""><br>点开后可以看到下载图标，点击下载图标进入编辑状态，这时可以选择设置图标的颜色和大小</p>
<p>下面两个图标长得一样，但其实不一样    </p>
<ul>
<li>第一个图标只有一个路径，所以整个图标的颜色只能设置成一样的</li>
<li>第二个图标有两个路径，可以对每个路径分别编辑</li>
</ul>
<p><img src="/images/IconMoon/QQ20161109-1@2x.png" alt=""><br><img src="/images/IconMoon/QQ20161108-7@2x.png" alt=""><br>设置完成后，点击【SVG下载】<br>如此，收集到想要的SVG格式图标，如果找不到多路径分别设置的图标，也可以自己用SVG编辑器重新设计成多条路径。</p>
<h3 id="Web-Icon制作"><a href="#Web-Icon制作" class="headerlink" title="Web Icon制作"></a>Web Icon制作</h3><p>这里制作工具用的IcoMoon App,<a href="http://iconmoon.io/" target="_blank" rel="external">IcoMoon官网</a></p>
<p>点击右上角IconMoon App<br><img src="/images/IconMoon/QQ20161108-0@2x.png" alt=""><br>点击左上角图标选择 new empty set,新建一个空集合<br><img src="/images/IconMoon/QQ20161108-1@2x.png" alt=""><br>点击import to set,把刚才下载的svg图标导进来<br><img src="/images/IconMoon/QQ20161108-2@2x.png" alt=""><br>可以看到这些图标有很多都是有颜色的，这些颜色都是在下载的时候设置的<br><img src="/images/IconMoon/QQ20161108-3@2x.png" alt=""><br>全部选中，点击右下角的 generate font,生成字体，又会出来一个编辑页面<br><img src="/images/IconMoon/QQ20161108-5@2x.png" alt=""><br>在这个页面会发现，除了有多条路径的图标颜色还在，其他的图标都是灰色的，只有一条路径的图标其实不用设定颜色，因为设了也没用，这个我们可以在css文件里设置color属性添加颜色。<br>这里可以编辑图标的位置（居中 居右  向左 向下 翻转 镜像等），然后点击Duplicate保存下来<br><img src="/images/IconMoon/QQ20161108-6@2x.png" alt=""></p>
<p>最后一步就是点击右下角的Download,下载一个包，里面有字体文件fonts，和css文件，在项目里引入就好了。</p>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 字体图标 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用Linux命令]]></title>
      <url>/Linux%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><p>查询端口占用情况<br><code>lsof -i:端口号</code><br>或<br><code>netstat -apn|grep &lt;端口号&gt;</code></p>
<p>结束占用端口的进程<br><code>kill pid</code></p>
<p>查看进程详细信息<br><code>ps -aux | grep pid</code></p>
<p>查看文件最后修改时间<br><code>ls -al --full-time</code><br>BSD版本(MAC OSX)不支持–full-time选项，GNU版本的ls支持–full-time<br>若想在MAC OSX查看文件最后修改时间，可用<br><code>ls -lT</code><br><a id="more"></a></p>
<h2 id="DNS相关"><a href="#DNS相关" class="headerlink" title="DNS相关"></a>DNS相关</h2><p>查询 www.dpfile.com 的A记录，并返回简短的结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">changdeMacBook-Pro:sharing chang$ dig www.dpfile.com -t A +short</div><div class="line">www.dpfile.com.fast.cdntip.com.</div><div class="line">dpfile.fast.cdntip.com.</div><div class="line">180.153.100.168</div><div class="line">122.246.3.192</div><div class="line">122.246.3.105</div><div class="line">122.228.251.28</div><div class="line">180.153.100.167</div><div class="line">122.228.251.11</div><div class="line">180.153.100.141</div></pre></td></tr></table></figure></p>
<p>用 dig 命令查看从根域名到指定域名中间可能经过的所有域名服务器，使用 +trace<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">changdeMacBook-Pro:sharing chang$ dig www.dpfile.com +trace @8.8.8.8</div><div class="line"></div><div class="line">; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; www.dpfile.com +trace @8.8.8.8</div><div class="line">;; global options: +cmd</div><div class="line">.           155761  IN  NS  a.root-servers.net.</div><div class="line">.           155761  IN  NS  b.root-servers.net.</div><div class="line">.           155761  IN  NS  c.root-servers.net.</div><div class="line">.           155761  IN  NS  d.root-servers.net.</div><div class="line">.           155761  IN  NS  e.root-servers.net.</div><div class="line">.           155761  IN  NS  f.root-servers.net.</div><div class="line">.           155761  IN  NS  g.root-servers.net.</div><div class="line">.           155761  IN  NS  h.root-servers.net.</div><div class="line">.           155761  IN  NS  i.root-servers.net.</div><div class="line">.           155761  IN  NS  j.root-servers.net.</div><div class="line">.           155761  IN  NS  k.root-servers.net.</div><div class="line">.           155761  IN  NS  l.root-servers.net.</div><div class="line">.           155761  IN  NS  m.root-servers.net.</div><div class="line">;; Received 228 bytes from 8.8.8.8#53(8.8.8.8) in 70 ms</div><div class="line"></div><div class="line">com.            172800  IN  NS  l.gtld-servers.net.</div><div class="line">com.            172800  IN  NS  k.gtld-servers.net.</div><div class="line">com.            172800  IN  NS  e.gtld-servers.net.</div><div class="line">com.            172800  IN  NS  g.gtld-servers.net.</div><div class="line">com.            172800  IN  NS  m.gtld-servers.net.</div><div class="line">com.            172800  IN  NS  j.gtld-servers.net.</div><div class="line">com.            172800  IN  NS  a.gtld-servers.net.</div><div class="line">com.            172800  IN  NS  c.gtld-servers.net.</div><div class="line">com.            172800  IN  NS  b.gtld-servers.net.</div><div class="line">com.            172800  IN  NS  h.gtld-servers.net.</div><div class="line">com.            172800  IN  NS  d.gtld-servers.net.</div><div class="line">com.            172800  IN  NS  f.gtld-servers.net.</div><div class="line">com.            172800  IN  NS  i.gtld-servers.net.</div><div class="line">;; Received 492 bytes from 202.12.27.33#53(202.12.27.33) in 162 ms</div><div class="line"></div><div class="line">dpfile.com.     172800  IN  NS  ns3.dnsv4.com.</div><div class="line">dpfile.com.     172800  IN  NS  ns4.dnsv4.com.</div><div class="line">;; Received 362 bytes from 192.43.172.30#53(192.43.172.30) in 378 ms</div><div class="line"></div><div class="line">www.dpfile.com.     600 IN  CNAME   www.dpfile.com.fast.cdntip.com.</div><div class="line">dpfile.com.     86400   IN  NS  ns4.dnsv4.com.</div><div class="line">dpfile.com.     86400   IN  NS  ns3.dnsv4.com.</div><div class="line">;; Received 130 bytes from 125.39.213.169#53(125.39.213.169) in 45 ms</div></pre></td></tr></table></figure></p>
<p>nslookup查看dns信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">changdeMacBook-Pro:sharing chang$ nslookup www.dpfile.com</div><div class="line">Server:     10.128.16.28</div><div class="line">Address:    10.128.16.28#53</div><div class="line"></div><div class="line">Non-authoritative answer:</div><div class="line">www.dpfile.com  canonical name = www.dpfile.com.fast.cdntip.com.</div><div class="line">www.dpfile.com.fast.cdntip.com  canonical name = dpfile.fast.cdntip.com.</div><div class="line">Name:   dpfile.fast.cdntip.com</div><div class="line">Address: 180.153.100.141</div><div class="line">Name:   dpfile.fast.cdntip.com</div><div class="line">Address: 122.228.251.11</div><div class="line">Name:   dpfile.fast.cdntip.com</div><div class="line">Address: 122.228.251.28</div><div class="line">Name:   dpfile.fast.cdntip.com</div><div class="line">Address: 180.153.100.168</div><div class="line">Name:   dpfile.fast.cdntip.com</div><div class="line">Address: 122.246.3.192</div><div class="line">Name:   dpfile.fast.cdntip.com</div><div class="line">Address: 180.153.100.167</div><div class="line">Name:   dpfile.fast.cdntip.com</div><div class="line">Address: 122.246.3.105</div></pre></td></tr></table></figure></p>
<h2 id="文件和目录管理"><a href="#文件和目录管理" class="headerlink" title="文件和目录管理"></a>文件和目录管理</h2><ul>
<li>find</li>
<li>rmdir</li>
<li>which</li>
<li>whereis</li>
<li>tail</li>
<li>mkdir</li>
<li>chown</li>
<li>chmod</li>
<li>chgrp</li>
<li>less</li>
<li>head</li>
<li>more</li>
<li>touch</li>
<li>stat</li>
<li>rm</li>
<li>colrm</li>
<li>rename</li>
<li>pwd</li>
<li>ls</li>
<li>mv</li>
<li>cd</li>
<li>cp</li>
<li>cat</li>
<li>ln</li>
<li>dirname</li>
<li>dd</li>
<li>gzip</li>
<li>zip</li>
<li>unzip</li>
<li>tar</li>
<li>zcat</li>
<li>diff</li>
<li>tree</li>
<li>grep</li>
<li>dump</li>
</ul>
<h2 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h2><ul>
<li>curl</li>
<li>host</li>
<li>instat</li>
<li>ip</li>
<li>wget</li>
<li>ssh</li>
<li>ping</li>
<li>netstat</li>
<li>ifconfig</li>
<li>hostname</li>
</ul>
<h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><h3 id="系统安全"><a href="#系统安全" class="headerlink" title="系统安全"></a>系统安全</h3><ul>
<li>syslog</li>
<li>openssl</li>
<li>last</li>
<li><p>sudo</p>
</li>
<li><p>killall</p>
</li>
<li>ps</li>
<li>pkill</li>
<li>passwd</li>
<li>finger</li>
<li>logname</li>
<li>su</li>
<li>usermod</li>
<li>shutdown</li>
</ul>
<h2 id="软件·打印·开发·工具"><a href="#软件·打印·开发·工具" class="headerlink" title="软件·打印·开发·工具"></a>软件·打印·开发·工具</h2><ul>
<li>date</li>
<li>whoami</li>
<li>users</li>
<li>clear</li>
<li>sleep</li>
<li>man</li>
<li>whatis</li>
<li>cal</li>
<li>bc</li>
<li>who</li>
</ul>
<h2 id="硬件·内核·Shell·监测"><a href="#硬件·内核·Shell·监测" class="headerlink" title="硬件·内核·Shell·监测"></a>硬件·内核·Shell·监测</h2><ul>
<li>sh</li>
<li>du</li>
<li>dstat</li>
<li>top</li>
<li>free</li>
<li>uptime</li>
<li>vmstat</li>
<li>tload</li>
<li>env</li>
<li>export</li>
<li>uname</li>
<li>kill</li>
<li>type</li>
<li>help</li>
<li>history</li>
<li>wait</li>
<li>exit</li>
<li>alias</li>
<li>unalias</li>
<li>echo</li>
<li>df</li>
<li>arch</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6语法简要笔记]]></title>
      <url>/ES6%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="let和const"><a href="#let和const" class="headerlink" title="let和const"></a>let和const</h2><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>let和const具有块级作用域，只在所在的代码块内有效。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//块级作用域</span></div><div class="line"><span class="keyword">var</span> a = [];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">    a[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(i);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line">a[<span class="number">6</span>]();  <span class="comment">//10</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> b = [];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)&#123;</div><div class="line">    b[j] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        println(j)</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line">b[<span class="number">6</span>](); <span class="comment">//6</span></div></pre></td></tr></table></figure>
<h3 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h3><p>let/const不像var那样会发生“变量提升”现象。所以，变量一定要在声明后使用，否则报错。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 变量提升</span></div><div class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 输出undefined</span></div><div class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 报错ReferenceError</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</div><div class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</div></pre></td></tr></table></figure></p>
<h3 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h3><p>只要块级作用域内存在let/const命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部声明的影响。<br>所以在此区域内的，在声明之前不能使用该变量。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//暂时性死区</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">20159</span>;</div><div class="line"></div><div class="line">&#123;</div><div class="line">    a = <span class="string">"chang"</span>;</div><div class="line">    <span class="keyword">let</span> a ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h3><p>let/const不允许在相同作用域内，重复声明同一个变量。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//不允许重复声明</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> name;</div><div class="line">    <span class="keyword">var</span> name;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h2><h3 id="字符串中嵌入变量"><a href="#字符串中嵌入变量" class="headerlink" title="字符串中嵌入变量"></a>字符串中嵌入变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//字符串模板</span></div><div class="line"><span class="keyword">let</span> number = <span class="number">20159</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`chang <span class="subst">$&#123;number&#125;</span>`</span>);</div></pre></td></tr></table></figure>
<h3 id="支持多行字符串反斜杠"><a href="#支持多行字符串反斜杠" class="headerlink" title="支持多行字符串反斜杠"></a>支持多行字符串反斜杠</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> idea = <span class="string">`I like to do the front end.</span></div><div class="line">How can I do ?`;</div><div class="line"><span class="built_in">console</span>.log(idea);</div></pre></td></tr></table></figure>
<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值,称为解构赋值。<br>解构赋值的规则是，只要等号右边的值不是对象，就先将其转为对象。按照此规则可以分为两类：数组的解构和对象的解构。</p>
<h3 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h3><p>等号左侧是{}，则按右侧数据进行对象解构，此时等号右侧必须是对象或可转为对象的值(undefined和null无法转为对象)。<br><strong>对象的结构根据属性名来匹配。</strong><br>如下，是先找到左侧的同名属性name，再赋给该属性对应的变量name1。最终将profile.name的值付给了name1。如果左侧的属性在对象中没有，对应的变量值将会是undefined,比如sex<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> profile = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">"chang"</span>,</div><div class="line">    <span class="attr">number</span>:<span class="number">20159</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">let</span> &#123; <span class="attr">name</span>:name1,<span class="attr">number</span>:number1,<span class="attr">age</span>:age1 = <span class="number">24</span>,<span class="attr">sex</span>:sex1 &#125; = profile;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"name1:%s,number1:%d,age1:%d,sex1:%s"</span>, name1,number1,age1,sex1);</div><div class="line">alert(<span class="string">`name1:<span class="subst">$&#123;name1&#125;</span>,number1:<span class="subst">$&#123;number1&#125;</span>,age1:<span class="subst">$&#123;age1&#125;</span>,sex1:<span class="subst">$&#123;sex1&#125;</span>`</span>);</div></pre></td></tr></table></figure></p>
<p>如果新的变量名与对象的属性名相同，可以简写成下面这样，等同于 let name = profile.name;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123; name,number,age,sex &#125; = profile;</div></pre></td></tr></table></figure></p>
<h3 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h3><p>等号的右边的数据结构必须具Iterator接口，等号左边用[]表示<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> array = [<span class="string">"ch"</span>]</div></pre></td></tr></table></figure></p>
<h3 id="指定变量的默认值"><a href="#指定变量的默认值" class="headerlink" title="指定变量的默认值"></a>指定变量的默认值</h3><p>等号左侧是[],则对右侧数据进行数组解构，此时等号右侧必须是具有Iterator结构的值。<br><strong>数组解构根据元素的顺序进行模式匹配。</strong></p>
<h3 id="解构赋值的应用"><a href="#解构赋值的应用" class="headerlink" title="解构赋值的应用"></a>解构赋值的应用</h3><p>1.交换变量值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[x,y] = [y,x];</div></pre></td></tr></table></figure></p>
<p>2.提取对象属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;userInfo,shopInfo&#125; = <span class="keyword">this</span>.props;</div></pre></td></tr></table></figure></p>
<p>3.解构赋值也可用于函数调用时传参，形参相当于解构等式左侧值，实际传入的参数相当于等式右侧的值。</p>
<h2 id="…-运算符"><a href="#…-运算符" class="headerlink" title="… 运算符"></a>… 运算符</h2><p>..运算符有两种，spread运算符和rest运算符,作用相反</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="spread运算符"><a href="#spread运算符" class="headerlink" title="spread运算符"></a>spread运算符</h4><p>spread运算符是将数组或类数组对象展开成一系列用逗号隔开的值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">let</span> new_array = [...array,<span class="number">4</span>,<span class="number">5</span>];    <span class="comment">//数组合并</span></div><div class="line"><span class="built_in">console</span>.log(new_array);</div><div class="line"><span class="keyword">let</span> copy_array = [...array];   <span class="comment">//数组深拷贝</span></div><div class="line"><span class="built_in">console</span>.log(copy_array);</div></pre></td></tr></table></figure></p>
<h4 id="rest运算符"><a href="#rest运算符" class="headerlink" title="rest运算符"></a>rest运算符</h4><p>将逗号隔开的值序列组合成一个数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//结合数组的解构赋值</span></div><div class="line"><span class="keyword">let</span> [ value,...array ] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`value:<span class="subst">$&#123;value&#125;</span>, array:<span class="subst">$&#123;array&#125;</span>`</span>); <span class="comment">//value:1, array:2,3,4</span></div><div class="line"></div><div class="line"><span class="comment">//用于函数不定长的参数,可避免使用arguments对象</span></div><div class="line"><span class="keyword">var</span> rest = <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>)</span>&#123;</div><div class="line">-    <span class="built_in">console</span>.log(<span class="string">`rest.args:<span class="subst">$&#123;args[<span class="number">1</span>]&#125;</span>`</span>); <span class="comment">//rest.args:es5</span></div><div class="line">&#125;;</div><div class="line">rest(<span class="string">"es6"</span>,<span class="string">"es5"</span>,<span class="string">"es3"</span>);</div></pre></td></tr></table></figure></p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="spread运算符-1"><a href="#spread运算符-1" class="headerlink" title="spread运算符"></a>spread运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> object = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;;</div><div class="line"><span class="keyword">let</span> object1 = &#123;...object&#125;;</div><div class="line">object1.a = <span class="number">2</span>;</div><div class="line"><span class="comment">//object1 : &#123;a:2,b:2&#125;</span></div><div class="line"><span class="comment">//object : &#123;a:1,b:2&#125;</span></div></pre></td></tr></table></figure>
<h4 id="rest运算符-1"><a href="#rest运算符-1" class="headerlink" title="rest运算符"></a>rest运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> object = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;;</div><div class="line"><span class="keyword">let</span> &#123;...object2&#125; = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.dir(object2);</div><div class="line"><span class="comment">//&#123;a:1,b:2&#125;</span></div></pre></td></tr></table></figure>
<h2 id="for…of循环"><a href="#for…of循环" class="headerlink" title="for…of循环"></a>for…of循环</h2><p>for…of可遍历数组的键值，for…in循环只能获得键名<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> array = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>];</div><div class="line">array.name = <span class="string">'es6'</span>;</div><div class="line"><span class="comment">//只返回可数字索引的键值 of: 10   of: 20  of: 30</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> array)&#123;  <span class="built_in">console</span>.log(<span class="string">`of: <span class="subst">$&#123;value&#125;</span>`</span>); &#125; </div><div class="line"></div><div class="line"><span class="comment">//in: 0  in: 1  in: 2  in: name</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">in</span> array)&#123;  <span class="built_in">console</span>.log(<span class="string">`in: <span class="subst">$&#123;value&#125;</span>`</span>); &#125; </div><div class="line"></div><div class="line"><span class="comment">//forEach: 0:10  forEach: 1:20  forEach: 2:30</span></div><div class="line">array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`forEach: <span class="subst">$&#123;index&#125;</span>:<span class="subst">$&#123;item&#125;</span>`</span>);  </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="Promise对象"><a href="#Promise对象" class="headerlink" title="Promise对象"></a>Promise对象</h2><p>Promise是一个构造函数，函数的参数是一个未来才会结束的事件，而函数的实例是这个事件执行的状态。简洁的说，Promise对象代表一个异步操作，可以获取异步操作的状态。<br>有三种状态：</p>
<ul>
<li>pending 进行中</li>
<li>resolved 已完成</li>
<li>rejected 已失败</li>
</ul>
<p>而且状态的改变只会从pending到resolved，或则从pending到rejected<br>注意：Promise一旦new了就会立即执行，无法中断</p>
<p>用法:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    ...</div><div class="line">  if (<span class="comment">/* 异步操作成功 */</span>)&#123;</div><div class="line">    resolve(value);  <span class="comment">//执行resolve函数将状态从Pending变为Resolved</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    reject(error);   <span class="comment">//执行reject函数将状态从Pending变为rejected</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">／/then方法分别指定Resolved状态和Reject状态的回调函数。</div><div class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="comment">// Resolved状态时执行，value是resolve函数的参数</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">  <span class="comment">// rejected状态时执行，value是reject函数的参数</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>实例方法：<br>1、Promise.prototype.then()  为Promise实例添加状态改变时的回调函数<br>2、Promise.prototype.catch() 指定发生错误时的回调函数<br>3、Promise.all()  接收多个Promise实例，返回一个新的Promise实例<br>  <strong>如果希望多个请求并发执行，可以使用Promise.all方法</strong><br>  例如：p = new Promise([p1,p2,p3])</p>
<ul>
<li>只有p1,p2,p3的状态都是已完成时，p的状态才会变成已完成，并将p1,p2,p3的返回值组成一个数组，传递给p的回调函数；</li>
<li>只要p1,p2,p3有一个失败，p的状态就会变成失败，第一个被reject的实例的返回值，会传递给p的回调函数</li>
<li>注意：p1、p2、p3都是Promise对象的实例，如果不是，就会先调用Promise.resolve方法，将参数转为Promise实例<br>4、Promise.race()  只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。率先改变状态的Promise 实例的返回值，传递给p的回调函数。<br>5、Promise.resolve()  返回一个新的 Promise 实例,实例的状态为resolved<br>6、Promise.reject()  返回一个新的 Promise 实例，实例的状态为rejected<br>7、Promise内部的错误不会冒泡到全局，可以通过在回调链尾端添加done方法抛出可能出现的错误<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.prototype.done = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.then(onFulfilled, onRejected)</div><div class="line">    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</div><div class="line">      <span class="comment">// 抛出一个全局错误</span></div><div class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;, <span class="number">0</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>8、finally(callback) 用于指定不管Promise对象最后状态如何，都会执行的操作.<br>接受一个普通的回调函数作为参数，该函数不管怎样都必须执行</p>
<h2 id="Generator函数"><a href="#Generator函数" class="headerlink" title="Generator函数"></a>Generator函数</h2><p>Generator函数与yield关键字配合可以让代码分布执行，异步操作也是将一个任务分段执行，因此 可以使用Generator函数实现异步编程，拿到第一步的执行结果后再执行第二步，但是程序的写法却跟同步写法一样。看个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> x = <span class="number">1</span>;</div><div class="line">  <span class="keyword">let</span> y = <span class="keyword">yield</span> x+<span class="number">1</span>;</div><div class="line">  <span class="keyword">let</span> z =  <span class="keyword">yield</span> x + <span class="number">2</span>;</div><div class="line">  <span class="built_in">console</span>.log(z);</div><div class="line">&#125;</div><div class="line"></div><div class="line">g = generator();</div><div class="line"><span class="keyword">let</span> step1 = g.next()</div><div class="line"><span class="built_in">console</span>.dir(step1)</div><div class="line"><span class="keyword">let</span> step2 = g.next(step1.value)</div><div class="line"><span class="built_in">console</span>.dir(step2)</div><div class="line"><span class="keyword">let</span> step3 = g.next(step2.value)</div><div class="line"><span class="built_in">console</span>.dir(step3)</div></pre></td></tr></table></figure></p>
<p>结果如下，执行Generator函数返回一个指针对象，调用指针对象的next方法移动指针到yield语句，每次执行都从上一次结束的位置开始。next方法可以传入参数，这个参数是上一个阶段的执行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt;Object</div><div class="line">  &gt;done: false</div><div class="line">  &gt;value: 2_</div><div class="line">  &gt;_proto__: Object</div><div class="line">&gt;Object</div><div class="line">  &gt;done: false</div><div class="line">  &gt;value: 3_</div><div class="line">  &gt;_proto__: Object</div><div class="line">3</div><div class="line">&gt;Object</div><div class="line">  &gt;done: true</div><div class="line">  &gt;value: undefined</div><div class="line">  &gt;__proto__: Object</div><div class="line">undefined</div></pre></td></tr></table></figure></p>
<p>Generator函数能够让异步编程可以像写同步执行的代码一样，但是阶段执行的管理却很麻烦，我得知道什么时候执行那一步。有些方法可以让Generator函数自动执行，这里还没研究。</p>
<h2 id="Set和Map"><a href="#Set和Map" class="headerlink" title="Set和Map"></a>Set和Map</h2><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set实例是不重复值的集合</p>
<p><strong>Set实例的属性和方法</strong><br>let list = new Set([1,2,2,4])</p>
<p><strong>属性</strong></p>
<ul>
<li>size  返回成员数量</li>
</ul>
<p><strong>操作方法</strong></p>
<ul>
<li>add(value)：添加某个值，返回的是当前的Set对象，可以采用链式写法</li>
<li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。</li>
<li>has(value)：返回一个布尔值，表示该值是否为Set的成员。</li>
<li>clear()：清除所有成员，没有返回值。</li>
</ul>
<p><strong>遍历方法</strong></p>
<ul>
<li>keys()：返回键名的遍历器</li>
<li>values()：返回键值的遍历器</li>
<li>entries()：返回键值对的遍历器</li>
<li>forEach()：使用回调函数遍历每个成员</li>
</ul>
<p>注意：WeakSet 结构与 Set 类似，也是不重复的值的集合，但WeakSet的成员只能是对象。并且WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用</p>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Map是键值对的集合，“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键<br>注意，只有对同一个对象的引用，Map 结构才将其视为同一个键。</p>
<p><strong>Map实例的属性和方法</strong><br>let map = new Map([[‘name1’,’chang’],[‘name2’,’chen’]])</p>
<p><strong>属性</strong></p>
<ul>
<li>size  返回成员数量</li>
</ul>
<p><strong>操作方法</strong></p>
<ul>
<li>set(value)：添加键值对，返回的是当前的Map对象，可以采用链式写法</li>
<li>delete(value)：删除某个键，返回一个布尔值，表示删除是否成功。</li>
<li>has(value)：返回一个布尔值，表示某个键是否在当前 Map 对象</li>
<li>clear()：清除所有成员，没有返回值。</li>
</ul>
<p><strong>遍历方法</strong></p>
<ul>
<li>keys()：返回键名的遍历器</li>
<li>values()：返回键值的遍历器</li>
<li>entries()：返回键值对的遍历器</li>
<li>forEach()：使用回调函数遍历每个成员</li>
</ul>
<p>注意：WeakMap结构与Map结构类似，也是用于生成键值对的集合，但WeakMap只接受对象作为键名（null除外），并且WeakMap的键名所指向的对象，不计入垃圾回收机制。</p>
<p><strong>提示：垃圾回收机制依赖引用计数，如果一个值的引用次数不为0，垃圾回收机制就不会释放这块内存</strong></p>
<h2 id="类修饰器"><a href="#类修饰器" class="headerlink" title="类修饰器"></a>类修饰器</h2><h2 id="import和export"><a href="#import和export" class="headerlink" title="import和export"></a>import和export</h2><p>ES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。<br>模块功能由export和import两个命令完成。export对外输出模块，import用于引入模块。</p>
<h3 id="export-写法"><a href="#export-写法" class="headerlink" title="export 写法"></a>export 写法</h3><p>import接受一对大括号，指定从其他模块导入的变量名。大括号中的变量名，必须与被导入模块对外接口的名称相同。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// 写法一</div><div class="line">export var value = 1;</div><div class="line">export function func()&#123;...&#125;;</div><div class="line"></div><div class="line">// 写法二</div><div class="line">var value = 1;</div><div class="line">function func()&#123;...&#125;;</div><div class="line">export &#123;value,func&#125;;</div><div class="line"></div><div class="line">// 写法三</div><div class="line">var value = 1;</div><div class="line">function func()&#123;...&#125;;</div><div class="line">export &#123;</div><div class="line">  value as value1,</div><div class="line">  func as func1,</div><div class="line">  func as func2</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="import写法"><a href="#import写法" class="headerlink" title="import写法"></a>import写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 写法一</div><div class="line">import &#123; value, func&#125; from &apos;module&apos;</div><div class="line"></div><div class="line">// 写法二</div><div class="line">import * as Module from &apos;module&apos;</div></pre></td></tr></table></figure>
<h3 id="export-default写法"><a href="#export-default写法" class="headerlink" title="export default写法"></a>export default写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">export var value = 1;</div><div class="line">export default function func()&#123;...&#125;;</div><div class="line"></div><div class="line">import func, &#123;value&#125; from &apos;module&apos;</div></pre></td></tr></table></figure>
<h2 id="async-函数"><a href="#async-函数" class="headerlink" title="async 函数"></a>async 函数</h2><p>其实是Generator函数的语法糖，将<strong>Generator函数</strong>和<strong>自动执行器</strong>，包装在一个函数里<br>Generator 函数需要调用next方法，每调一次执行一段。</p>
<ul>
<li>async函数返回一个Promise 对象，一旦遇到await就会先返回，等到异步操作完成再接着执行函数体内后面的语句。</li>
<li>async函数的返回值，会作为then方法回调函数的参数。</li>
<li>await命令后面是一个Promise 对象。如果不是，会被转成一个立即resolve的Promise 对象。<br>下面代码的执行结果是： 哈哈   嘿嘿    4<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">async function cal(x)&#123;</div><div class="line">    let result = await x + 1;</div><div class="line">    console.log(&apos;嘿嘿&apos;)</div><div class="line">    return result;</div><div class="line">&#125;</div><div class="line">cal(3).then(function(data)&#123;</div><div class="line">  console.log(data)</div><div class="line">&#125;)</div><div class="line">console.log(&apos;哈哈&apos;)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>与Generator 函数相比</p>
<ul>
<li>async函数内置了执行器，像普通函数一样执行</li>
<li>async和await，比星号和yield语义更清楚。async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。</li>
<li>async函数的返回值是 Promise 对象</li>
</ul>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">x,y</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(x+y &gt; <span class="number">5</span>)&#123;</div><div class="line">       <span class="keyword">return</span> x * y</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有了箭头函数，上面的方法可以写成：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(x,y) =&gt; &#123;</div><div class="line">  <span class="keyword">if</span>(x+y &gt; <span class="number">5</span>)&#123;</div><div class="line">      <span class="keyword">return</span> x * y</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果函数体只有一个return语句，可以将大括号和return省略<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(x,y) =&gt;  x * y</div></pre></td></tr></table></figure></p>
<p>如果返回的是个对象,得加上（），参数如果只有一个，可以不要()<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(name) =&gt;  (&#123;<span class="attr">name</span>:name&#125;)</div></pre></td></tr></table></figure></p>
<p>箭头函数其实就是一个用箭头简化了的匿名函数，不过与匿名函数有点区别。<br><strong>箭头函数内部的this是词法作用域，由上下文确定，指向函数定义时的上下文。</strong><br>下面的代码，obj.sayHello()得到的结果是undefined,因为this.name指向window或undefined<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">    name: &apos;chang&apos;,</div><div class="line">    sayHello: function () &#123;</div><div class="line">        var fn = function () &#123;</div><div class="line">            return this.name; // this指向window或undefined</div><div class="line">        &#125;;</div><div class="line">        return fn();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>为了正常执行我们会这样做<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">    name: &apos;chang&apos;,</div><div class="line">    sayHello: function () &#123;</div><div class="line">        let _this = this</div><div class="line">        var fn = function () &#123;</div><div class="line">            return _this.name; // this指向window或undefined</div><div class="line">        &#125;;</div><div class="line">        return fn();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>但是有了箭头函数就不需要了,可以写成这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">    name: &apos;chang&apos;,</div><div class="line">    sayHello: function () &#123;</div><div class="line">        var fn = () =&gt; this.name;</div><div class="line">        return fn();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6 入门</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise#参见" target="_blank" rel="external">MDN Promise</a></li>
<li><a href="http://www.infoq.com/cn/es6-in-depth/" target="_blank" rel="external">深入浅出ES6 </a></li>
<li><a href="https://promisesaplus.com/" target="_blank" rel="external">Promises/A+</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[跨域问题解决方案]]></title>
      <url>/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<p>在客户端会使用XMLHttpRequest 对象向后端应用发起请求，出于安全考虑，浏览器会限制脚本中发起的跨站请求。<br>前端项目域名： h5.51ping.com   后端项目域名： e.51ping.com<br>目前线上的解决方案是  通过跨域资源共享 CORS在请求头中自定义一个Header字段userInfo,后端应用从Header中获取userInfo.<br>但是放在cookie中，后端始终不能获取到。这里主要是解决后端应用不能从cookie中获取userInfo的问题.<br><a id="more"></a></p>
<h2 id="方案－跨域资源共享-CORS"><a href="#方案－跨域资源共享-CORS" class="headerlink" title="方案－跨域资源共享 CORS"></a>方案－跨域资源共享 CORS</h2><h3 id="第一步：预检请求时，服务端在请求头中添加字段"><a href="#第一步：预检请求时，服务端在请求头中添加字段" class="headerlink" title="第一步：预检请求时，服务端在请求头中添加字段"></a>第一步：预检请求时，服务端在请求头中添加字段</h3><p>（1）Access-Control-Allow-Origin</p>
<p>该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。</p>
<p>（2）Access-Control-Allow-Credentials<br>该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。</p>
<pre><code>@Override
public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
    HttpServletResponse resp = (HttpServletResponse)response;
    resp.setHeader(&quot;Access-Control-Allow-Origin&quot;, LionConfigUtils.getProperty(&quot;http://h5.51ping.com&quot;));
    resp.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);
//  resp.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;userInfo&quot;);   //在实际的请求中,可以使用的自定义HTTP请求头

    HttpServletRequest req = (HttpServletRequest) request;
    if (req.getMethod().equals(&quot;OPTIONS&quot;)) {
        resp.setStatus(200);
        resp.flushBuffer();
    } else {
        chain.doFilter(request,response);
    }
}
</code></pre><h3 id="第二步：客户端需要在XMLHttpRequest-请求中设置withCredentials属性为true"><a href="#第二步：客户端需要在XMLHttpRequest-请求中设置withCredentials属性为true" class="headerlink" title="第二步：客户端需要在XMLHttpRequest 请求中设置withCredentials属性为true"></a>第二步：客户端需要在XMLHttpRequest 请求中设置withCredentials属性为true</h3><pre><code>var xhr = new XMLHttpRequest();
xhr.withCredentials = true;
</code></pre><h3 id="第三步：设置document-cookie"><a href="#第三步：设置document-cookie" class="headerlink" title="第三步：设置document.cookie"></a>第三步：设置document.cookie</h3><p>在XMLHttpRequest 请求发出之前设置<br>document.cookie=”userInfo=xxx;path=’/‘; domain=’51ping.com’”</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><p> 服务端拿不到cookie,  客户端没有发送cookie</p>
<p> <strong>解决方法</strong></p>
<p> 依赖的模块设置了这个条件 credentials: “include” ＝&gt; xhr.withCredentials = true  客户端发送cookie</p>
<h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><p>客户端发送了cookie，但服务端只能拿到两个字段，userInfo和catBrowserName拿不到<br><img src="/images/CORS/QQ20161017-0@2x.png" alt=""><br><img src="/images/CORS/QQ20161017-1@2x.png" alt=""></p>
<p>如果第三步不做 userInfo和catBrowserName都没有<br><img src="/images/CORS/QQ20161017-2@2x.png" alt=""></p>
<p>说明这是cookie可访问域有限制。</p>
<p><strong><em>解决方法</em></strong></p>
<p>跨域请求时，如果要发送cookie,有两点需要注意：</p>
<ul>
<li>Access-Control-Allow-Origin不能设为星号，必须指定明确的、与请求网页一致的域名。</li>
<li>Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，并且网页代码中的document.cookie也无法读取服务器域名下的Cookie。</li>
</ul>
<p>在客户端设置cookie时，需要指定服务器端可访问cookie的路径,  设置cookie.domain 与服务器域名一致（.51ping.com）和 cookie.path 为根路径</p>
<p><img src="/images/CORS/QQ20161017-3@2x.png" alt=""><br><img src="/images/CORS/QQ20161017-4@2x.png" alt=""></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS#Access-Control-Allow-Headers" target="_blank" rel="external">HTTP访问控制(CORS)</a> </li>
<li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">跨域资源共享 CORS 详解</a> </li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie" target="_blank" rel="external">Document.cookie</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 工作 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CORS </tag>
            
            <tag> Cookie </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 与 Javascript]]></title>
      <url>/java%E4%B8%8Ejavascript/</url>
      <content type="html"><![CDATA[<p>作为一个写过java后台的妹子，我怕写上javascript久了，会忘记java，哈哈，总结一下java和javascript语言的区别.<br><a id="more"></a></p>
<h2 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h2><ul>
<li>弱类型语言，JavaScript 是一种基于原型的面向对象语言，而不是基于类的。</li>
<li>对象属性是可以动态添加和删除的。    </li>
<li>有基于原型的对象模型提供的动态继承，即独立对象的继承是可以改变的。    </li>
<li>支持匿名函数    </li>
<li>形式比较自由，不需要显示指定变量、参数、方法返回值的数据类型</li>
<li>变量类型不需要提前声明(动态类型),支持变量提升</li>
<li>不能直接自动写入硬盘。</li>
<li>JavaScript 属性值的继承是在运行时通过检索对象的原型链来实现的。因为对象只有一个原型与之关联，所以JavaScript无法动态地从多个原型链中继承。</li>
<li>在JavaScript中，可以在构造器函数中调用多个其它的构造器函数,类似于多重继承。</li>
<li>JavaScript是区分大小写的语言，变量是无类型的，在缺少了分号就无法正确解析代码时会填补分号。</li>
<li>javascript中的数组不存在越界现象，且可以包容多种类型值</li>
<li>javascript中的函数不能重载，因为javascript中的函数本质是一个对象，函数名是引用类型，多个相同的函数名会被覆盖，可以通过arguments对象模拟函数重载</li>
</ul>
<h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><ul>
<li>java是强类型语言</li>
<li>java中的对象属性一旦定义好就不能在删除或添加；</li>
<li>基于类，通过类层级实现继承</li>
<li>不能动态添加类的属性和方法</li>
<li>变量类型必须提前声明(静态类型)。</li>
<li>可以直接自动写入硬盘。</li>
<li>支持多重继承。也就是说，对象可以从无关的多个父对象中继承属性和属性值</li>
<li>函数可以重载</li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[模块管理与打包实践]]></title>
      <url>/%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86%E4%B8%8E%E6%89%93%E5%8C%85%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<p>关于javascript模块化编程的介绍可以参考<a href="http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html" target="_blank" rel="external">阮一峰的Javascript模块化编程系列</a>和<a href="http://zhaoda.net/webpack-handbook/index.html" target="_blank" rel="external">webpack中文指南</a>，详细讲述了模块系统的演进以及各种方式的使用方法。看完之后特来实践一下。<br><a id="more"></a></p>
<h2 id="原始的JS文件加载"><a href="#原始的JS文件加载" class="headerlink" title="原始的JS文件加载"></a>原始的JS文件加载</h2><p>来看下在html中用script标签引入js文件的情况      </p>
<p>新建一个文件目录   <code>mkdir ScriptTag</code>    </p>
<p>进入此目录   <code>cd ScriptTag</code></p>
<p>在此文件中新建文件    <code>touch index.html</code>       </p>
<p>内容如下：    </p>
<pre><code>&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;webpack&lt;/title&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;script src=&quot;module1.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;module2.js&quot;&gt;&lt;/script&gt;

        &lt;script type=&quot;text/javascript&quot;&gt;
            printModule1FileName();
            printModule2FileName();
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>新建module1.js  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var filename = &quot;module1&quot;;</div><div class="line">function printModule1FileName()&#123;</div><div class="line">	document.write(`This is $&#123;filename&#125;&lt;br/&gt;`);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建module2.js      </p>
<pre><code>var filename = &quot;module2&quot;;
function printModule2FileName(){
    document.write(`This is ${filename}&lt;br/&gt;`);
}
</code></pre><p>打开index.html文件，浏览器中显示:    </p>
<pre><code>This is module2    
This is module2     
</code></pre><p>将index.html中引入的js文件交换顺序    </p>
<pre><code>&lt;script src=&quot;module2.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;module1.js&quot;&gt;&lt;/script&gt;    
</code></pre><p>此时浏览器中显示：  </p>
<pre><code>This is module1    
This is module1     
</code></pre><p>使用这种方式引入js文件，每个js文件中的变量和方法都暴露在全局作用域下，并按照js文件的引入顺序加载，所以当module1和module2中都有filename这个变量且最后引入module2时，加载完成后的filename最终指向的是module2.js中定义的字符串“module2”。当引入的多个js文件中存在多个相同名字的function，在调用此function是也会造成冲突。  </p>
<p>除了<strong>全局作用域下容易造成变量冲突</strong>这种弊端之外，还有：   </p>
<ul>
<li>当js文件之间存在依赖关系时，必须严格保证加载顺序，被依赖的文件要放在前面。   </li>
<li>加载时，浏览器会停止渲染（同步加载），加载文件越多，浏览器响应的时间越长。  </li>
</ul>
<p><strong>注</strong>： 这里用到了ES6模板文本特性，我用的chrome,说明chrome是支持ES6的，但不是全部都支持，比如export和import.</p>
<h2 id="使用RequireJS加载模块"><a href="#使用RequireJS加载模块" class="headerlink" title="使用RequireJS加载模块"></a>使用RequireJS加载模块</h2><p>RequireJS是基于AMD规范实现的，在学习RequireJS之前，先介绍一下CommonJS和AMD这两种模块规范。    </p>
<h3 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h3><p>CommonJS是为了解决javascript的作用域问题而定义的模块形式，使每个模块可以在它自身的作用域中执行。规范的主要内容是：必须通过module.exports暴露对外的变量或接口；通过require()方法导入其他模块的的输出到当前模块，并且require模块是同步加载。    </p>
<p>用于在服务端解析javacript的<a href="https://nodejs.org/en/" target="_blank" rel="external">Nodejs</a>就是参照CommonJS规范实现的，在浏览器端也有对CommonJS模块规范的实现，比如<a href="http://browserify.org/" target="_blank" rel="external">Browserify</a>。但同步加载  模块的方式不适合在浏览器环境中,因为需要等待所有模块都加载完成才开始渲染页面，响应时间很长。</p>
<p>因而，浏览器端的模块只能采用异步加载，这才有了AMD规范的诞生。</p>
<h3 id="AMD规范"><a href="#AMD规范" class="headerlink" title="AMD规范"></a>AMD规范</h3><p>AMD(异步模块定义)规范支持在浏览器环境中异步加载模块。<a href="http://requirejs.org/" target="_blank" rel="external">RequireJS</a>正是AMD规范的一种实现。 </p>
<p><strong>AMD规范的的核心思想</strong>：模块的加载不影响在它之后的程序的执行，所有依赖这个模块的语句都定义在一个回调函数中，模块加载完成后，再运行回调函数。</p>
<h3 id="RequireJS"><a href="#RequireJS" class="headerlink" title="RequireJS"></a>RequireJS</h3><p>RequireJS定义了三个变量：requirejs, require, define.其中requirejs === require</p>
<p><strong>模块的定义</strong>：通过<strong>define函数</strong>定义在闭包中，define函数格式为： </p>
<pre><code>define(String id,String[] dependencies,Function|Object factory)
</code></pre><ul>
<li>id:模块的名字，可选参数</li>
<li>dependencies： 自身依赖的模块列表，这些依赖模块的输出作为factory的参数。可选参数。如果没有指定，则默认的依赖模块为[‘require’,’exports’,’module’]</li>
<li>factory: 一个函数或者对象。若是一个函数，该函数的返回值就是模块的输出。</li>
</ul>
<p><strong>模块的加载</strong>：require方法用来加载依赖模块，并执行加载完之后的逻辑，require定义格式为：    </p>
<pre><code>require(String[] dependencies,Function callback)
</code></pre><p>下面来画个页面，用RequireJS来解决模块的定义、依赖和加载问题。目录结构如下：</p>
<pre><code>.
├── entry.js
├── index.html
├── lib
│   └── require.js
└── module
    ├── module1.js
    └── module2.js
</code></pre><p>要使用define和require函数定义和加载模块需要引入require.js文件。<br>从<a href="http://requirejs.org/docs/download.html" target="_blank" rel="external">RequireJS 官网</a>下载最新版本，放在lib文件下。</p>
<p>其中module1和module2是打印文件名的两个模块，定义如下：<br>module1.js  </p>
<pre><code>define(function(){
    function printModule1FileName(){
        document.write(&apos;This is module1&lt;br/&gt;&apos;);
    }
    return {
        filename:&quot;module1&quot;,
        printModule1FileName:printModule1FileName
    };
});
</code></pre><p>module2.js     </p>
<pre><code>define(function(){
    var printModule2FileName = function(){
        document.write(&apos;This is module2&lt;br/&gt;&apos;);
    }
    return {
        filename:&quot;module2&quot;,
        printModule2FileName:printModule2FileName
    };
});
</code></pre><p>在entry.js中导入模块并调用依赖模块中的方法打印文件名  </p>
<pre><code>require.config({
    path: {
        module: &apos;./module&apos;,
    }
});
require([&apos;module/module1.js&apos;,&apos;module/module2.js&apos;],function(module1,module2){
    document.write(`${module1.filename} and ${module2.filename}&lt;br/&gt;`);
    module1.printModule1FileName();
    module2.printModule2FileName();
});
</code></pre><p>在index.html中引入require.js和entry.js    </p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;RequireJS&lt;/title&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;script src=&quot;lib/require.js&quot;&gt;&lt;/script&gt;   
        &lt;script src=&quot;entry.js&quot;&gt;&lt;/script&gt;
        &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>chrome浏览器打开index.html,显示   </p>
<pre><code>module1 and module2
This is module1
This is module2
</code></pre><p>RequireJS解决了并行加载模块的问题，但因为还有以下弊端    </p>
<ul>
<li>代码书写不太符合常规习惯，模块的引入与代码逻辑掺杂在一起。    </li>
<li>只能将js文件作为模块加载。    </li>
<li>一个加载依赖多个模块就要并行发出多次HTTP请求，影响网页加载速度。虽然require.js提供了一个优化工具可以将多个模块合并在一个文件中只发出一次请求，但一次加载所有模块也很浪费流量，初始化过程慢。</li>
</ul>
<p>关于RequireJS可参考：   </p>
<ul>
<li><a href="http://requirejs.org/" target="_blank" rel="external">RequireJS 官网</a>   </li>
<li><a href="http://www.requirejs.cn/" target="_blank" rel="external">RequireJS 中文网</a>   </li>
<li><a href="https://github.com/requirejs" target="_blank" rel="external">RequireJS GitHub</a> 这里有很多RequireJS使用demo</li>
</ul>
<h2 id="webpack模块管理"><a href="#webpack模块管理" class="headerlink" title="webpack模块管理"></a>webpack模块管理</h2><p>webpack可以做到按需异步加载所有资源，除了js文件，图片、样式文件、html、模板库等都可以视作模块加载。当然，webpack本身只能加载js文件，需要借助Loader转换器来完成。</p>
<p>在用RequireJS加载非AMD规范模块前，需要先用require.config()方法定义shim属性，标注依赖模块的输出值和依赖性。webpack则只需要直接require,不管模块形式是CommonJS、AM还是普通的JS文件。</p>
<p>在webpack-demo文件目录下新建文件目录如下：   </p>
<pre><code>.
├── entry.js
├── index.html
└── module
    ├── module1.js
    └── module2.js
</code></pre><p>index.html    </p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;webpack&lt;/title&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;script src=&quot;./dist/bundle.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>entry.js    </p>
<pre><code>var printModule1 = require(&apos;./module/module1.js&apos;)
var printModule2 = require(&apos;./module/module2.js&apos;)

function printEntryFileName(){    
    printModule1();
    printModule2();
}

printEntryFileName();
</code></pre><p>module1.js    </p>
<pre><code>var filename = &quot;module1&quot;;
function printModule1FileName(){
    document.write(`This is ${filename}&lt;br/&gt;`);
}

module.exports = printModule1FileName;
</code></pre><p>html中引入的是bundle.js文件，这个文件是从哪里来的呢？<br>在得到这个文件之前需要先一次安装nodejs和webpack,node安装和升级参见：xxx<br>全局安装webpack    <code>npm install webpack -g</code><br>在webpack目录下执行  <code>webpack entry.js ./dist.bundle.js</code>,命令行会输出如下信息： </p>
<pre><code>Hash: 71d45b6722deab7e60ec
Version: webpack 1.13.2
Time: 75ms
        Asset              Size     Chunks  Chunk      Names
        bundle.js          2 kB       0     [emitted]  main
   [0] ./entry.js          192 bytes {0}    [built]
   [1] ./module/module1.js 147 bytes {0}    [built]
   [2] ./module/module2.js 145 bytes {0}    [built]
</code></pre><p>打开index.html文件可以看到输出   </p>
<pre><code>This is module1    
This is module2
</code></pre><p>这里涉及到了webpack几个重要的概念：入口(entry)、模块(module)、分块(chunk)<br>Asset这一列是webpack编译输出的文件，bundle.js是入口，在html中通过script标签引入，其他的是被entry依赖的模块，webpack将他们按照依赖顺序进行编号.</p>
<p>若要给输出加一个样式，需要在package.json文件中加入loader转换器依赖。   </p>
<pre><code>npm init    
npm install css-loader style-loader
</code></pre><p>然后在entry.js中引入css模块，然后重新编译  </p>
<pre><code>require(&quot;!style!css!./style/style.css&quot;)
var printModule1 = require(&apos;./module/module1.js&apos;)
var printModule2 = require(&apos;./module/module2.js&apos;)

function printEntryFileName(){    
    printModule1();
    printModule2();
}

printEntryFileName();
</code></pre><p>webpack还可以根据配置文件编译打包，不需要在webpack命令后写参数（输入文件和输出文件），<br>默认情况下会搜索当前目录下webpack.config.js文件，也可以通过  –config来指定配置文件。在webpack-demo文件目录下新增webpack.config.js<br>var webpack = require(‘webpack’);</p>
<pre><code>module.exports = {
    entry:&apos;./entry.js&apos;,
    output: {
        path: __dirname + &apos;/dist&apos;,
        filename: &apos;bundle.js&apos;
    },
    module: {
        loaders:[
            {
                test:/\.css$/,loader:&apos;style!css&apos;
            }
        ]

    }
}
</code></pre><p>在终端运行webpack,会得到跟webpack entry.js ./dist.bundle.js一样的结果。最后的文件目录是这样子的    </p>
<pre><code>.
├── dist
│   └── bundle.js
├── entry.js
├── index.html
├── module
│   ├── module1.js
│   └── module2.js
├── package.json
├── style
│   └── style.css
└── webpack.config.js
</code></pre><h2 id="当webpack遇见ES6"><a href="#当webpack遇见ES6" class="headerlink" title="当webpack遇见ES6"></a>当webpack遇见ES6</h2><p>把上面最后的文件目录copy出来放到webpack-es6文件目录中，进入webpack-es6目录下操作。在项目中使用ES6语法需要做一些配置。</p>
<h3 id="babelrc文件"><a href="#babelrc文件" class="headerlink" title=".babelrc文件"></a>.babelrc文件</h3><p>在webpack-demo目录下新建.babelrc，这个是将ES6转码成ES5必须要有的文件。文件中的配置如下：    </p>
<pre><code>{
  &quot;presets&quot;: [&quot;es2015&quot;],
  &quot;plugins&quot;: []
}
</code></pre><p>.babelrc文件的配置可以参考<a href="http://www.ruanyifeng.com/blog/2016/01/babel.html" target="_blank" rel="external">Babel 入门教程</a>，如果项目使用的React+ES6，presets中则加入 “react”。</p>
<h3 id="配置webpack-config-js"><a href="#配置webpack-config-js" class="headerlink" title="配置webpack.config.js"></a>配置webpack.config.js</h3><p>在loaders中加入babel配置</p>
<pre><code>var webpack = require(&apos;webpack&apos;);
module.exports = {
    entry:&apos;./entry.js&apos;,
    output: {
        path: __dirname + &apos;/dist&apos;,
        filename: &apos;bundle.js&apos;
    },
    module: {
        loaders:[
            {
                test:/\.css$/,loader:&apos;style!css&apos;
            },
            {
              test: /\.js$/,
              loader: &apos;babel&apos;,
              exclude: /node_modules/
            }
        ]
    }
}
</code></pre><p>这里既然用到了npm install babel babel-loader –save</p>
<h3 id="安装必须的依赖"><a href="#安装必须的依赖" class="headerlink" title="安装必须的依赖"></a>安装必须的依赖</h3><p>.babelrc这个配置加了之后需要安装规则集    </p>
<pre><code>ES2015转码规则
npm install babel-preset-es2015 --save

react转码规则
npm install babel-preset-react --save
</code></pre><p>webpack.config.js中加入babel-loader也需要安装，还有最基本的bable模块  </p>
<pre><code>npm install babel babel-loader --save
</code></pre><h3 id="使用ES6语法改造项目"><a href="#使用ES6语法改造项目" class="headerlink" title="使用ES6语法改造项目"></a>使用ES6语法改造项目</h3><p>module1.js 与 module2.js    </p>
<pre><code>export function printModule1FileName(filename){
    document.getElementById(&apos;module1&apos;).innerHTML = `This is ${filename}`
}
</code></pre><p>entry.js    </p>
<pre><code>import &quot;!style!css!./style/style.css&quot;
import * as Module1 from &apos;./module/module1.js&apos;
import * as Module2 from &apos;./module/module2.js&apos;

class Entry{
    constructor(filename1,filename2){
        Module1.printModule1FileName(filename1);
        Module2.printModule2FileName(filename2);
    }
}

(() =&gt; new Entry(&quot;es6module1&quot;,&quot;es6module1&quot;))();
</code></pre><p>或者这样的entry.js    </p>
<pre><code>import &quot;!style!css!./style/style.css&quot;
import * as Module1 from &apos;./module/module1.js&apos;
import * as Module2 from &apos;./module/module2.js&apos;

class Entry{
    constructor(filename1,filename2){
        this.filename1 = filename1;
        this.filename2 = filename2;        
    }

    printModuleFileName(){
        Module1.printModule1FileName(this.filename1);
        Module2.printModule2FileName(this.filename2);
    }
}

var entry = new Entry(&quot;es6module1&quot;,&quot;es6module2&quot;);
entry.printModuleFileName();
</code></pre><p>其他的文件内容不变，在webpack-es6目录下执行webpack输出内容：    </p>
<pre><code>This is es6module1
This is es6module1
</code></pre><p>最后的目录    </p>
<pre><code>.
├── .babelrc
├── dist
│   └── bundle.js
├── entry.js
├── index.html
├── module
│   ├── module1.js
│   └── module2.js
├── package.json
├── style
│   └── style.css
└── webpack.config.js
</code></pre><p>关于ES6可参考：  </p>
<ul>
<li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6入门</a>    </li>
<li><a href="http://www.ruanyifeng.com/blog/2016/01/babel.html" target="_blank" rel="external">Babel 入门教程</a>    </li>
<li><a href="http://ruanyf.github.io/es-checker/index.cn.html" target="_blank" rel="external">检测浏览器支持的ES6特性</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 模块化编程 </tag>
            
            <tag> webpack </tag>
            
            <tag> requirejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React快速开始（十一）组合 vs 继承]]></title>
      <url>/React%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E7%BB%84%E5%90%88vs%E7%BB%A7%E6%89%BF/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="https://facebook.github.io/react/docs/composition-vs-inheritance.html" target="_blank" rel="external">Composition vs Inheritance</a></p>
</blockquote>
<p>刚接触React的开发人员通常通过继承来实现代码重用，然而我们建议使用组合而不是继承来重用组件之间的代码。React具有强大的组合模型，可以帮助我们解决这些代码重用的问题，而不需要使用继承。</p>
<p>这篇主要是讲 this.props.children<br><a id="more"></a></p>
<h2 id="容器（Containment）"><a href="#容器（Containment）" class="headerlink" title="容器（Containment）"></a>容器（Containment）</h2><p>一些组件并不能提前知道他们的children是什么。 比如Sidebar和Dialog组件，他们只表示一个通用的盒子，盒子的内容我们自己定义。</p>
<p>例如下面这样, FancyBorder是一个容器组件，里面展示的内容通过props.children获得</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">FancyBorder</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>'<span class="attr">FancyBorder</span> <span class="attr">FancyBorder-</span>' + <span class="attr">props.color</span>&#125;&gt;</span></span></div><div class="line">      &#123;props.children&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以通过JSX嵌套传递chilren给组件</p>
<p><a href="https://codepen.io/gaearon/pen/ozqNOV?editors=0010" target="_blank" rel="external">Try it on CodePen</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">WelcomeDialog</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">FancyBorder</span> <span class="attr">color</span>=<span class="string">"blue"</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">"Dialog-title"</span>&gt;</span></div><div class="line">        Welcome</div><div class="line">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">"Dialog-message"</span>&gt;</span></div><div class="line">        Thank you for visiting our spacecraft!</div><div class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">FancyBorder</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JSX标签&lt;FancyBorder&gt; 内的任何内容都将作为props的children属性值传入FancyBorder组件。 因为FancyBorder在一个&lt;div&gt;内部渲染了{props.children}，所以传递的元素将显示在最终输出中。</p>
<p>有时组件中有多个地方需要显示接收到的props内容，那么你可以这样做：</p>
<p><a href="https://codepen.io/gaearon/pen/gwZOJp?editors=0010" target="_blank" rel="external">Try it on CodePen</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SplitPane</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"SplitPane"</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"SplitPane-left"</span>&gt;</span></div><div class="line">        &#123;props.left&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"SplitPane-right"</span>&gt;</span></div><div class="line">        &#123;props.right&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">SplitPane</span></span></span></div><div class="line">      <span class="attr">left</span>=<span class="string">&#123;</span></div><div class="line">        &lt;<span class="attr">Contacts</span> /&gt;</div><div class="line">      &#125;</div><div class="line">      right=&#123;</div><div class="line">        <span class="tag">&lt;<span class="name">Chat</span> /&gt;</span></div><div class="line">      &#125; /&gt;</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>React元素（例如&lt;Contacts /&gt;和&lt;Chat /&gt;）都只是对象</strong>，因此可以像其他数据一样作为props传递。</p>
<h2 id="特殊化（Specialization）"><a href="#特殊化（Specialization）" class="headerlink" title="特殊化（Specialization）"></a>特殊化（Specialization）</h2><p>有时一个组件是另一个组件的“special cases”。 例如，我们可以说WelcomeDialog是Dialog的一个特例。在React中这也可以用组合来实现</p>
<p><a href="https://codepen.io/gaearon/pen/kkEaOZ?editors=0010" target="_blank" rel="external">Try it on CodePen</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dialog</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">FancyBorder</span> <span class="attr">color</span>=<span class="string">"blue"</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">"Dialog-title"</span>&gt;</span></div><div class="line">        &#123;props.title&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">"Dialog-message"</span>&gt;</span></div><div class="line">        &#123;props.message&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">FancyBorder</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">WelcomeDialog</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Dialog</span></span></span></div><div class="line">      <span class="attr">title</span>=<span class="string">"Welcome"</span></div><div class="line">      <span class="attr">message</span>=<span class="string">"Thank you for visiting our spacecraft!"</span> /&gt;</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>组合对于定义为类的组件同样适用：</p>
<p><a href="https://codepen.io/gaearon/pen/gwZbYa?editors=0010" target="_blank" rel="external">Try it on CodePen</a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dialog</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">FancyBorder</span> <span class="attr">color</span>=<span class="string">"blue"</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">"Dialog-title"</span>&gt;</span></div><div class="line">        &#123;props.title&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">"Dialog-message"</span>&gt;</span></div><div class="line">        &#123;props.message&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      &#123;props.children&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">FancyBorder</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SignUpDialog</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.handleSignUp = <span class="keyword">this</span>.handleSignUp.bind(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">login</span>: <span class="string">''</span>&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleChange(e) &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">login</span>: e.target.value&#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleSignUp() &#123;</div><div class="line">    alert(<span class="string">`Welcome aboard, <span class="subst">$&#123;<span class="keyword">this</span>.state.login&#125;</span>!`</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Dialog</span> <span class="attr">title</span>=<span class="string">"Mars Exploration Program"</span></span></span></div><div class="line">              <span class="attr">message</span>=<span class="string">"How should we refer to you?"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;this.state.login&#125;</span></span></div><div class="line">               <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleSignUp&#125;</span>&gt;</span></div><div class="line">          Sign Me Up!</div><div class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">Dialog</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="So-What-About-Inheritance"><a href="#So-What-About-Inheritance" class="headerlink" title="So What About Inheritance?"></a>So What About Inheritance?</h2><p>在Facebook上，有数千个组件使用React，还没有发现任何用例建议使用组件继承。</p>
<p>props和组合已经提供了以明确和安全的方式自定义组件外观和行为所需的所有灵活性。 </p>
<p><strong>请记住，组件可以接受任意props，包括原始值，React元素或函数。</strong></p>
<p>如果要在组件之间重用非UI功能，建议将它提取到单独的JavaScript模块中。<br>组件可以导入并使用函数，对象或类，而不会扩展它。</p>
]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React快速开始 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React快速开始（十）state提升]]></title>
      <url>/React%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B%EF%BC%88%E5%8D%81%EF%BC%89state%E6%8F%90%E5%8D%87/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="https://facebook.github.io/react/docs/lifting-state-up.html" target="_blank" rel="external">Lifting State Up</a></p>
</blockquote>
<p>这篇翻译的时候啰里吧嗦，Lifting State Up 译为 ‘state提升’感觉怪怪的，其实就是介绍了一种兄弟组件之间通信的方式。。。</p>
<p>通俗的解释一下：</p>
<blockquote>
<p>父组件有子组件A和子组件B，子组件A接收父组件传递的一个函数，这个函数可以更新父组件的state，子组件在用户操作时调用这个函数，这样就可以改变父组件的state了。</p>
<p>那如果父组件把这个state作为props传递给它的另一个子组件B，那结果不就是 子组件A中的操作通过父组件影响了子组件B么。。。</p>
</blockquote>
<p>喏，挫挫的翻译开始了。。。</p>
<a id="more"></a>
<p>有时候会有几个组件有相同state的情况，我们建议把共享的state提升到最近的共同的祖先上。 </p>
<p>这里，我们创建一个温度计算器来计算水在一定温度下是否沸腾。</p>
<p>这里有一个BoilingVerdict组件， 它接收celsius温度作为props，并打印是否可以让水沸腾：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">BoilingVerdict</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (props.celsius &gt;= <span class="number">100</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The water would boil.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The water would not boil.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在，我们创建一个Calculator组件，它有一个&lt;input&gt;可以输入温度，并将输入的值保存在this.state.temperature中，并且会根据当前输入的值渲染BoilingVerdict组件.</p>
<p><a href="https://codepen.io/valscion/pen/VpZJRZ?editors=0010" target="_blank" rel="external">Try it on CodePen</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">temperature</span>: <span class="string">''</span>&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleChange(e) &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">temperature</span>: e.target.value&#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">const</span> temperature = <span class="keyword">this</span>.state.temperature;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;fieldset&gt;</div><div class="line">        &lt;legend&gt;Enter temperature in Celsius:&lt;/legend&gt;</div><div class="line">        &lt;input</div><div class="line">          value=&#123;temperature&#125;</div><div class="line">          onChange=&#123;this.handleChange&#125; /&gt;</div><div class="line">        &lt;BoilingVerdict</div><div class="line">          celsius=&#123;parseFloat(temperature)&#125; /&gt;</div><div class="line">      &lt;/fieldset&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们除了要输入摄氏温度，还要输入华氏温度，那我们再加一个输入框。我们可以从Calculator中提取一个TemperatureInput组件。 并且提供一个props属性scale，它的值可能是“c”或“f”</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> scaleNames = &#123;</div><div class="line">  <span class="attr">c</span>: <span class="string">'Celsius'</span>,</div><div class="line">  <span class="attr">f</span>: <span class="string">'Fahrenheit'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TemperatureInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">temperature</span>: <span class="string">''</span>&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleChange(e) &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">temperature</span>: e.target.value&#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">const</span> temperature = <span class="keyword">this</span>.state.temperature;</div><div class="line">    <span class="keyword">const</span> scale = <span class="keyword">this</span>.props.scale;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>Enter temperature in &#123;scaleNames[scale]&#125;:<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;temperature&#125;</span></span></div><div class="line">               <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</div><div class="line">      <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在Calculator是这样的,有两个输入，输入其中一个时，另一个不更新。 但我们希望能保持同步。</p>
<p><a href="https://codepen.io/valscion/pen/GWKbao?editors=0010" target="_blank" rel="external">Try it on CodePen</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;TemperatureInput scale="c" /&gt;</div><div class="line">        &lt;TemperatureInput scale="f" /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先，我们要写两个函数，摄氏度和华氏度的转换，然后返回：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toCelsius</span>(<span class="params">fahrenheit</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (fahrenheit - <span class="number">32</span>) * <span class="number">5</span> / <span class="number">9</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toFahrenheit</span>(<span class="params">celsius</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (celsius * <span class="number">9</span> / <span class="number">5</span>) + <span class="number">32</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这两个函数都是转换数字的。 我们编写另一个函数，将字符串温度和转换器函数作为参数，并返回一个字符串，然后用它来根据一个input来计算另一个input的值。</p>
<p>当temperature不合法时返回空字符串，返回值四舍五入到小数点后三位：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tryConvert</span>(<span class="params">temperature, convert</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> input = <span class="built_in">parseFloat</span>(temperature);</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">Number</span>.isNaN(input)) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">const</span> output = convert(input);</div><div class="line">  <span class="keyword">const</span> rounded = <span class="built_in">Math</span>.round(output * <span class="number">1000</span>) / <span class="number">1000</span>;</div><div class="line">  <span class="keyword">return</span> rounded.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>例如，tryConvert(‘abc’,toCelsius）返回一个空字符串，而tryConvert(‘10.22’,toFahrenheit）返回’50.396’.</p>
<p>现在两个TemperatureInput组件都将其输入值保存在自己的state。</p>
<p>但是，我们希望这两个输入是相互同步的。当我们更新摄氏温度的输入值时，华氏温度输入框也能显示转换了的华氏温度，反之亦然。</p>
<p>在React中，可以通过将state移动到最接近的共同祖先共享state，这叫做“提升state”。现在从TemperatureInput中删除本地state，并将其移动到Calculator中。</p>
<p>如果计算器拥有共享state，那两个输入中显示的当前温度数据就是这个共享的state中获得,这个共享state可以作为组件的props传递给组件。</p>
<p>但是props是只读的。 当temperature保存在本地状态时，TemperatureInput可以调用this.setState()来更改它。 但是，现在temperature来自parent的props，无法控制temperature。</p>
<p>但是可以通过接收父容器的onTemperatureChange来改变state,当TemperatureInput更新温度时，调用this.props.onTemperatureChange.</p>
<p>翻译不下去了，好啰嗦。。。直接看最后代码吧</p>
<p><a href="http://codepen.io/valscion/pen/jBNjja?editors=0010" target="_blank" rel="external">Try it on CodePen</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TemperatureInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleChange(e) &#123;</div><div class="line">    <span class="keyword">this</span>.props.onTemperatureChange(e.target.value);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">const</span> temperature = <span class="keyword">this</span>.props.temperature;</div><div class="line">    <span class="keyword">const</span> scale = <span class="keyword">this</span>.props.scale;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;fieldset&gt;</div><div class="line">        &lt;legend&gt;Enter temperature in &#123;scaleNames[scale]&#125;:&lt;/legend&gt;</div><div class="line">        &lt;input value=&#123;temperature&#125;</div><div class="line">               onChange=&#123;this.handleChange&#125; /&gt;</div><div class="line">      &lt;/fieldset&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Calculator extends React.Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);</div><div class="line">    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);</div><div class="line">    this.state = &#123;temperature: '', scale: 'c'&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleCelsiusChange(temperature) &#123;</div><div class="line">    this.setState(&#123;scale: 'c', temperature&#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleFahrenheitChange(temperature) &#123;</div><div class="line">    this.setState(&#123;scale: 'f', temperature&#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    const scale = this.state.scale;</div><div class="line">    const temperature = this.state.temperature;</div><div class="line">    const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;</div><div class="line">    const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;</div><div class="line"></div><div class="line">    return (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;TemperatureInput</div><div class="line">          scale="c"</div><div class="line">          temperature=&#123;celsius&#125;</div><div class="line">          onTemperatureChange=&#123;this.handleCelsiusChange&#125; /&gt;</div><div class="line">        &lt;TemperatureInput</div><div class="line">          scale="f"</div><div class="line">          temperature=&#123;fahrenheit&#125;</div><div class="line">          onTemperatureChange=&#123;this.handleFahrenheitChange&#125; /&gt;</div><div class="line">        &lt;BoilingVerdict</div><div class="line">          celsius=&#123;parseFloat(celsius)&#125; /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看下编辑input时会发生什么：</p>
<ol>
<li>React调用在DOM &lt;input&gt;上onChange事件处理函数。在上面的例子中，就是TemperatureInput组件中的handleChange方法。</li>
<li>TemperatureInput组件中的handleChange方法用输入的值调用this.props.onTemperatureChange()</li>
<li>根据编辑的输入框调用相应的函数，分别是handleCelsiusChange 和handleFahrenheitChange，更新state</li>
<li><strong>state改变后，通知React重新获取render方法的返回，得到最新的UI展示对象。</strong></li>
<li>与原有的render返回对比后，更新必要的真实DOM重新渲染</li>
<li>另一个输入框更新为转换后的温度</li>
</ol>
<p>提升state需要比双向绑定写更多的代码，但有一个好处是：可以很方便的找bug。因为state都是在某一个组件中，这样定位问题的范围就可以大大缩小。</p>
<p>此外，还可以实现自定义逻辑拒绝或转换用户输入。（比如在onChange事件处理函数中对输入进行校验，校验不通过就不更新state,给出提示。）</p>
]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React快速开始 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React快速开始（九）React中的表单]]></title>
      <url>/React%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B9%9D%EF%BC%89%E8%A1%A8%E5%8D%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="https://facebook.github.io/react/docs/forms.html" target="_blank" rel="external">Forms</a></p>
</blockquote>
<p>form元素在React中与在普通html中的表现有些不同，表单元素本身有一些内部状态。<br>例如，这个HTML中的表单接受一个单一的name：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">    Name:</div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当用户提交表单时，默认会跳转到新页面，在React中，这也是可以的。<br>但是在大多数情况下，用JavaScript函数来访问和处理用户输入表单的数据更方便，实现这一点的标准方法是使用一种称为“受控组件”的技术。<br><a id="more"></a></p>
<h2 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h2><p>在HTML中，像&lt;input&gt;，&lt;textarea&gt;和&lt;select&gt;这些表单元素通常都有自己的状态，并根据用户输入进行更新。 在React中，可变状态通常保存在组件的state中，并且只能使用setState()进行更新。</p>
<p>我们可以结合两者，将React的state作为表单数据的唯一来源，呈现表单的React组件可以控制用户输入时表单的表现。这样一个由React来控制数据的表单元素成为‘受控组件’。</p>
<p><a href="https://codepen.io/gaearon/pen/VmmPgp?editors=0010" target="_blank" rel="external">Try it on CodePen</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">value</span>: <span class="string">''</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.handleSubmit = <span class="keyword">this</span>.handleSubmit.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleChange(event) &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: event.target.value&#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleSubmit(event) &#123;</div><div class="line">    alert(<span class="string">'A name was submitted: '</span> + <span class="keyword">this</span>.state.value);</div><div class="line">    event.preventDefault();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</div><div class="line">        &lt;label&gt;</div><div class="line">          Name:</div><div class="line">          &lt;input type="text" value=&#123;this.state.value&#125; onChange=&#123;this.handleChange&#125; /&gt;</div><div class="line">        &lt;/label&gt;</div><div class="line">        &lt;input type="submit" value="Submit" /&gt;</div><div class="line">      &lt;/form&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个表单元素上设置了value属性，显示的值始终为this.state.value，使React的state成为事实上的的数据源。每一次用户输入都会触发执行handleChange方法来更新显示的值。</p>
<p>在受控组件中，每个可变状态都具有关联的处理函数，这样我们可以直接修改或验证用户输入。<br> 例如，我们要把用户输入的name转换为全部用大写字母，可以把handleChange写成：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">handleChange(event) &#123;</div><div class="line">  <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: event.target.value.toUpperCase()&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="textarea-标签"><a href="#textarea-标签" class="headerlink" title="textarea 标签"></a>textarea 标签</h2><p>在HTML中，在&lt;textarea&gt;元素中写文本内容：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span></div><div class="line">  Hello there, this is some text in a text area</div><div class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>在React中，&lt;textarea&gt;使用value属性。</strong> 这样，使用&lt;textarea&gt;的表单与使用单行输入input的表单非常类似：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EssayForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      <span class="attr">value</span>: <span class="string">'Please write an essay about your favorite DOM element.'</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.handleSubmit = <span class="keyword">this</span>.handleSubmit.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleChange(event) &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: event.target.value&#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleSubmit(event) &#123;</div><div class="line">    alert(<span class="string">'An essay was submitted: '</span> + <span class="keyword">this</span>.state.value);</div><div class="line">    event.preventDefault();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</div><div class="line">        &lt;label&gt;</div><div class="line">          Name:</div><div class="line">          &lt;textarea value=&#123;this.state.value&#125; onChange=&#123;this.handleChange&#125; /&gt;</div><div class="line">        &lt;/label&gt;</div><div class="line">        &lt;input type="submit" value="Submit" /&gt;</div><div class="line">      &lt;/form&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：this.state.value必须在构造函数中初始化</strong></p>
<h2 id="select标签"><a href="#select标签" class="headerlink" title="select标签"></a>select标签</h2><p>在HTML中，&lt;select&gt;用于创建一个下拉列表。 例如，</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"grapefruit"</span>&gt;</span>Grapefruit<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"lime"</span>&gt;</span>Lime<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span> <span class="attr">value</span>=<span class="string">"coconut"</span>&gt;</span>Coconut<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"mango"</span>&gt;</span>Mango<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意，Coconut选项因为有‘selected’属性，被默认选中了。<br>在React中不是使用这个‘selected’属性，而是使用&lt;select&gt;标签上的value属性。在受控组件中这样更方便，因为只需要在一个位置更新。<br>例如：<a href="https://codepen.io/gaearon/pen/JbbEzX?editors=0010" target="_blank" rel="external">Try it on CodePen</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlavorForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">value</span>: <span class="string">'coconut'</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.handleSubmit = <span class="keyword">this</span>.handleSubmit.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleChange(event) &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: event.target.value&#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleSubmit(event) &#123;</div><div class="line">    alert(<span class="string">'Your favorite flavor is: '</span> + <span class="keyword">this</span>.state.value);</div><div class="line">    event.preventDefault();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">          Pick your favorite La Croix flavor:</div><div class="line">          <span class="tag">&lt;<span class="name">select</span> <span class="attr">value</span>=<span class="string">&#123;this.state.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"grapefruit"</span>&gt;</span>Grapefruit<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"lime"</span>&gt;</span>Lime<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"coconut"</span>&gt;</span>Coconut<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"mango"</span>&gt;</span>Mango<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>总之，这样做能够让&lt;input &gt;，&lt;textarea&gt;和&lt;select&gt;都很相似 ：它们都接受一个value属性，我们可以通过这个value来控制表单呈现。</p>
<h2 id="处理多个输入"><a href="#处理多个输入" class="headerlink" title="处理多个输入"></a>处理多个输入</h2><p>当需要处理多个受控输入元素时，可以给每个元素添加一个name属性，这样可以只用写一个处理函数，在这个函数里根据event.target.name的值来做不同的操作。例如：</p>
<p><a href="https://codepen.io/gaearon/pen/wgedvV?editors=0010" target="_blank" rel="external">Try it on CodePen</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reservation</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      <span class="attr">isGoing</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">numberOfGuests</span>: <span class="number">2</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.handleInputChange = <span class="keyword">this</span>.handleInputChange.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleInputChange(event) &#123;</div><div class="line">    <span class="keyword">const</span> target = event.target;</div><div class="line">    <span class="keyword">const</span> value = target.type === <span class="string">'checkbox'</span> ? target.checked : target.value;</div><div class="line">    <span class="keyword">const</span> name = target.name;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      [name]: value</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;form&gt;</div><div class="line">        &lt;label&gt;</div><div class="line">          Is going:</div><div class="line">          &lt;input</div><div class="line">            name="isGoing"</div><div class="line">            type="checkbox"</div><div class="line">            checked=&#123;this.state.isGoing&#125;</div><div class="line">            onChange=&#123;this.handleInputChange&#125; /&gt;</div><div class="line">        &lt;/label&gt;</div><div class="line">        &lt;br /&gt;</div><div class="line">        &lt;label&gt;</div><div class="line">          Number of guests:</div><div class="line">          &lt;input</div><div class="line">            name="numberOfGuests"</div><div class="line">            type="number"</div><div class="line">            value=&#123;this.state.numberOfGuests&#125;</div><div class="line">            onChange=&#123;this.handleInputChange&#125; /&gt;</div><div class="line">        &lt;/label&gt;</div><div class="line">      &lt;/form&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，这里使用了<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Object_initializer#计算的属性名" target="_blank" rel="external">ES6计算属性名语法</a>来更新name对应的state属性</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.setState(&#123;</div><div class="line">  [name]: value</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这与下面ES5代码等同：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> partialState = &#123;&#125;;</div><div class="line">partialState[name] = value;</div><div class="line"><span class="keyword">this</span>.setState(partialState);</div></pre></td></tr></table></figure>
<p>另外：因为setState()会自动将setState()的输入合并（浅合并）到当前状态，所以我们只需要给setState()部分属性。</p>
<h2 id="受控组件的替代方案"><a href="#受控组件的替代方案" class="headerlink" title="受控组件的替代方案"></a>受控组件的替代方案</h2><p>使用受控组件有时会很繁琐，因为需要为每个可变状态编写事件处理程序，并通过React组件管理所有的输入状态。如果老的代码需要转为React或将React应用程序与非React库集成时，这可能特别麻烦。 这种情况下，可能需要检查不受控制的组件(??没明白啥意思)，这是实现表单输入的替代方案。</p>
]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React快速开始 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React快速开始（八）Lists和Keys]]></title>
      <url>/React%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B%EF%BC%88%E5%85%AB%EF%BC%89Lists%E5%92%8CKeys/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="https://facebook.github.io/react/docs/lists-and-keys.html" target="_blank" rel="external">Lists and Keys</a></p>
</blockquote>
<p>我们先来看下在JavaScript中如何转换列表，下面的代码使用map()函数将number数组中的每个数值乘以2，然后返回新的数组。</p>
<p>控制台打印[2, 4, 6, 8, 10]</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">const</span> doubled = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span> number * <span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log(doubled);</div></pre></td></tr></table></figure>
<p>在React中，元素列表的转换与这几乎相同，像下面这样（官方文档啰里啰嗦，其实一看代码就明白了是不）<br><a href="https://codepen.io/gaearon/pen/GjPyQr?editors=0011" target="_blank" rel="external">Try it on CodePen</a></p>
<a id="more"></a>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const numbers = [1, 2, 3, 4, 5];</div><div class="line">const listItems = numbers.map((number) =&gt;</div><div class="line">  &lt;li&gt;&#123;number&#125;&lt;/li&gt;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>然后将整个listItems数组包含在一个&lt;ul&gt;元素中，并将其渲染到DOM中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;listItems&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="列表组件"><a href="#列表组件" class="headerlink" title="列表组件"></a>列表组件</h2><p>通常会在一个组件中渲染列表,我们可以将前面的例子重构成接受数字数组的一个组件，并输出一个无序的元素列表。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function NumberList(props) &#123;</div><div class="line">  const numbers = props.numbers;</div><div class="line">  const listItems = numbers.map((number) =&gt;</div><div class="line">    &lt;li&gt;&#123;number&#125;&lt;/li&gt;</div><div class="line">  );</div><div class="line">  return (</div><div class="line">    &lt;ul&gt;&#123;listItems&#125;&lt;/ul&gt;</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line">const numbers = [1, 2, 3, 4, 5];</div><div class="line">ReactDOM.render(</div><div class="line">  &lt;NumberList numbers=&#123;numbers&#125; /&gt;,</div><div class="line">  document.getElementById('root')</div><div class="line">);</div></pre></td></tr></table></figure>
<p>在运行此代码时，会看到一个warning，提示应该为列表项提供一个key, “key”是创建元素列表时需要包含的特殊<strong>字符串属性</strong>。<br>在下一节会讨论为什么它很重要。</p>
<p><a href="https://codepen.io/gaearon/pen/jrXYRR?editors=0011" target="_blank" rel="external">Try it on CodePen</a></p>
<p>现在来给list.map()中的列表项添加一个key:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function NumberList(props) &#123;</div><div class="line">  const numbers = props.numbers;</div><div class="line">  const listItems = numbers.map((number) =&gt;</div><div class="line">    &lt;li key=&#123;number.toString()&#125;&gt;</div><div class="line">      &#123;number&#125;</div><div class="line">    &lt;/li&gt;</div><div class="line">  );</div><div class="line">  return (</div><div class="line">    &lt;ul&gt;&#123;listItems&#125;&lt;/ul&gt;</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line">const numbers = [1, 2, 3, 4, 5];</div><div class="line">ReactDOM.render(</div><div class="line">  &lt;NumberList numbers=&#123;numbers&#125; /&gt;,</div><div class="line">  document.getElementById('root')</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="Keys"><a href="#Keys" class="headerlink" title="Keys"></a>Keys</h2><p><strong>key 可以让React知道哪些列表项目已更改、添加或删除。</strong>应该给每一项一个固定的key。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const numbers = [1, 2, 3, 4, 5];</div><div class="line">const listItems = numbers.map((number) =&gt;</div><div class="line">  &lt;li key=&#123;number.toString()&#125;&gt;</div><div class="line">    &#123;number&#125;</div><div class="line">  &lt;/li&gt;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>选择key的最好方法是使用一个字符串来唯一标识列表项,通常会使用数据中的ID作为key：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const todoItems = todos.map((todo) =&gt;</div><div class="line">  &lt;li key=&#123;todo.id&#125;&gt;</div><div class="line">    &#123;todo.text&#125;</div><div class="line">  &lt;/li&gt;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>如果没有这样一个id，可以用列表的索引作为key<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const todoItems = todos.map((todo, index) =&gt;</div><div class="line">  // Only do this if items have no stable IDs</div><div class="line">  &lt;li key=&#123;index&#125;&gt;</div><div class="line">    &#123;todo.text&#125;</div><div class="line">  &lt;/li&gt;</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p><strong>注意： 如果列表可以重新排序，我们不建议使用索引作为key，因为这会很慢。 可以阅读这篇<a href="https://facebook.github.io/react/docs/reconciliation.html#recursing-on-children" target="_blank" rel="external">为什么需要key</a>，给你更深入的解释</strong></p>
<h2 id="提取组件with-key"><a href="#提取组件with-key" class="headerlink" title="提取组件with key"></a>提取组件with key</h2><p>key只有在周围有数组的上下文中才有作用。<br>例如，如果提取了ListItem组件，应该将key放在在数组中的&lt;ListItem /&gt;元素上，而不应该在ListItem本身的根元素&lt;li&gt;上。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">function ListItem(props) &#123;</div><div class="line">  const value = props.value;</div><div class="line">  return (</div><div class="line">    // Wrong! There is no need to specify the key here:</div><div class="line">    &lt;li key=&#123;value.toString()&#125;&gt;</div><div class="line">      &#123;value&#125;</div><div class="line">    &lt;/li&gt;</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line">function NumberList(props) &#123;</div><div class="line">  const numbers = props.numbers;</div><div class="line">  const listItems = numbers.map((number) =&gt;</div><div class="line">    // Wrong! The key should have been specified here:</div><div class="line">    &lt;ListItem value=&#123;number&#125; /&gt;</div><div class="line">  );</div><div class="line">  return (</div><div class="line">    &lt;ul&gt;</div><div class="line">      &#123;listItems&#125;</div><div class="line">    &lt;/ul&gt;</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line">const numbers = [1, 2, 3, 4, 5];</div><div class="line">ReactDOM.render(</div><div class="line">  &lt;NumberList numbers=&#123;numbers&#125; /&gt;,</div><div class="line">  document.getElementById('root')</div><div class="line">);</div></pre></td></tr></table></figure>
<p>Example: key的正确用法<br><a href="https://codepen.io/rthor/pen/QKzJKG?editors=0010" target="_blank" rel="external">Try it on CodePen</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListItem</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="comment">// Correct! There is no need to specify the key here:</span></div><div class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;props.value&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberList</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> numbers = props.numbers;</div><div class="line">  <span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></div><div class="line">    <span class="comment">// Correct! Key should be specified inside the array.</span></div><div class="line">    &lt;ListItem key=&#123;number.toString()&#125;</div><div class="line">              value=&#123;number&#125; /&gt;</div><div class="line">  );</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></div><div class="line">      &#123;listItems&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">NumberList</span> <span class="attr">numbers</span>=<span class="string">&#123;numbers&#125;</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('root')</div><div class="line">);</div></pre></td></tr></table></figure>
<p><strong>有一个经验法则：在map()中的元素需要添加key</strong></p>
<h2 id="Key在兄弟元素中必须是唯一的"><a href="#Key在兄弟元素中必须是唯一的" class="headerlink" title="Key在兄弟元素中必须是唯一的"></a>Key在兄弟元素中必须是唯一的</h2><p>数组中用到的key在兄弟元素中必须是唯一的，但是不需要全局唯一，可以在两个不同的数组中用相同的key. </p>
<p><a href="https://codepen.io/gaearon/pen/NRZYGN?editors=0010" target="_blank" rel="external">Try it on CodePen</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">function Blog(props) &#123;</div><div class="line">  const sidebar = (</div><div class="line">    &lt;ul&gt;</div><div class="line">      &#123;props.posts.map((post) =&gt;</div><div class="line">        &lt;li key=&#123;post.id&#125;&gt;</div><div class="line">          &#123;post.title&#125;</div><div class="line">        &lt;/li&gt;</div><div class="line">      )&#125;</div><div class="line">    &lt;/ul&gt;</div><div class="line">  );</div><div class="line">  const content = props.posts.map((post) =&gt;</div><div class="line">    &lt;div key=&#123;post.id&#125;&gt;</div><div class="line">      &lt;h3&gt;&#123;post.title&#125;&lt;/h3&gt;</div><div class="line">      &lt;p&gt;&#123;post.content&#125;&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  );</div><div class="line">  return (</div><div class="line">    &lt;div&gt;</div><div class="line">      &#123;sidebar&#125;</div><div class="line">      &lt;hr /&gt;</div><div class="line">      &#123;content&#125;</div><div class="line">    &lt;/div&gt;</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line">const posts = [</div><div class="line">  &#123;id: 1, title: 'Hello World', content: 'Welcome to learning React!'&#125;,</div><div class="line">  &#123;id: 2, title: 'Installation', content: 'You can install React from npm.'&#125;</div><div class="line">];</div><div class="line">ReactDOM.render(</div><div class="line">  &lt;Blog posts=&#123;posts&#125; /&gt;,</div><div class="line">  document.getElementById('root')</div><div class="line">);</div></pre></td></tr></table></figure>
<p><strong>key作为React的提示属性，不会传递给组件，所以不要将key作为你想要传递给组件的属性名</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> content = posts.map(<span class="function">(<span class="params">post</span>) =&gt;</span></div><div class="line">  &lt;Post</div><div class="line">    key=&#123;post.id&#125;</div><div class="line">    id=&#123;post.id&#125;</div><div class="line">    title=&#123;post.title&#125; /&gt;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>在上面的例子中，Post组件可以读取props.id，但不能读取到props.key。</p>
<h2 id="将map-嵌入到JSX中"><a href="#将map-嵌入到JSX中" class="headerlink" title="将map()嵌入到JSX中"></a>将map()嵌入到JSX中</h2><p>在上面的例子中声明了一个单独的listItems变量并将其包含在JSX中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberList</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> numbers = props.numbers;</div><div class="line">  <span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></div><div class="line">    &lt;ListItem key=&#123;number.toString()&#125;</div><div class="line">              value=&#123;number&#125; /&gt;</div><div class="line">  );</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></div><div class="line">      &#123;listItems&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JSX允许将任何表达式嵌入到花括号中，所以我们可以内联map()的结果：</p>
<p><a href="https://codepen.io/gaearon/pen/BLvYrB?editors=0010" target="_blank" rel="external">Try it on CodePen</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberList</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> numbers = props.numbers;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></div><div class="line">      &#123;numbers.map((number) =&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">ListItem</span> <span class="attr">key</span>=<span class="string">&#123;number.toString()&#125;</span></span></div><div class="line">                  <span class="attr">value</span>=<span class="string">&#123;number&#125;</span> /&gt;</div><div class="line">      )&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这么做有时候会让代码更清晰，但这种方式也可能被滥用。如果map()里面嵌套很多，可以考虑提取组件。</p>
]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React快速开始 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React快速开始（七）条件渲染]]></title>
      <url>/React%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%83%EF%BC%89%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="https://facebook.github.io/react/docs/conditional-rendering.html" target="_blank" rel="external">Conditional Rendering</a></p>
</blockquote>
<p>在React中，可以选择在不同条件下渲染不同组件。</p>
<p>这里有两个组件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">UserGreeting</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome back!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">GuestGreeting</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Please sign up.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在创建一个Greeting组件，根据用户是否登录，显示其中一个组件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeting</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> isLoggedIn = props.isLoggedIn;</div><div class="line">  <span class="keyword">if</span> (isLoggedIn) &#123;</div><div class="line">    <span class="keyword">return</span> &lt;UserGreeting /&gt;;</div><div class="line">  &#125;</div><div class="line">  return &lt;GuestGreeting /&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  // Try changing to isLoggedIn=&#123;true&#125;:</div><div class="line">  &lt;Greeting isLoggedIn=&#123;false&#125; /&gt;,</div><div class="line">  document.getElementById('root')</div><div class="line">);</div></pre></td></tr></table></figure>
<p>这个例子根据props中的isLoggedIn渲染出不同的内容</p>
<h2 id="元素变量"><a href="#元素变量" class="headerlink" title="元素变量"></a>元素变量</h2><p>可以使用变量来存储元素，并且根据条件存储元素，这样可以实现有条件地渲染。</p>
<p>这里有两个组件，注销和登录按钮：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LoginButton</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;props.onClick&#125;</span>&gt;</span></span></div><div class="line">      Login</div><div class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LogoutButton</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;props.onClick&#125;</span>&gt;</span></span></div><div class="line">      Logout</div><div class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在创建一个有状态组件LoginControl，它将根据当前状态呈现&lt;LoginButton /&gt;或&lt;LogoutButton /&gt;。：<a href="https://codepen.io/gaearon/pen/QKzAgB?editors=0010" target="_blank" rel="external">Try it on CodePen</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginControl</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.handleLoginClick = <span class="keyword">this</span>.handleLoginClick.bind(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.handleLogoutClick = <span class="keyword">this</span>.handleLogoutClick.bind(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">isLoggedIn</span>: <span class="literal">false</span>&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleLoginClick() &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">isLoggedIn</span>: <span class="literal">true</span>&#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleLogoutClick() &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">isLoggedIn</span>: <span class="literal">false</span>&#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">const</span> isLoggedIn = <span class="keyword">this</span>.state.isLoggedIn;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> button = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">if</span> (isLoggedIn) &#123;</div><div class="line">      button = &lt;LogoutButton onClick=&#123;this.handleLogoutClick&#125; /&gt;;</div><div class="line">    &#125; else &#123;</div><div class="line">      button = &lt;LoginButton onClick=&#123;this.handleLoginClick&#125; /&gt;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;Greeting isLoggedIn=&#123;isLoggedIn&#125; /&gt;</div><div class="line">        &#123;button&#125;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;LoginControl /&gt;,</div><div class="line">  document.getElementById('root')</div><div class="line">);</div></pre></td></tr></table></figure>
<p>声明变量并使用if语句,这是有条件地呈现组件的一个好方法，但有时希望使用较短的语法。<br>在JSX中有几种内联条件的方法，如下所述。</p>
<h2 id="逻辑运算符-amp-amp-（内联If-）"><a href="#逻辑运算符-amp-amp-（内联If-）" class="headerlink" title="逻辑运算符&amp;&amp; （内联If ）"></a>逻辑运算符&amp;&amp; （内联If ）</h2><p>可以在JSX中嵌入任何表达式并将其包裹在花括号中，JavaScript逻辑&amp;&amp;运算符就可以放在{}中。 </p>
<p>它可以像这样控制元素呈现：<a href="https://codepen.io/gaearon/pen/ozJddz?editors=0010" target="_blank" rel="external">Try it on CodePen</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mailbox</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> unreadMessages = props.unreadMessages;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      &#123;unreadMessages.length &gt; 0 &amp;&amp;</div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span></div><div class="line">          You have &#123;unreadMessages.length&#125; unread messages.</div><div class="line">        <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">      &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> messages = [<span class="string">'React'</span>, <span class="string">'Re: React'</span>, <span class="string">'Re:Re: React'</span>];</div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Mailbox</span> <span class="attr">unreadMessages</span>=<span class="string">&#123;messages&#125;</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('root')</div><div class="line">);</div></pre></td></tr></table></figure>
<p>在JavaScript中，true &amp;&amp; 表达式的结果为表达式的结果，并且 false &amp;&amp; 表达式 总是计算为false。</p>
<p>因此，如果条件为真，则&amp;&amp;后面的元素将显示。 如果是false，React会忽略并跳过它。</p>
<h2 id="条件运算符（内联if-Else）"><a href="#条件运算符（内联if-Else）" class="headerlink" title="条件运算符（内联if-Else）"></a>条件运算符（内联if-Else）</h2><p>另一种在元素内部条件渲染的方法是使用JavaScript条件运算符  ? true : false.<br>下面的示例，有条件地呈现一小段文本。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">  <span class="keyword">const</span> isLoggedIn = <span class="keyword">this</span>.state.isLoggedIn;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">      The user is <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;isLoggedIn ? 'currently' : 'not'&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span> logged in.</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以用于更大的表达式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">  <span class="keyword">const</span> isLoggedIn = <span class="keyword">this</span>.state.isLoggedIn;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;div&gt;</div><div class="line">      &#123;isLoggedIn ? (</div><div class="line">        &lt;LogoutButton onClick=&#123;this.handleLogoutClick&#125; /&gt;</div><div class="line">      ) : (</div><div class="line">        &lt;LoginButton onClick=&#123;this.handleLoginClick&#125; /&gt;</div><div class="line">      )&#125;</div><div class="line">    &lt;/div&gt;</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个可以根据你认为更易读的方式选择合适的方法。 </p>
<p>还要记住，如果条件太复杂，可以试试提取组件</p>
<h2 id="阻止组件渲染"><a href="#阻止组件渲染" class="headerlink" title="阻止组件渲染"></a>阻止组件渲染</h2><p>在极少数情况下，可能希望组件隐藏自身，如果是这样，你可以返回一个null。<br><a href="https://codepen.io/gaearon/pen/Xjoqwm?editors=0010" target="_blank" rel="external">Try it on CodePen</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">WarningBanner</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!props.warn) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"warning"</span>&gt;</span></span></div><div class="line">      Warning!</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">showWarning</span>: <span class="literal">true</span>&#125;</div><div class="line">    <span class="keyword">this</span>.handleToggleClick = <span class="keyword">this</span>.handleToggleClick.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleToggleClick() &#123;</div><div class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123;</div><div class="line">      <span class="attr">showWarning</span>: !prevState.showWarning</div><div class="line">    &#125;));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">WarningBanner</span> <span class="attr">warn</span>=<span class="string">&#123;this.state.showWarning&#125;</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleToggleClick&#125;</span>&gt;</span></div><div class="line">          &#123;this.state.showWarning ? 'Hide' : 'Show'&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="tag">&lt;<span class="name">Page</span> /&gt;</span>,</div><div class="line">  document.getElementById('root')</div><div class="line">);</div></pre></td></tr></table></figure>
<p><strong>注意： 从组件的render方法返回null不会影响组件生命周期方法的触发。<br>例如，componentWillUpdate和componentDidUpdate仍将被调用。</strong></p>
]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React快速开始 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React快速开始（六）事件处理]]></title>
      <url>/React%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B%EF%BC%88%E5%85%AD%EF%BC%89%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="https://facebook.github.io/react/docs/handling-events.html" target="_blank" rel="external">Handling Events</a></p>
</blockquote>
<p>React元素事件处理与DOM元素上的事件处理很相似，但有一些语法差异：</p>
<ul>
<li>React事件绑定采用驼峰式命名（onClick），而不是小写(onclick)。</li>
<li>使用JSX，你可以传递一个函数作为事件处理程序，而不是一个字符串。</li>
</ul>
<a id="more"></a>
<p>例如，html中绑定事件</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"activateLasers()"</span>&gt;</span></div><div class="line">  Activate Lasers</div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在React中略有不同</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;activateLasers&#125;</span>&gt;</span></div><div class="line">  Activate Lasers</div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>另一个区别是:在React中不能通过return false来阻止默认行为，必须显式调用preventDefault。</strong> </p>
<p>例如，为了阻止链接打开新页面的默认行为，在纯HTML中可以这样写：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">onclick</span>=<span class="string">"console.log('The link was clicked.'); return false"</span>&gt;</span></div><div class="line">  Click me</div><div class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在React中，必须这样写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ActionLink</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    e.preventDefault();</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'The link was clicked.'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span></div><div class="line">      Click me</div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>这里的e对象是一个合成的event, React根据<a href="https://www.w3.org/TR/DOM-Level-3-Events/" target="_blank" rel="external">W3C事件规范</a>定义了这些合成event，因此你不必担心跨浏览器的兼容性。<br>请参阅<a href="https://facebook.github.io/react/docs/events.html" target="_blank" rel="external">SyntheticEvent参考指南</a>了解更多信息。</strong></p>
<p>使用React时，通常不需要在创建DOM元素之后调用addEventListener来添加监听器，在元素最初呈现时就可以提供一个监听器。（React采用事件代理机制）</p>
<p>当使用ES6类定义组件时，常见的做法是将事件处理程序作为类方法。 </p>
<p>例如，这个Toggle组件有一个按钮，让用户在“ON”和“OFF”状态之间切换：<br><a href="https://codepen.io/gaearon/pen/xEmzGg?editors=0010" target="_blank" rel="external">Try it on CodePen</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toggle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">isToggleOn</span>: <span class="literal">true</span>&#125;;</div><div class="line"></div><div class="line">    <span class="comment">// This binding is necessary to make `this` work in the callback</span></div><div class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleClick() &#123;</div><div class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123;</div><div class="line">      <span class="attr">isToggleOn</span>: !prevState.isToggleOn</div><div class="line">    &#125;));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></div><div class="line">        &#123;this.state.isToggleOn ? 'ON' : 'OFF'&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Toggle</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('root')</div><div class="line">);</div></pre></td></tr></table></figure>
<p>在JSX回调中必须要注意一点: </p>
<ul>
<li>在JavaScript中，类方法默认情况下是不会<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="external">绑定</a>this的， 如果没有给this.handleClick绑定上下文就传递给onClick，那么当该函数实际被调用时，函数内的this是undefined的。</li>
</ul>
<p>这并不是React的特定行为，它是<a href="https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/" target="_blank" rel="external">JavaScript函数如何工作</a>的一部分。通常，如果你引用一个没有()的方法，比如onClick = {this.handleClick}，你应该给该方法绑定上下文。</p>
<p>如果觉得调用bind函数比较麻烦，还有两种方法可以绑定this</p>
<p>1、 属性初始化器 <a href="https://babeljs.io/docs/plugins/transform-class-properties/" target="_blank" rel="external">property initializer syntax</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">// 这个语法能够handleClick中的`this`被绑定。</span></div><div class="line">  <span class="comment">// 注意: 这是一个实验性语法</span></div><div class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'this is:'</span>, <span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></div><div class="line">        Click me</div><div class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>默认情况下，此语法在<a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external"> Create React App</a>中启用。</p>
<p>2、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="external">箭头函数</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  handleClick() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'this is:'</span>, <span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="comment">// This syntax ensures `this` is bound within handleClick</span></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;(e)</span> =&gt;</span> this.handleClick(e)&#125;&gt;</span></div><div class="line">        Click me</div><div class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种办法有个问题就是，每次LoggingButton渲染都会重新创建一个回调函数。多数情况下还好，如果这个回调函数作为props传递给下面的子组件，可能会让这些组件进行额外的重新渲染。</p>
<blockquote>
<p>箭头函数的引入有两个方面的作用：一是更简短的函数书写，二是对 this的词法解析。<br>箭头函数会捕获其所在上下文的  this 值，作为自己的 this 值</p>
</blockquote>
<p>通常建议在构造函数中绑定或使用属性初始化器语法[property initializer syntax]来避免这种性能问题。</p>
]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React快速开始 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[各种深拷贝方法]]></title>
      <url>/%E5%90%84%E7%A7%8D%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>ECMAScript有5种简单数据类型（也叫基本数据类型）： Null 、 Undefined  、 Number   、String 、 Boolean<br>还有一种复杂数据类型：对象Object。ECMAScript提供了很多原生的引用类型，如Array、Object、Function.<br>基本数据类型保存在栈内存，引用类型的引用地址保存在栈内存，而引用的值保存在堆内存中。<br>我们常会遇到复制一个值的情况，直接复制一个基本数据类型值，能得到一个副本，栈内存中开辟了新的空间存放，<br>而直接复制一个引用类型值时，会为引用地址开辟一个栈内存存放，但引用的值还是同一块堆内存，新的引用地址和老的引用地址相同都指向这一块堆内存。<br><a id="more"></a><br>Object类型和Array类型是在程序计算复制过程最需要注意的，看两个例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">	<span class="attr">name</span>: <span class="string">'chang'</span>,</div><div class="line">	<span class="attr">age</span>: <span class="number">25</span>,</div><div class="line">	<span class="attr">other</span>: &#123;</div><div class="line">		<span class="attr">company</span>: <span class="string">'dianping'</span>,</div><div class="line">		<span class="attr">time</span>: <span class="string">'201505'</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> object_new = object;  <span class="comment">//object赋给object_new</span></div><div class="line">object_new.age = <span class="number">18</span>;   <span class="comment">//修改了object_new的age</span></div><div class="line">alert(object.age);  <span class="comment">//18  object的age也变了，因为object和object_new指向的是同一块堆内存</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数组也是一样</span></div><div class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"><span class="keyword">var</span> array_new = array;</div><div class="line">array.push(<span class="number">5</span>);</div><div class="line">alert(array_new); <span class="comment">//1,2,3,4,5</span></div></pre></td></tr></table></figure>
<p>然而有时候并不希望新的对象和老的对象的值一改变就会互相影响。<br>所以要想办法解决这个问题。</p>
<h2 id="深拷贝实现"><a href="#深拷贝实现" class="headerlink" title="深拷贝实现"></a>深拷贝实现</h2><p>为了能对数组和对象进行深度复制，需要对他们的属性递归复制，直到属性是基本类型值才直接赋值，这样就需要实现一个深度赋值的函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">typeOf</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> map = &#123;</div><div class="line">		<span class="string">'[object Array]'</span> : <span class="string">'array'</span>,</div><div class="line">		<span class="string">'[object Object]'</span> : <span class="string">'object'</span>,</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> map[<span class="built_in">Object</span>.prototype.toString.call(data)];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> result,i;</div><div class="line">   <span class="keyword">if</span>(typeOf(data) == <span class="string">'object'</span>)&#123;</div><div class="line">   		result =  &#123;&#125;;</div><div class="line">   		<span class="keyword">for</span>(i <span class="keyword">in</span> data)&#123;</div><div class="line">   			result[i] = deepClone(data[i]);</div><div class="line">   		&#125;</div><div class="line">   		<span class="keyword">return</span> result;</div><div class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span>(typeOf(data) == <span class="string">'array'</span>)&#123;</div><div class="line">   		result =  [];</div><div class="line">   		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</div><div class="line">   			result.push(deepClone(data[i]));</div><div class="line">   		&#125;</div><div class="line">   		<span class="keyword">return</span> result;</div><div class="line">   &#125;<span class="keyword">else</span>&#123;</div><div class="line">   		<span class="keyword">return</span> data;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> object_new = deepClone(object); </div><div class="line">object_new.age = <span class="number">18</span>;  </div><div class="line">alert(object.age);  <span class="comment">//25</span></div></pre></td></tr></table></figure>
<h2 id="借用JSON方法"><a href="#借用JSON方法" class="headerlink" title="借用JSON方法"></a>借用JSON方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> object = <span class="built_in">Object</span>.create(&#123;</div><div class="line">	<span class="attr">other</span>: &#123;</div><div class="line">		<span class="attr">company</span>: <span class="string">'dianping'</span>,</div><div class="line">		<span class="attr">time</span>: <span class="string">'201505'</span></div><div class="line">	&#125;</div><div class="line">&#125;,&#123;</div><div class="line">	<span class="attr">name</span>:&#123;</div><div class="line">		<span class="attr">value</span>:<span class="string">'chang'</span>,</div><div class="line">		<span class="attr">configurable</span>:<span class="literal">true</span>,</div><div class="line">		<span class="attr">enumerable</span>:<span class="literal">true</span>,</div><div class="line">		<span class="attr">writable</span>:<span class="literal">true</span></div><div class="line">	&#125;,</div><div class="line">	<span class="attr">age</span>:&#123;</div><div class="line">		<span class="attr">value</span>: <span class="number">25</span>,</div><div class="line">		<span class="attr">configurable</span>:<span class="literal">true</span>,</div><div class="line">		<span class="attr">enumerable</span>:<span class="literal">true</span>,</div><div class="line">		<span class="attr">writable</span>:<span class="literal">true</span></div><div class="line">	&#125;,</div><div class="line">	<span class="attr">sayHello</span>:&#123;</div><div class="line">		<span class="attr">value</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</div><div class="line">		<span class="attr">configurable</span>:<span class="literal">true</span>,</div><div class="line">		<span class="attr">enumerable</span>:<span class="literal">true</span>,</div><div class="line">		<span class="attr">writable</span>:<span class="literal">true</span></div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> temp = <span class="built_in">JSON</span>.stringify(object);</div><div class="line"><span class="keyword">var</span> object_new = <span class="built_in">JSON</span>.parse(temp);</div><div class="line">object.age = <span class="number">18</span>;</div><div class="line">alert(object_new.age); <span class="comment">//25 互不影响</span></div></pre></td></tr></table></figure>
<p>但是这种方法有个缺点，<strong>JSON不支持变量、函数或对象实例，在使用JSON.stringify()序列化对象时所有函数及原型成员会被忽略，不体现在结果中。</strong><br>所以object_new中的prototype指向了Object.prototype, sayHello函数也丢失了。</p>
<h2 id="数组深拷贝"><a href="#数组深拷贝" class="headerlink" title="数组深拷贝"></a>数组深拷贝</h2><p>数组有一些自己的深拷贝方法</p>
<h3 id="spread运算符"><a href="#spread运算符" class="headerlink" title="spread运算符"></a>spread运算符</h3><p>spread运算符是将数组或类数组对象展开成一系列用逗号隔开的值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> array_new = [...array];</div><div class="line">array_new.push(<span class="number">4</span>);</div><div class="line">alert(array); <span class="comment">//1,2,3</span></div></pre></td></tr></table></figure>
<h3 id="concat-和slice"><a href="#concat-和slice" class="headerlink" title="concat()和slice()"></a>concat()和slice()</h3><p>Array的concat()方法:先创建当前数组的一个副本，然后将接收到的参数添加到副本的末尾，最后返回新构建的数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> array_new = array.concat();</div><div class="line">array_new.push(<span class="number">4</span>);</div><div class="line">alert(array); <span class="comment">//1,2,3</span></div></pre></td></tr></table></figure>
<p>Array的slice()方法: 可以返回一个新数组，新数组是原数组的一个片段，接收1个或2个参数，第一个参数表示片段在原数组中的起始位置，第二个参数表示片段在原数组中的结束位置，如果第二个参数省略，结束位置在yuan数组的末尾项。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> array_new = array.slice(<span class="number">0</span>); <span class="comment">//不带参数与此效果一样</span></div><div class="line">array_new.push(<span class="number">4</span>);</div><div class="line">alert(array); <span class="comment">//1,2,3</span></div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li>JavaScript高级程序设计 第3章 基本概念 3.4 数据类型</li>
<li>JavaScript高级程序设计 第5章 引用类型 5.2.6 Array类型 操作方法</li>
<li>JavaScript高级程序设计 第6章 面向对象的程序设计 6.1.3 属性特性 6.3.4 原型式继承 Object.create()</li>
<li>JavaScript高级程序设计 第20章 JSON  20.2 解析与序列化</li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React快速开始（五）State和生命周期]]></title>
      <url>/React%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B%EF%BC%88%E4%BA%94%EF%BC%89State%E5%92%8C%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="https://facebook.github.io/react/docs/state-and-lifecycle.html" target="_blank" rel="external">State and Lifecycle</a></p>
</blockquote>
<p>前面介绍过时钟的例子，通过ReactDOM.render()来改变页面渲染内容</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tick</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> element = (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;new Date().toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  );</div><div class="line">  ReactDOM.render(</div><div class="line">    element,</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</div><div class="line">  );</div><div class="line">&#125;</div><div class="line">setInterval(tick, <span class="number">1000</span>);</div></pre></td></tr></table></figure>
<p>在本节，我们将学习如何让Clock组件真正可重用和可封装， 它可以设置自己的计时器并每秒更新一次<br><a id="more"></a><br>我们可以从封装时钟开始：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Clock</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;props.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tick</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Clock</span> <span class="attr">date</span>=<span class="string">&#123;new</span> <span class="attr">Date</span>()&#125; /&gt;</span>,</span></div><div class="line">    document.getElementById('root')</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line">setInterval(tick, 1000);</div></pre></td></tr></table></figure>
<p>但是这并不能满足要求，Clock设置定时器并每秒更新UI的任务应该是Clock的实现细节，不应该由外部来控制。<br>我们想要的是这样一个组件：Clock组件能够自己更新自己。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Clock</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('root')</div><div class="line">);</div></pre></td></tr></table></figure>
<p><strong>为了实现这一点，我们需要在Clock组件中添加“state”，state与props相似，但它是组件私有的，完全由组件控制。</strong>          </p>
<p>我们之前提到过（React快速开始（四）组件和props），定义为class的组件具有一些额外功能，<strong>组件的state就是这样：只能在定义为class 的组件中使用</strong></p>
<h2 id="将Function转换为Class"><a href="#将Function转换为Class" class="headerlink" title="将Function转换为Class"></a>将Function转换为Class</h2><p>可以通过下面五个步骤将时钟functional组件转换为class组件：</p>
<ol>
<li>创建一个与functional组件相同名称的ES6 class,并继承<a href="https://facebook.github.io/react/docs/react-component.html" target="_blank" rel="external">React.Component</a></li>
<li>添加一个名为render()的空方法</li>
<li>将functional组件的函数主体移动到render()方法中</li>
<li>在render()方法体中用this.props替换props</li>
<li>删除剩下的空函数声明</li>
</ol>
<p>functional组件:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Clock</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;props.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>class组件:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;this.props.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Clock组件现在被定义为一个class而不是一个function，这样我们就可以使用一些额外的功能，比如state和组件的生命周期钩子方法（ lifecycle hooks）</p>
<h2 id="在class中添加state"><a href="#在class中添加state" class="headerlink" title="在class中添加state"></a>在class中添加state</h2><p>现在把props中的date移到state中，分三个步骤：</p>
<ol>
<li><p>将render()方法中的this.props.date 替换为this.state.date</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;this.state.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>添加一个constructor来初始化this.state</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">        <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;this.state.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <strong>注意怎么将props传递给了React.Component的构造函数的,class组件应始终调用父类 的构造函数，并传递props作为参数。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super" target="_blank" rel="external">关于super关键字</a></p>
<blockquote>
<p>在构造函数中使用时，super关键字单独出现，必须在可以使用this关键字之前使用。此关键字也可用于调用父对象上的函数。</p>
</blockquote>
</li>
<li><p>将date属性从 &lt;Clock /&gt;中移除</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Clock</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('root')</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>结果是这样的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;this.state.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Clock</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('root')</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>下一步，我们让Clock组件设置它自己的定时器，每秒钟更新自己</p>
<h2 id="向class中添加生命周期方法"><a href="#向class中添加生命周期方法" class="headerlink" title="向class中添加生命周期方法"></a>向class中添加生命周期方法</h2><p>在有很多组件的应用程序中，在销毁组件时释放组件占用的资源非常重要。</p>
<ul>
<li>当Clock第一次添加到DOM时，我们要设置一个定时器， 这在React中称为“挂载”。</li>
<li>当Clock产生的DOM被删除时，我们也想清除该计时器， 这在React中称为“卸载”。</li>
<li>当组件挂载和卸载时，我们可以在组件类上声明特殊的方法来做一些事情：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentDidMount() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillUnmount() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;this.state.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上componentDidMount和componentWillUnmount，<br>这些方法称为 生命周期钩子函数 “lifecycle hooks”</p>
<p>在组件已经添加到DOM树之后，会执行componentDidMount()，在这里最适合设置一个定时器<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">componentDidMount() &#123;</div><div class="line">   <span class="keyword">this</span>.timerID = setInterval(</div><div class="line">     <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.tick(),</div><div class="line">     <span class="number">1000</span></div><div class="line">   );</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>注意，我们将timerID 保存在this中。</p>
<p><strong>this.props由React设置，this.state具有特殊的含义（根据用户操作改变自身状态），如果需要存储一些不用于更新页面渲染的字段，可以将它添加到类中，比如这里的timerID。</strong></p>
<p>不在render()中使用的，不应该把他放在this.state中，比如这里的timerID</p>
<p>在组件componentWillUnmount()生命周期钩子中拆下计时器：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">componentWillUnmount() &#123;</div><div class="line">  clearInterval(<span class="keyword">this</span>.timerID);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后，我们实现每秒运行的tick()方法。它使用this.setState()来更新组件状态。<br><a href="https://codepen.io/gaearon/pen/amqdNA?editors=0010" target="_blank" rel="external">Try it on CodePen</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentDidMount() &#123;</div><div class="line">    <span class="keyword">this</span>.timerID = setInterval(</div><div class="line">      <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.tick(),</div><div class="line">      <span class="number">1000</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillUnmount() &#123;</div><div class="line">    clearInterval(<span class="keyword">this</span>.timerID);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  tick() &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;this.state.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Clock</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('root')</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>让我们快速回顾一下发生了什么以及方法调用的顺序(渲染过程)：</p>
<p>1）当<clock>传递给ReactDOM.render()时，React调用Clock组件的构造函数。由于Clock需要显示当前时间，所以它new一个当前时间对象来初始化this.state。稍后会更新此状态。（constructor）</clock></p>
<p>2）React调用Clock组件的render()方法,获取应该渲染的内容，更新DOM，使其与Clock的render输出一致。（render ）</p>
<p>3）当Clock组件插入DOM中时，React调用componentDidMount()生命周期钩子。在这里，Clock组件要求浏览器设置一个定时器每秒调用一次tick()。（componentDidMount）</p>
<p>4）浏览器每秒钟调用tick()方法。在这里，Clock组件通过调用setState()更新UI，显示当前时间。因为调用了setState()让React知道state有变化，并再次调用render()方法来了解屏幕上应该呈现是什么。这一次，render()方法中的this.state.date与之前不同，因而render输出将包含更新的时间，并相应地更新真实DOM。</p>
<p>5）如果时钟组件从DOM中删除，React会调用componentWillUnmount()生命周期钩子，让定时器停止计时。</p>
<h2 id="正确使用state"><a href="#正确使用state" class="headerlink" title="正确使用state"></a>正确使用state</h2><p>关于setState()方法，你应该知道三件事情：</p>
<h3 id="不要直接修改state"><a href="#不要直接修改state" class="headerlink" title="不要直接修改state"></a>不要直接修改state</h3><p>比如下面这样做，不会重新渲染组件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Wrong</span></div><div class="line"><span class="keyword">this</span>.state.comment = <span class="string">'Hello'</span>;</div></pre></td></tr></table></figure></p>
<p>应该使用setState()<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Correct</span></div><div class="line"><span class="keyword">this</span>.setState(&#123;<span class="attr">comment</span>: <span class="string">'Hello'</span>&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>唯一可以直接给state赋值的地方是在 constructor中</strong></p>
<h3 id="state更新可能是异步的"><a href="#state更新可能是异步的" class="headerlink" title="state更新可能是异步的"></a>state更新可能是异步的</h3><p>在对setState()多次调用的情况下，为了提高性能，React<strong>可能</strong>将他们合并，最后一次性更新。<br>由于this.props和this.state<strong>可能</strong>会异步更新，所以不应该依靠它们的值计算下一个状态。</p>
<p>例如下面这样更新counter,页面中显示1（把官方文档例子改了一下，感觉这样更能说明问题）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">        <span class="attr">counter</span>:<span class="number">0</span></div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentDidMount() &#123;</div><div class="line">   <span class="comment">//这里state并没有立即更新</span></div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">         <span class="attr">counter</span>: <span class="number">5</span></div><div class="line">      &#125;);</div><div class="line">      <span class="comment">//setState()接收一个对象，this.state.counter还是0</span></div><div class="line">     <span class="keyword">this</span>.setState(&#123; </div><div class="line">       <span class="attr">counter</span>: <span class="keyword">this</span>.state.counter + <span class="number">1</span> </div><div class="line">     &#125;);       </div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">      <span class="keyword">return</span>(</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;this.state.counter&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line">      )</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('root')</div><div class="line">);</div></pre></td></tr></table></figure>
<p>下面这样，页面显示6，控制台打印：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">state:  0</div><div class="line">prevState:  Object &#123;counter: 5&#125;</div><div class="line">setState callback1: 6</div><div class="line">setState callback2: 6</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">      <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="keyword">this</span>.state = &#123;<span class="attr">counter</span>:<span class="number">0</span>&#125;;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      componentDidMount() &#123;</div><div class="line">         <span class="keyword">this</span>.setState(&#123;</div><div class="line">           <span class="attr">counter</span>: <span class="number">5</span></div><div class="line">         &#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'setState callback1:'</span>,<span class="keyword">this</span>.state.counter)</div><div class="line">         &#125;);</div><div class="line">        <span class="comment">//setState接收一个函数，这里的prevState是上面this.setState执行完之后的state</span></div><div class="line">         <span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState, props</span>)=&gt;</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'prevState: '</span>,prevState)</div><div class="line">           <span class="keyword">return</span> &#123;</div><div class="line">             <span class="attr">counter</span>: prevState.counter + <span class="number">1</span></div><div class="line">           &#125;;</div><div class="line">         &#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'setState callback2:'</span>,<span class="keyword">this</span>.state.counter)</div><div class="line">         &#125;);</div><div class="line">         <span class="built_in">console</span>.log(<span class="string">'state: '</span>,<span class="keyword">this</span>.state.counter)</div><div class="line">      &#125;</div><div class="line">    render()&#123;</div><div class="line">      <span class="keyword">return</span>(</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;this.state.counter&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line">      )</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('root')</div><div class="line">);</div></pre></td></tr></table></figure>
<p>先执行了console.log(‘state: ‘,this.state.counter)，说明setState()是异步更新的<br>setState()有两种形式<br>1、setState() 接收一个对象，在setState()中访问this.state可能不是最新的state<br>2、setState(）接收一个函数，这个函数接收最新的state作为第一个参数，更新应用后的props作为第二个参数</p>
<h3 id="state更新会被合并"><a href="#state更新会被合并" class="headerlink" title="state更新会被合并"></a>state更新会被合并</h3><p>当调用setState()时，React会将你提供的对象合并到当前state，例如，state可能包含几个独立变量：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      <span class="attr">posts</span>: [],</div><div class="line">      <span class="attr">comments</span>: []</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你可以调用setState()单独更新一个变量：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">componentDidMount() &#123;</div><div class="line">    fetchPosts().then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">this</span>.setState(&#123;</div><div class="line">        <span class="attr">posts</span>: response.posts</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    fetchComments().then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">this</span>.setState(&#123;</div><div class="line">        <span class="attr">comments</span>: response.comments</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>state合并是浅合并(The merging is shallow)，所以调用this.setState（{comments}）后，this.state.post依然不变，但this.state.comments会被完全替代。</strong></p>
<p>官方文档例子讲得不够明白，我再举一个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">        <span class="attr">info</span>: &#123;</div><div class="line">            <span class="attr">value</span>: <span class="number">1</span>,</div><div class="line">            <span class="attr">text</span>: <span class="string">'个人'</span>,</div><div class="line">            <span class="attr">status</span>: <span class="number">0</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">array</span>:[<span class="number">1</span>,<span class="number">2</span>]</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">componentDidMount() &#123;</div><div class="line">     <span class="keyword">this</span>.setState(&#123;</div><div class="line">       <span class="attr">info</span>: &#123;</div><div class="line">         <span class="attr">value</span>: <span class="number">2</span>,</div><div class="line">         <span class="attr">text</span>: <span class="string">'公司'</span></div><div class="line">       &#125;,</div><div class="line">       <span class="attr">array</span>:[<span class="number">2</span>]</div><div class="line">     &#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'state updated:'</span>,<span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.state))</div><div class="line">     &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>控制台打印结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;info&quot;:&#123;</div><div class="line">        &quot;value&quot;:2,</div><div class="line">        &quot;text&quot;:&quot;公司&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;array&quot;:[2]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>所以，记住了！！state更新是浅合并！！state中的属性值会被完全替代</strong></p>
<h2 id="state从上至下传递"><a href="#state从上至下传递" class="headerlink" title="state从上至下传递"></a>state从上至下传递</h2><p>state是局部的、组件私有的，一个组件的父组件和子组件都不能知道这个组件是有状态还是无状态，它们也不需要关心这个组件是被定义为函数还是类。 除了拥有并设置它的组件之外，任何其他组件都不能访问这个state。</p>
<p>但是组件可以通过props将它的state传递给子组件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;this.state.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在自定义组件中也可以<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">FormattedDate</span> <span class="attr">date</span>=<span class="string">&#123;this.state.date&#125;</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>FormattedDate 组件在它的props中添加一个date字段， 在组件内并不care这个date是Clock的 state, 还是Clock的 props, 还是手动写入的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">FormattedDate</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;props.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>这通常被称为“自顶向下”或“单向”数据流。</strong><br>任何state始终由某个特定组件所有，并且这个组件的state只能影响它下面的子组件。</p>
<p>可以将一个组件树的props想象成瀑布，每个组件的state就像一个额外的水源，在某一个点与props会合，并且也往下流动。</p>
<p>为了证明所有组件都是真正孤立互不影响的，我们可以创建一个App组件，呈现三个&lt;Clock&gt;：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">Clock</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Clock</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Clock</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('root')</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>每个Clock都设置自己的定时器并独立更新。<br>在React应用中，不管组件是有状态还是无状态，都认为是组件自身的实现细节.<br>可以在有状态组件中使用无状态组件，反之亦然。</p>
]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React快速开始 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[水平垂直居中方法]]></title>
      <url>/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>水平垂直居中在工作中经常遇见，学习了下CSS布局，顺便总结一些水平垂直居中布局的方法。</p>
<div style="box-sizing: border-box;border: 1px solid #ff6633;
  color:#fff;
  margin: auto;
  height:200px;
  padding: 50px 0;"><div style="width: 200px;height: 100px;background-color:#ff6633;text-align:center;margin:auto;"><span style="line-height:100px;">少年锦时</span></div></div>

<a id="more"></a>
<p><br></p>
<p>利用子元素margin实现居中时要注意:</p>
<ul>
<li>水平格式化有7个相关属性：margin-left、border-left、padding-left、width、padding-right、border-right、margin-right</li>
<li>垂直格式化也有7个相关属性:margin-top、border-top、padding-top、height、padding-bottom、border-bottom、margin-bottom</li>
<li>在正常流中一个块元素的margin-top和margin-bottom设置为auto时，会自动计算为0；</li>
<li>而将会计元素的margin-left和margin-right设置为auto时，会自动计算为相等的长度；</li>
<li>所以对于定宽的块级元素margin-left:auto;margin-right：auto;可使元素水平居中。</li>
</ul>
<h3 id="一、单行文本垂直居中"><a href="#一、单行文本垂直居中" class="headerlink" title="一、单行文本垂直居中"></a>一、单行文本垂直居中</h3><p><strong>利用line-height + text-align</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>少年锦时<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span>&#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ff6633</span>;</div><div class="line">  <span class="attribute">color</span>:<span class="number">#ff6633</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">  <span class="attribute">text-align</span>:center;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">span</span>&#123;</div><div class="line">   <span class="attribute">line-height</span>:<span class="number">200px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二、padding填充"><a href="#二、padding填充" class="headerlink" title="二、padding填充"></a>二、padding填充</h3><p>计算父元素与子元素宽高差，设置父元素padding<br>paddingLeft = paddingRight = (parent.width - child.width)/2<br>paddingTop = paddingBottom = (parent.height - child.height)/2 </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">*&#123;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line"> &#125;</div><div class="line"><span class="selector-class">.container</span>&#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ff6633</span>;</div><div class="line">  <span class="attribute">color</span>:<span class="number">#fff</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">50px</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.content</span>&#123;</div><div class="line">   <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">   <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">   <span class="attribute">background-color</span>:<span class="number">#ff6633</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、margin填充"><a href="#三、margin填充" class="headerlink" title="三、margin填充"></a>三、margin填充</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">*&#123;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line"> &#125;</div><div class="line"><span class="selector-class">.container</span>&#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ff6633</span>;</div><div class="line">  <span class="attribute">color</span>:<span class="number">#fff</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.content</span>&#123;</div><div class="line">   <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">   <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">   <span class="attribute">background-color</span>:<span class="number">#ff6633</span>;</div><div class="line">   <span class="attribute">margin</span>: <span class="number">50px</span> <span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="四、absolute布局的水平垂直居中"><a href="#四、absolute布局的水平垂直居中" class="headerlink" title="四、absolute布局的水平垂直居中"></a>四、absolute布局的水平垂直居中</h3><p><strong>结合position和transform水平移动</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span>&#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ff6633</span>;</div><div class="line">  <span class="attribute">color</span>:<span class="number">#fff</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">  &#125;</div><div class="line"><span class="selector-class">.content</span>&#123;</div><div class="line">   <span class="attribute">position</span>: absolute;</div><div class="line">   <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">   <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">   <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%);</div><div class="line">   <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-50%,-50%);</div><div class="line">   <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">   <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">   <span class="attribute">background-color</span>:<span class="number">#ff6633</span>;           </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="五、IFC布局上下文的水平垂直居中"><a href="#五、IFC布局上下文的水平垂直居中" class="headerlink" title="五、IFC布局上下文的水平垂直居中"></a>五、IFC布局上下文的水平垂直居中</h3><p><strong>主要是垂直居中使用vertical-align属性</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hidden"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span>&#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ff6633</span>;</div><div class="line">  <span class="attribute">color</span>:<span class="number">#fff</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.hidden</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">height</span>: inherit;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.hidden</span>,<span class="selector-class">.content</span>&#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.content</span>&#123;</div><div class="line">   <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">   <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">   <span class="attribute">background-color</span>:<span class="number">#ff6633</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="六、table布局上下文下的水平垂直居中"><a href="#六、table布局上下文下的水平垂直居中" class="headerlink" title="六、table布局上下文下的水平垂直居中"></a>六、table布局上下文下的水平垂直居中</h3><p><strong>将div模拟成表格,利用单元格的vertical-align属性垂直居中，水平居中可以用text-align和margin：auto</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span>&#123;</div><div class="line">    <span class="attribute">display</span>: table;</div><div class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ff6633</span>;</div><div class="line">    <span class="attribute">color</span>:<span class="number">#fff</span>;</div><div class="line">    &#125;</div><div class="line"><span class="selector-class">.row</span>&#123;</div><div class="line">    <span class="attribute">display</span>: table-cell;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col</span>&#123;</div><div class="line">   <span class="attribute">display</span>: inline-block;</div><div class="line">   <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">   <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">   <span class="attribute">background-color</span>:<span class="number">#ff6633</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="七、FFC布局上下文下的水平垂直居中"><a href="#七、FFC布局上下文下的水平垂直居中" class="headerlink" title="七、FFC布局上下文下的水平垂直居中"></a>七、FFC布局上下文下的水平垂直居中</h3><p><strong>利用flex布局的justify-content和align-items</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span>&#123;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">justify-content</span>: center;</div><div class="line">    <span class="attribute">align-items</span>: center;</div><div class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ff6633</span>;</div><div class="line">    <span class="attribute">color</span>:<span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.content</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">background-color</span>:<span class="number">#ff6633</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的这些方法按css布局分个类能加深一些理解<br><img src="/images/center/css布局.png" alt=""></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Visual_formatting_model" target="_blank" rel="external">视觉格式化模型</a></li>
<li><a href="https://www.w3.org/TR/CSS2/visuren.html" target="_blank" rel="external">Visual formatting model</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React快速开始（四）组件和props]]></title>
      <url>/React%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B%EF%BC%88%E5%9B%9B%EF%BC%89%E7%BB%84%E4%BB%B6%E5%92%8Cprops/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="https://facebook.github.io/react/docs/components-and-props.html" target="_blank" rel="external">Components and Props</a></p>
</blockquote>
<p>使用组件可以将UI拆分成独立的可重复使用的部分，然后可以单独考虑每个组件的渲染。从概念上来讲，组件就像JavaScript函数，接受任意输入（称为“props”），并返回描述页面呈现的React元素。<br><a id="more"></a></p>
<h3 id="函数组件和类组件（Functional-and-Class-）"><a href="#函数组件和类组件（Functional-and-Class-）" class="headerlink" title="函数组件和类组件（Functional and Class ）"></a>函数组件和类组件（Functional and Class ）</h3><p>定义组件最简单的方法是：编写一个JavaScript函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个函数是一个有效的React组件，因为它接受一个单一的“props”对象参数并返回一个React元素。 我们将这样的组件称为“functional组件”，因为它们在字面上是一个JavaScript函数。</p>
<p>还可以使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="external">ES6类</a>来定义组件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面这两个组件是等同的，class组件有一些额外的功能（state、钩子函数），这会在下一章节讨论，这里先使用functional组件来讨论</p>
<h3 id="渲染组件"><a href="#渲染组件" class="headerlink" title="渲染组件"></a>渲染组件</h3><p>之前我们遇到的元素，都是DOM标签：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">div</span> /&gt;</span>;</span></div></pre></td></tr></table></figure></p>
<p>我们也可以自定义元素，代表一个组件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">"Sara"</span> /&gt;</span>;</span></div></pre></td></tr></table></figure></p>
<p>当React知道这是一个表示用户定义的元素时，它将JSX属性作为单个对象传递给该组件。 我们称这个对象为“props”。例如：</p>
<p><a href="https://codepen.io/gaearon/pen/YGYmEG?editors=0010" target="_blank" rel="external">Try it on CodePen</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">"Sara"</span> /&gt;</span>;</span></div><div class="line">ReactDOM.render(</div><div class="line">  element,</div><div class="line">  document.getElementById('root')</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>我们来看一下这个例子发生了什么？</p>
<ul>
<li>调用ReactDOM.render()渲染&lt;Welcome name =“Sara”/&gt;元素</li>
<li>React以{name：’Sara’}作为props调用Welcome组件</li>
<li>Welcome组件返回一个&lt;h1&gt; Hello，Sara &lt;/ h1&gt;元素</li>
<li>React DOM有效地更新DOM来匹配&lt;h1&gt; Hello，Sara &lt;/ h1&gt; </li>
</ul>
<p><strong>注意：组件名称要以大写字母开头，例如，&lt;div /&gt;表示一个DOM标签，但&lt;Welcome /&gt;表示一个组件，并且要求Welcome在作用范围内（在本模块中或从其他模块引入）。</strong></p>
<p>我们可以创建一个组件，然后呈现多个<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;div&gt;</div><div class="line">      &lt;Welcome name="Sara" /&gt;</div><div class="line">      &lt;Welcome name="Cahal" /&gt;</div><div class="line">      &lt;Welcome name="Edite" /&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;App /&gt;,</div><div class="line">  document.getElementById('root')</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p><strong>注意：组件必须返回单个根元素，这也是为什么我们添加了一个&lt;div&gt;来包含所有的&lt;Welcome /&gt;元素。</strong></p>
<h3 id="props是只读的"><a href="#props是只读的" class="headerlink" title="props是只读的"></a>props是只读的</h3><p>不管将组件声明为functional还是class，它都不能修改自己的props。<br>看下面这个函数，这样的函数称为‘纯函数’，因为它们不会更改输入，并且相同的输入总是返回相同的结果。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相比之下，这个函数是不纯的，因为它改变了自己的输入：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">withdraw</span>(<span class="params">account, amount</span>) </span>&#123;</div><div class="line">  account.total -= amount;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再看下组件声明：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>React很灵活，但有一个严格的规则：<strong>所有的React组件必须像纯函数一样不能改变props</strong><br>当然，应用程序的UI是动态的，在下一节中，我们将介绍“state”，state允许React组件根据用户操作、网络响应或者其他任何内容来更改组件输出，而不会违反此规则。</p>
]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React快速开始 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React快速开始（三）渲染元素]]></title>
      <url>/React%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%89%EF%BC%89%E6%B8%B2%E6%9F%93%E5%85%83%E7%B4%A0/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="https://facebook.github.io/react/docs/rendering-elements.html" target="_blank" rel="external">Rendering Elements</a></p>
</blockquote>
<p>元素是React应用最小构建块，每一个元素都描述了呈现在屏幕上的内容。不同于真实的DOM元素，React元素就是一个普通的对象，创建成本很低，React DOM负责更新真实DOM与React元素匹配。</p>
<p>关于组件、元素和实例可以看这个 <a href="https://facebook.github.io/react/blog/2015/12/18/react-components-elements-and-instances.html" target="_blank" rel="external">React Components, Elements, and Instances</a></p>
<a id="more"></a>
<h2 id="将元素渲染到DOM中"><a href="#将元素渲染到DOM中" class="headerlink" title="将元素渲染到DOM中"></a>将元素渲染到DOM中</h2><p>假设你的HTML文件中有一个&lt;div&gt;,这个节点里面的内容都由 React DOM来管理。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>使用React构建的应用程序通常具有单个根DOM节点，要将React元素渲染到根DOM节点中，需要将他们传递给ReactDOM.render()<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line">ReactDOM.render(</div><div class="line">  element,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</div><div class="line">);</div></pre></td></tr></table></figure></p>
<h2 id="更新已渲染元素"><a href="#更新已渲染元素" class="headerlink" title="更新已渲染元素"></a>更新已渲染元素</h2><p><strong>React元素是不可变的</strong>，创建元素后无法更改其子项或属性,一个元素就像一个电影中的一帧：它代表了某个时间点的UI。</p>
<p>根据我们目前的知识，<strong>更新UI的唯一方法是创建一个新元素，并将其传递给ReactDOM.render()</strong>。<br>看下面这个显示时间的例子,每秒钟都会执行一次ReactDOM.render() </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tick</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> element = (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;new Date().toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  );</div><div class="line">  ReactDOM.render(</div><div class="line">    element,</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</div><div class="line">  );</div><div class="line">&#125;</div><div class="line">setInterval(tick, <span class="number">1000</span>);</div></pre></td></tr></table></figure>
<p><strong>实际上，大多数React应用只会调用ReactDOM.render()一次,在接下来的章节中，我们会学习如何将这些代码封装到有状态的组件中。</strong></p>
<h2 id="React仅在必要时更新"><a href="#React仅在必要时更新" class="headerlink" title="React仅在必要时更新"></a>React仅在必要时更新</h2><p>尽管我们创建了一个描述整个UI树的元素，但只有内容改变的节点才被React DOM更新。因为<strong>ReactDOM会将元素及其子元素与之前的元素进行比较，并且只更新实际改变的DOM。</strong></p>
]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React快速开始 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[call、apply和bind函数的polyfill实现]]></title>
      <url>/call%E3%80%81apply%E5%92%8Cbind%E5%87%BD%E6%95%B0%E7%9A%84polyfill%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'chen'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> foo = &#123;</div><div class="line">	<span class="attr">name</span>: <span class="string">'chang'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">age,sex</span>)</span>&#123;</div><div class="line">	alert(<span class="keyword">this</span>.name + age + sex);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里有一个对象foo，一个函数sayHello，如果直接调用sayHello(),结果是弹出<code>chenundefinedundefined</code><br>我们希望调用函数sayHello,this能指向foo,通过this.name获得foo.name.<br><a id="more"></a><br>Javascript提供了几个改变函数this指向的方法，call、apply和ES5提出的bind.<br>如果我们要寄己实现这些方法的polyfill呢，我们知道作为对象的方法调用，方法内的this是指向对象实例的。<br>如果想让函数的this指向对象foo,可以让sayHello成为foo的属性，但在调用完成后要delete这个属性。</p>
<p>实现中要注意一点：</p>
<ul>
<li>在非严格模式下使用函数的apply()或call()方法时，第一个参数为null或undefined时，会被转换为全局对象，也就是在浏览器中this指向window            </li>
<li>在严格模式下，函数的this值始终是指定的值，也就是说第一个参数指定是null,this就是null。（JavaScript高级程序设计 附录B 严格模式 B.7 抑制this）</li>
</ul>
<p>那么执行下面代码会报错</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="meta">	'use strict'</span></div><div class="line">	sayHello.apply(<span class="literal">null</span>,[<span class="number">27</span>,<span class="string">'男'</span>])</div><div class="line">&#125;)()</div></pre></td></tr></table></figure>
<pre style="color:red">Uncaught TypeError: Cannot read property 'name' of null</pre>

<p>这里都按非严格模式来实现</p>
<h2 id="call函数"><a href="#call函数" class="headerlink" title="call函数"></a>call函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.call_ = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>)</span>&#123;</div><div class="line">	ctx = ctx || <span class="built_in">window</span>;</div><div class="line">    ctx.fn = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">let</span> args = [];</div><div class="line">    <span class="keyword">let</span> length = <span class="built_in">arguments</span>.length;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;length;i++)&#123;</div><div class="line">    	args.push(<span class="built_in">arguments</span>[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> result = ctx.fn(...args);</div><div class="line">    <span class="keyword">delete</span> ctx.fn;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//调用</span></div><div class="line">sayHello.call_(foo,<span class="number">25</span>,<span class="string">'女'</span>)  <span class="comment">//chang25女</span></div><div class="line">sayHello.call_(<span class="literal">null</span>,<span class="number">27</span>,<span class="string">'男'</span>) <span class="comment">//chen27男</span></div></pre></td></tr></table></figure>
<h2 id="apply函数"><a href="#apply函数" class="headerlink" title="apply函数"></a>apply函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.apply_ = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>)</span>&#123;</div><div class="line">	ctx = ctx || <span class="built_in">window</span>;</div><div class="line">	ctx.fn = <span class="keyword">this</span>;</div><div class="line">	<span class="keyword">let</span> args = <span class="built_in">arguments</span>[<span class="number">1</span>] || [];</div><div class="line">    <span class="keyword">let</span> result = ctx.fn(...args);</div><div class="line">    <span class="keyword">delete</span> ctx.fn;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//调用</span></div><div class="line">sayHello.apply_(foo,[<span class="number">25</span>,<span class="string">'女'</span>])  <span class="comment">//chang25女</span></div><div class="line">sayHello.apply_(<span class="literal">null</span>,[<span class="number">27</span>,<span class="string">'男'</span>]) <span class="comment">//chen27男</span></div></pre></td></tr></table></figure>
<h2 id="bind函数"><a href="#bind函数" class="headerlink" title="bind函数"></a>bind函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.bind_ = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>)</span>&#123;</div><div class="line">	<span class="keyword">let</span> _this = <span class="keyword">this</span>; <span class="comment">//this指向Function实例，即调用bind_的函数</span></div><div class="line">	<span class="keyword">let</span> outerArgs = <span class="built_in">Array</span>.prototype.slice.call_(<span class="built_in">arguments</span>,<span class="number">1</span>);</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">let</span> innerArgs = <span class="built_in">Array</span>.prototype.slice.call_(<span class="built_in">arguments</span>);</div><div class="line">		<span class="keyword">let</span> finalArgs = outerArgs.concat(innerArgs);</div><div class="line">		_this.apply_(ctx,finalArgs);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//调用</span></div><div class="line">fn = sayHello.bind_(foo,<span class="number">25</span>);</div><div class="line">fn(<span class="string">'女'</span>)  <span class="comment">//chang25女</span></div><div class="line"></div><div class="line">fn = sayHello.bind_(<span class="literal">null</span>,<span class="number">27</span>);</div><div class="line">fn(<span class="string">'男'</span>)  <span class="comment">//chen27男</span></div></pre></td></tr></table></figure>
<p><strong>注意</strong></p>
<ul>
<li>ctx是要改变的函数内部的执行环境，即this指向</li>
<li>每个函数在被调用时都会自动取得两个特殊变量：this和arguments,内部函数在搜索这两个变量时，只会搜索到其活动对象为止，永远不可能访问到外部函数中的这两个变量。如果想访问作用域链中的this和arguments，必须将他们的对象引用保存在另一个闭包能访问到的变量中。</li>
<li>ES6提供spread运算符 …，可将数组或类数组对象展开成一系列用逗号隔开的值</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li>JavaScript高级程序设计 第5章  引用类型 5.5.4  函数内部属性   this和arguments</li>
<li>JavaScript高级程序设计 第5章  引用类型 5.5.5  函数属性和方法 call()和apply()</li>
<li>JavaScript高级程序设计 第7章  函数表达式 7.2.2 （闭包）关于this对象）</li>
<li>JavaScript高级程序设计 第22章 高级技巧 22.1.4 函数绑定bind()</li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React快速开始（二）使用JSX]]></title>
      <url>/React%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E4%BD%BF%E7%94%A8JSX/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="https://facebook.github.io/react/docs/introducing-jsx.html" target="_blank" rel="external">Introducing JSX</a></p>
</blockquote>
<p>JSX，全称 JavaScript XML ，一种类XML语言，它是JavaScript的语法扩展。</p>
<p>没有使用JSX<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> element = React.createElement(</div><div class="line">  <span class="string">"h1"</span>,</div><div class="line">  <span class="literal">null</span>,</div><div class="line">  <span class="string">"Hello, world!"</span></div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>使用JSX<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div></pre></td></tr></table></figure></p>
<p>可以看出使用JSX可以让代码可读性更高、语义更清晰、更易维护。JSX类似于模板引擎，但功能更强大<br><a id="more"></a></p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><strong>1、可以在JSX中嵌入任何JavaScript表达式，方法是将其包装在花括号中。</strong></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> element = (<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;formatName(user)&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>);</div></pre></td></tr></table></figure>
<p><strong>2、将JSX分割成多行，可读性更好。</strong><br>这不是必需的，但在这样做的时候，建议把它放在括号中，以避免自动分号插入的陷阱。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> element = (</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></div><div class="line">    Hello, &#123;formatName(user)&#125;!</div><div class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p><strong>3、JSX也是一个表达式，编译后，JSX表达式就是常规的JavaScript对象。</strong><br>这意味着可以在if语句和for循环中使用JSX、将其分配给变量、接受它作为参数、并从函数返回它</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGreeting</span>(<span class="params">user</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (user) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;formatName(user)&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, Stranger.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>4、用JSX指定属性</strong><br>  引号和花括号不能同时使用<br>   <strong>注意: 在JSX中，属性使用驼峰式命名，例如class变为className,font-size变为fontSize</strong><br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用引号指定字符串作为属性</span></div><div class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">tabIndex</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line"><span class="comment">//使用花括号将JavaScript表达式嵌入到属性中</span></div><div class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;user.avatarUrl&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span>;</div></pre></td></tr></table></figure></p>
<p><strong>5、用JSX指定children</strong><br>  如果标签为空，则可以使用/&gt;关闭</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;user.avatarUrl&#125;</span> /&gt;</span>;</span></div></pre></td></tr></table></figure>
<p>  JSX标签也可以有children       </p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">const</span> element = (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Good to see you here.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">)</div></pre></td></tr></table></figure>
<p><strong>6、JSX可以防止脚本注入攻击，在JSX中嵌入用户输入是安全的</strong><br>默认情况下，React DOM会在渲染之前转义嵌入在JSX中的任何值，确保不会注入任何未明确写入应用程序的内容。 例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;'First &amp;middot; Second'&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>花括号中的内容并不会展示为 First · Second<br>在呈现之前，所有内容都将转换为字符串。 这有助于防止XSS（跨站点脚本）攻击。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> title = response.potentiallyMaliciousInput;</div><div class="line"><span class="comment">// 这样是安全的</span></div><div class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div></pre></td></tr></table></figure>
<p><strong>7、JSX的对象表示</strong><br>Babel将JSX编译成React.createElement（）调用。<br>这两个例子是一样的：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> element = (</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">"greeting"</span>&gt;</span></span></div><div class="line">    Hello, world!</div><div class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">);</div><div class="line">ReactDOM.render(element, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</div></pre></td></tr></table></figure>
<p>编译后：<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> element = React.createElement(</div><div class="line">  <span class="string">'h1'</span>,</div><div class="line">  &#123;<span class="attr">className</span>: <span class="string">'greeting'</span>&#125;,</div><div class="line">  <span class="string">'Hello, world!'</span></div><div class="line">);</div><div class="line">ReactDOM.render(element, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</div></pre></td></tr></table></figure></p>
<p>React.createElement（）会执行一些检查帮助你编写无错误代码，<br>它会创建一个基本类似于如下所示的对象：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注意：这个结构被简化了</span></div><div class="line"><span class="keyword">const</span> element = &#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'h1'</span>,</div><div class="line">  <span class="attr">props</span>: &#123;</div><div class="line">    <span class="attr">className</span>: <span class="string">'greeting'</span>,</div><div class="line">    <span class="attr">children</span>: <span class="string">'Hello, world'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>这些对象称为“React元素”</strong>, React读取这些对象，并使用它们构造DOM呈现页面最新状态。</p>
<p><strong>另外，使用ReactDOM.render()，React可以嵌入到使用其他JavaScript UI库的应用程序中。</strong></p>
<h2 id="JSX使用经验"><a href="#JSX使用经验" class="headerlink" title="JSX使用经验"></a>JSX使用经验</h2><h3 id="使用事件"><a href="#使用事件" class="headerlink" title="使用事件"></a>使用事件</h3><p>JSX采用驼峰写法来描述事件名称，例如onChange、onClick<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">'topic'</span> <span class="attr">onClick</span>=<span class="string">&#123;::this.clickHandler&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="使用样式"><a href="#使用样式" class="headerlink" title="使用样式"></a>使用样式</h3><p>样式属性名用-连接的都采用驼峰写法，例如font-size : fontSize,background-color:backgroundColor</p>
<ul>
<li><p>静态样式</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">'triangle'</span> <span class="attr">style</span>=<span class="string">&#123;&#123;display:</span>'<span class="attr">inline-block</span>'&#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>动态样式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> spanStyle = &#123;</div><div class="line">  <span class="attr">color</span>: <span class="string">'#ff6633'</span>,</div><div class="line">  <span class="attr">fontSize</span>: <span class="string">'14px'</span></div><div class="line">&#125;;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;display:(spanStyle?</span>'<span class="attr">inline-block</span>'<span class="attr">:</span>'<span class="attr">none</span>'),<span class="attr">...spanStyle</span>&#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用表达式"><a href="#使用表达式" class="headerlink" title="使用表达式"></a>使用表达式</h3><p>{}里面都是表达式，那就可以这样写</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">render()&#123;</div><div class="line">  <span class="keyword">return</span>(</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">          &#123;</div><div class="line">            this.state.show ? (</div><div class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>噢噢噢噢<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">            ) : null</div><div class="line">          &#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用注释"><a href="#使用注释" class="headerlink" title="使用注释"></a>使用注释</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">render()&#123;</div><div class="line">  <span class="keyword">return</span>(</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>噢噢噢噢<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        &#123;</div><div class="line">            //这里是注释</div><div class="line">        &#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React快速开始 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React快速开始（一）安装]]></title>
      <url>/React%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="https://facebook.github.io/react/docs/installation.html" target="_blank" rel="external">Installation</a><br><a href="https://facebook.github.io/react/docs/optimizing-performance.html" target="_blank" rel="external">Optimizing Performance</a></p>
</blockquote>
<p>打算把React官方文档翻译一遍，有可能也会加入一点自己的理解。翻译出来就不用每次都去看一坨英文了，长痛不如短痛，希望能坚持下去啦。~</p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>react很灵活，可用于各种项目。 可以使用它创建新的应用程序，也可以引入到现有的代码库中。看看下面哪一种方式是你需要的。</p>
<h3 id="如果只想试一试React"><a href="#如果只想试一试React" class="headerlink" title="如果只想试一试React"></a>如果只想试一试React</h3><p>如果只想试一试React，那就使用CodePen，不需要安装任何东西，直接写React代码就能看到效果。</p>
<p>可以试一下 <a href="https://codepen.io/gaearon/pen/rrpgNB?editors=0010" target="_blank" rel="external">Hello World example code</a></p>
<p>如果使用自己的文本编辑器，可以像下面这样写一个html文件，就可以在本地直接用浏览器打开看到效果。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/react@latest/dist/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/react-dom@latest/dist/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/babel-standalone@6.15.0/babel.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">      ReactDOM.render(</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</div><div class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</div><div class="line">      );</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="创建React应用程序"><a href="#创建React应用程序" class="headerlink" title="创建React应用程序"></a>创建React应用程序</h3><p>看这里 &gt;&gt; <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">create-react-app</a>，这是构建新的React单页应用程序的最佳方法，能够使用JavaScript最新特性</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install -g create-react-app</div><div class="line">create-react-app my-app</div><div class="line"></div><div class="line"><span class="built_in">cd</span> my-app</div><div class="line">npm start</div></pre></td></tr></table></figure>
<p>这样创建的应用程序是零配置的，没有使用babel和webpack</p>
<h3 id="在已有项目中引入React"><a href="#在已有项目中引入React" class="headerlink" title="在已有项目中引入React"></a>在已有项目中引入React</h3><p>一个经典的React项目应该具备这些：</p>
<ul>
<li><p>包管理器</p>
<p>  比如<a href="https://yarnpkg.com/zh-Hans/" target="_blank" rel="external">Yarn</a> 或者 <a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a>，使用它可以更方便的管理第三方包，并且很方便的安装和更新包</p>
</li>
<li><p>打包工具 </p>
<p>  比如<a href="https://webpack.js.org/" target="_blank" rel="external">webpack</a> 或者 <a href="http://browserify.org/" target="_blank" rel="external">Browserify</a>，它可以让你编写模块化代码并将各个模块打包在一起，以优化加载时间。</p>
</li>
<li><p>编译器</p>
<p>  如<a href="http://babeljs.io/" target="_blank" rel="external">Babel</a>， 可以将新的JavaScript特性编译成适用于旧版浏览器的JavaScript代码。</p>
</li>
</ul>
<p>在项目中安装React</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yarn init</div><div class="line">yarn add react react-dom</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install --save react react-dom</div><div class="line">npm init</div></pre></td></tr></table></figure>
<p>Yarn 和 npm 都是从<a href="https://www.npmjs.com/" target="_blank" rel="external">npm registry</a>下载包的</p>
<h2 id="开发和生产版本"><a href="#开发和生产版本" class="headerlink" title="开发和生产版本"></a>开发和生产版本</h2><p>默认情况下，React包含许多有用的警告，这些警告在开发中非常有用。<br>但是这会让项目更大更慢，所以部署项目到线上时应该使用开发版本。</p>
<p>那么怎样告诉你的网站使用正确的版本，最有效地配置生产构建过程呢？下面介绍了几种项目配置</p>
<h3 id="create-react-app"><a href="#create-react-app" class="headerlink" title="create-react-app"></a><a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">create-react-app</a></h3><pre><code>执行`npm run build`会在项目的build/目录生成生产版本代码，如果不是在生产环境，执行`npm start`
</code></pre><h3 id="引用外部文件"><a href="#引用外部文件" class="headerlink" title="引用外部文件"></a>引用外部文件</h3><p>下面引用的直接就是生产环境版本，注意只有 .min.js结尾的才是生产环境稳定版本</p>
<pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/react@15/dist/react.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/react-dom@15/dist/react-dom.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><h3 id="Brunch配置"><a href="#Brunch配置" class="headerlink" title="Brunch配置"></a>Brunch配置</h3><pre><code>安装插件uglify-js-brunch 

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//If you use npm</div><div class="line">npm install --save-dev uglify-js-brunch</div><div class="line">//If you use Yarn</div><div class="line">yarn add --dev uglify-js-brunch</div></pre></td></tr></table></figure>

然后使用`brunch build -p`构建
</code></pre><h3 id="Browserify配置"><a href="#Browserify配置" class="headerlink" title="Browserify配置"></a>Browserify配置</h3><pre><code>安装几个插件

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//If you use npm</div><div class="line">npm install --save-dev bundle-collapser envify uglify-js uglifyify </div><div class="line">//If you use Yarn</div><div class="line">yarn add --dev bundle-collapser envify uglify-js uglifyify</div></pre></td></tr></table></figure>

执行时带上这些transforms

    * [envify](https://github.com/hughsk/envify)
    * [uglifyify](https://github.com/hughsk/uglifyify)
    * [bundle-collapser](https://github.com/substack/bundle-collapser)
    * 最后结果都pipe到uglify-js 
例如:

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">browserify ./index.js \</div><div class="line">  -g [ envify --NODE_ENV production ] \</div><div class="line">  -g uglifyify \</div><div class="line">  -p bundle-collapser/plugin \</div><div class="line">  | uglifyjs --compress --mangle &gt; ./bundle.js</div></pre></td></tr></table></figure>
</code></pre><h3 id="Rollup配置"><a href="#Rollup配置" class="headerlink" title="Rollup配置"></a>Rollup配置</h3><pre><code>安装插件

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//If you use npm</div><div class="line">npm install --save-dev rollup-plugin-commonjs rollup-plugin-replace rollup-plugin-uglify</div></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//If you use Yarn</div><div class="line">yarn add --dev rollup-plugin-commonjs rollup-plugin-replace rollup-plugin-uglify</div></pre></td></tr></table></figure>

再配置文件

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">plugins: [</div><div class="line">  // ...</div><div class="line">  require(&apos;rollup-plugin-replace&apos;)(&#123;</div><div class="line">    &apos;process.env.NODE_ENV&apos;: JSON.stringify(&apos;production&apos;)</div><div class="line">  &#125;),</div><div class="line">  require(&apos;rollup-plugin-commonjs&apos;)(),</div><div class="line">  require(&apos;rollup-plugin-uglify&apos;)(),</div><div class="line">  // ...</div><div class="line">]</div></pre></td></tr></table></figure>
</code></pre><h3 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h3><pre><code>例如,  
`npm run build`会根据生产版本配置文件webpack.config.js构建,  
`npm run dev`会根据开发配置文件webpack-dev.config.js构建   
在生产版本配置文件webpack.config.js中配置如下插件，需要生产版本就执行`npm run build`，平时开发就执行`npm run dev`

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">new webpack.DefinePlugin(&#123;</div><div class="line">  &apos;process.env&apos;: &#123;</div><div class="line">    NODE_ENV: JSON.stringify(&apos;production&apos;)</div><div class="line">  &#125;</div><div class="line">&#125;),</div><div class="line">new webpack.optimize.UglifyJsPlugin()</div></pre></td></tr></table></figure>
</code></pre>]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React快速开始 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Hexo+GitHub搭建静态博客]]></title>
      <url>/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>一直都想有个自己的空间写写东西，现在终于动起来啦~<br>网上找了好久的教程，选择方案也有很多，最后还是觉得基于GitHub，用Hexo来搭建最省事。（ps: 一开始还想自己写个主题来着，后来写哭了。。太费时费力）<br>关于主题的选择也是纠结了很久，一直找不到喜欢的主题，这个博客主题也是无意在一个网友的个人博客看到的，有了喜欢的主题，我才开始搭建这个博客。。。<br><a id="more"></a><br>来记录一下博客搭建的过程吧~<br>首先，使用任何有官方的东东都别忘了去官网溜一圈，<a href="https://hexo.io/" target="_blank" rel="external">Hexo官网</a>，还有<a href="https://hexo.io/docs/" target="_blank" rel="external">官方文档</a>和<a href="https://hexo.io/themes/" target="_blank" rel="external">官网提供的主题</a><br><!-- more --></p>
<h3 id="这样只能本地查看个人博客"><a href="#这样只能本地查看个人博客" class="headerlink" title="这样只能本地查看个人博客"></a>这样只能本地查看个人博客</h3><h4 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h4><pre><code>npm install hexo-cli -g
</code></pre><h4 id="新建项目目录blog-并在此目录下初始化hexo"><a href="#新建项目目录blog-并在此目录下初始化hexo" class="headerlink" title="新建项目目录blog,并在此目录下初始化hexo"></a>新建项目目录blog,并在此目录下初始化hexo</h4><pre><code>mkdir blog
cd blog
hexo init
</code></pre><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><pre><code>npm install
</code></pre><h4 id="启动hexo"><a href="#启动hexo" class="headerlink" title="启动hexo"></a>启动hexo</h4><pre><code>hexo server
</code></pre><p>命令行会有提示，在浏览器地址栏输入<a href="http://localhost:4000，就能看到hexo的实例页面。" target="_blank" rel="external">http://localhost:4000，就能看到hexo的实例页面。</a></p>
<h3 id="这样就能让别人看到你的博客"><a href="#这样就能让别人看到你的博客" class="headerlink" title="这样就能让别人看到你的博客"></a>这样就能让别人看到你的博客</h3><h4 id="GitHub新建项目"><a href="#GitHub新建项目" class="headerlink" title="GitHub新建项目"></a>GitHub新建项目</h4><p>项目的名字得是这样： chang20159.github.io ，chang20159是github的账号</p>
<h4 id="编辑hexo的配置文件-config-yml"><a href="#编辑hexo的配置文件-config-yml" class="headerlink" title="编辑hexo的配置文件 _config.yml"></a>编辑hexo的配置文件 _config.yml</h4><pre><code># Deployment
## Docs: https://hexo.io/docs/deployment.html
deploy:
  type: git
  repo: git@github.com:chang20159/chang20159.github.io.git
  branch: master
</code></pre><p>注意：   </p>
<ul>
<li>type、repo、branch的前面有两个空格，后面的:后面有一个空格    </li>
<li>repo的值是上面创建的项目的github仓库地址<br>这样就把项目关联到这个github项目上了。</li>
</ul>
<h4 id="部署hexo"><a href="#部署hexo" class="headerlink" title="部署hexo"></a>部署hexo</h4><p>首先要安装git插件，这样才能把本地资源部署到github服务器上 </p>
<pre><code>npm install hexo-deployer-git --save
</code></pre><p>然后执行</p>
<pre><code>hexo deploy
</code></pre><p>现在可以打开<a href="https://chang20159.github.io/，并且别人也可以来访问了。" target="_blank" rel="external">https://chang20159.github.io/，并且别人也可以来访问了。</a></p>
<h3 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h3><p>发布的文章都在soource/_posts目录下，要写一篇文章可以直接在这个目录下新建一个markdown文件，也可以用这个命令</p>
<pre><code>hexo new &quot;使用Hexo+GitHub搭建静态博客&quot;
</code></pre><p>写好之后保存下来，依次执行下面的命令：</p>
<pre><code>hexo clean
hexo generate
hexo server
hexo deploy
</code></pre><p><a href="https://chang20159.github.io/就能看到最新文章。" target="_blank" rel="external">https://chang20159.github.io/就能看到最新文章。</a></p>
<p>可以先在本地写好再部署，执行hexo server后，在本地修改是可以实时更新到<a href="http://localhost:4000的" target="_blank" rel="external">http://localhost:4000的</a></p>
<h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>hexo默认的主题是landscape,我使用的主题是hexo-theme-next</p>
<h4 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h4><p>找到喜欢的主题，从github上clone到themes目录下，<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">https://github.com/iissnan/hexo-theme-next</a></p>
<h4 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h4><p>编辑_config.yml文件</p>
<pre><code># Extensions
## Plugins: https://hexo.io/plugins/
## Themes: https://hexo.io/themes/
theme: hexo-theme-next
</code></pre><p>theme的值设置成主题名，保存后重新部署就好了。<br>hexo-theme-next这个主题功能蛮强大的，现在有三种页面模式，改一个配置相当于换一个主题，只要在主题的配置文件中设置这个字段</p>
<pre><code># Schemes
# scheme: Muse
# scheme: Mist
scheme: Pisces
</code></pre><p>它还有很全的配置文档。</p>
<ul>
<li><a href="http://notes.iissnan.com/" target="_blank" rel="external">hexo-theme-next 作者博客</a></li>
<li><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">hexo-theme-next GitHub</a></li>
<li><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">hexo-theme-next 配置文档</a></li>
</ul>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul>
<li><a href="http://www.jianshu.com/p/ce1619874d34" target="_blank" rel="external">静态博客框架之Hexo &amp; Jekyll</a></li>
<li><a href="https://maintao.com/2014/hexo-theme-from-scratch/" target="_blank" rel="external">从零开始定制hexo主题</a></li>
<li><a href="https://segmentfault.com/a/1190000005590795" target="_blank" rel="external">手把手教从零开始在GitHub上使用Hexo搭建博客教程(一)-附GitHub注册及配置</a></li>
<li><a href="https://segmentfault.com/a/1190000005609509" target="_blank" rel="external">手把手教从零开始在GitHub上使用Hexo搭建博客教程(二)-Hexo参数设置</a></li>
<li><a href="https://www.aswifter.com/2016/01/18/hexo-themes/" target="_blank" rel="external">Hexo博客主题推荐</a></li>
<li><a href="https://leancloud.cn/" target="_blank" rel="external">leancloud官网</a></li>
<li><a href="http://duoshuo.com/" target="_blank" rel="external">多说官网</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 静态博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【阅读笔记】JavaScript高级程序设计-面向对象]]></title>
      <url>/%E3%80%90%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E3%80%91JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p>什么是对象？怎样创建对象？<br>构造函数、原型和实例之间有什么关系？原型链是怎样构成的？<br>JavaScript是怎样实现继承的？<br>如果不清楚，那就多看几遍【JavaScript高级程序设计】<br><a id="more"></a></p>
<h2 id="原始值"><a href="#原始值" class="headerlink" title="原始值"></a>原始值</h2><p>JavaScript中的原始值有：undefined、null、字符串、数字、布尔值。对象有函数、数组等。对象可以访问自己的属性和方法，原始值也可以访问属性和方法    </p>
<pre><code>&gt; var str = &quot;chang&quot;;
str.concat(&quot;20159&quot;);
&lt; &quot;chang20159&quot;
</code></pre><!-- more -->
<p>只要引用字符串的属性，javascript就会将字符串值通过调用new String(str)的方式转换成对象，这个对象继承了String的方法，并被用来处理属性的引用。一旦属性引用结束，这个新创建的对象就会销毁。数字和布尔值也有同样的方法new Number()和new Boolean().</p>
<p>访问字符串、数字或布尔值的属性和方法时创建的临时对象称为包装对象</p>
<p>如果执行下面的代码：</p>
<pre><code>&gt; var str = &quot;chang&quot;;
str.len = 5;
console.log(&quot;str is &quot;,str);
console.log(&quot;str.len is &quot;,str.len);

&lt; str is chang
str.len is undefined
</code></pre><p>说明字符串原始值虽然能够调用方法，但并不是对象，对属性赋值会被忽略。</p>
<p>如果直接使用构造函数创建字符串对象，则可以给这个对象赋值。运行以下代码可以看出str对象新增了属性len,值为5。</p>
<pre><code>&gt; var str = new String(&quot;chang&quot;);
str
&lt; String {0: &quot;c&quot;, 1: &quot;h&quot;, 2: &quot;a&quot;, 3: &quot;n&quot;, 4: &quot;g&quot;, length: 5, [[PrimitiveValue]]: &quot;chang&quot;}     
0: &quot;c&quot;
1: &quot;h&quot;
2: &quot;a&quot;
3: &quot;n&quot;
4: &quot;g&quot;
length: 5
__proto__: String
[[PrimitiveValue]]: &quot;chang&quot;


&gt; str.len = 5;
str
&lt; String {0: &quot;c&quot;, 1: &quot;h&quot;, 2: &quot;a&quot;, 3: &quot;n&quot;, 4: &quot;g&quot;, len: 5, length: 5, [[PrimitiveValue]]: &quot;chang&quot;}
0: &quot;c&quot;
1: &quot;h&quot;
2: &quot;a&quot;
3: &quot;n&quot;
4: &quot;g&quot;
len: 5
length: 5
__proto__: String
[[PrimitiveValue]]: &quot;chang&quot;
</code></pre><p>原始值与对象的区别</p>
<ul>
<li>原始值是不可变的，对象是可修改的。</li>
<li>相同值的原始值和对象相等但不严格相等</li>
<li>对于字符串来说，原始值的数据类型是string,对象的数据类型是object</li>
</ul>
<p>代码如下</p>
<pre><code>&gt; var str1 = &quot;chang&quot;;
var str2 = new String(&quot;chang&quot;);
console.log(&quot;str1 == str2&quot;,str1 == str2);
console.log(&quot;str1 === str2&quot;,str1 === str2);
console.log(&quot;typeof str1 :&quot;, typeof str1);
console.log(&quot;typeof str2 :&quot;, typeof str2);

&lt; str1 == str2 true
str1 === str2 false
typeof str1 : string
typeof str2 : object
</code></pre><p><strong>注: typeof的返回值一般是这些： number,string, boolean,object,function,undefined</strong></p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>ECMA-262 把对象定义为:“无序属性的集合，其属性可以包含基本值、对象或者函数。每个对象都是基于一个引用类型创建的</p>
<h3 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h3><p><strong>属性的增删改查</strong><br>添加属性</p>
<pre><code>profile.age = 100;
</code></pre><p>删除属性 </p>
<pre><code>delete profile.name;
</code></pre><p>设置属性值 </p>
<pre><code>profile.age = 24;
</code></pre><p>查看属性值</p>
<ul>
<li>. 点运算符  book.name</li>
<li><p>[]运算符  book[‘name’]  []括号内必须是字符串或可转为字符串</p>
<p>  profile.age;<br>  或 profile[“age”];<br>检测属性<br>in运算符用来检测对象中是否包含属性（自有属性和继承属性）</p>
<p>  “age” in profile<br>可以用对象的hasOwnProperty()检测是否自有属性</p>
<p>  profile.hasOwnProperty(“age”);<br>  profile.hasOwnProperty(“toString”);</p>
</li>
</ul>
<p>注意：   </p>
<ul>
<li>全局范围内定义的属性无法删除</li>
<li>delete运算符只能删除自有属性，不能删除继承属性</li>
</ul>
<p><strong>属性特性</strong><br>1、数据属性特性</p>
<ul>
<li>[[Configurable]] 是否可配置</li>
<li>[[Enumerable]]   是否可枚举（for…in）</li>
<li>[[Writable]]     是否可修改属性值</li>
<li>[[Value]]        属性的数据值</li>
</ul>
<p>2、访问器属性特性</p>
<ul>
<li>[[Configurable]] 是否可配置</li>
<li>[[Enumerable]]   是否可枚举（for…in）</li>
<li>[[Get]]         读取属性时调用</li>
<li>[[Set]]         写入属性时调用</li>
</ul>
<p><strong>相关方法</strong>    </p>
<ul>
<li>Object.defineProperty(object,name,{..属性特性})   设置属性特性</li>
<li>Object.defineProperties(object,{..})  设置属性特性</li>
<li>Object.getOwnPropertyDescriptor(object,name) 获得自有属性的特性</li>
</ul>
<p>例: 下面定义了一个对象的属性，p是没有自有属性的，使用Object.defineProperty（）方法后创建了自有属性，x和y是数据属性，z是访问器属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var p = Object.defineProperties(&#123;&#125;,&#123;</div><div class="line">    x: &#123; value:1, writable:true,enumerable:true,configurable:true&#125;,</div><div class="line">    y: &#123; value:2, writable:true,enumerable:true,configurable:true&#125;,</div><div class="line">    z: &#123;</div><div class="line">        get: function()&#123; return Math.sqrt(this.x * this.x + this.y * this.y )&#125;,</div><div class="line">        set: function(val)&#123;this.x=val&#125;,</div><div class="line">        enumerable:true,</div><div class="line">        configurable:true</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><h3 id="对象直接量"><a href="#对象直接量" class="headerlink" title="对象直接量"></a>对象直接量</h3><p>对象原型：Object.prototype</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let person = &#123;</div><div class="line">      name : &apos;chang&apos;,</div><div class="line">      age : 25</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>对象原型：Object.prototype   </p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function createPerson(name,age)&#123;</div><div class="line">    let o = new Object();</div><div class="line">    o.name = name,</div><div class="line">    o.age = age</div><div class="line">    o.sayHello = function()&#123;</div><div class="line">        console.log(`I am $&#123;this.name&#125;`)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">let person1 = createPerson(&apos;chang&apos;,25);</div><div class="line">let person2 = createPerson(&apos;chen&apos;,27);</div></pre></td></tr></table></figure>
</code></pre><h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><p>对象原型：Person.prototype<br>Person.prototype == person1._ <em>proto</em> <em><br>person1.</em> <em>proto</em> _ == person1.constructor.prototype    </p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function Person(name,age)&#123;</div><div class="line">    this.name = name,</div><div class="line">    this.age = age</div><div class="line">    this.sayHello = function()&#123;</div><div class="line">        console.log(`I am $&#123;this.name&#125;`)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">let person1 = new Person(&apos;chang&apos;,25);</div><div class="line">let person2 = new Person(&apos;chen&apos;,27);</div></pre></td></tr></table></figure>
</code></pre><p><strong>构造函数模式与工厂模式的不同之处</strong></p>
<ul>
<li>没有显示创建对象</li>
<li>直接将属性和方法付给了this对象</li>
<li>没有return返回</li>
</ul>
<p>注意：构造函数应该习惯用大写开头 区别于其他函数</p>
<p><strong>new一个实例的过程</strong></p>
<ul>
<li>创建一个新对象</li>
<li>将构造函数的作用域赋给新对象,使this指向新对象</li>
<li>执行构造函数，为新对象添加属性</li>
<li>返回新对象</li>
</ul>
<p><strong>将构造函数作为普通函数调用</strong><br>任何函数，只要通过 new 操作符来调用，那它就可以作为构造函数;<br>任何函数，如果不通过 new 操作符来调用，就跟普通函数一样。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">let person1 = new Person(&apos;chang&apos;,25);  //this指向新建对象</div><div class="line">person.sayHello(); //I am chang</div><div class="line"></div><div class="line">Person(&apos;chang&apos;,25); //this指向Global对象 浏览器中就是window对象</div><div class="line">window.sayHello(); //I am chang</div><div class="line"></div><div class="line">let o = new Object();  //this指向另一个对象</div><div class="line">Person.call(o,&apos;chang&apos;,25);</div></pre></td></tr></table></figure>
<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function Person()&#123;&#125;</div><div class="line">Person.prototype.name = &quot;Nicholas&quot;;</div><div class="line">Person.prototype.age = 29;</div><div class="line">Person.prototype.job = &quot;Software Engineer&quot;;</div><div class="line">Person.prototype.sayName = function()&#123;</div><div class="line">    alert(this.name);</div><div class="line">&#125;;</div><div class="line">var person1 = new Person();</div><div class="line">person1.sayName();   //&quot;Nicholas&quot;</div><div class="line">var person2 = new Person();</div><div class="line">person2.sayName(); //&quot;Nicholas&quot;</div><div class="line">alert(person1.sayName == person2.sayName);  //true</div></pre></td></tr></table></figure>
<p>原型模式的特点是不需要向构造函数传入初始化参数，<br>但也因为所有参数都在原型中，被实例共享，所有实例的属性值都相同<br>特别是当属性是一个引用时，实例1修改了引用指向的数据，实例2中的引用指向的数据同时会被修改<br>因此一般不会用原型模式创建对象</p>
<p><strong>关于原型</strong></p>
<p>每创建一个函数，就会同时创建它的 prototype 对象，这个对象也会自动获得一个默认的 constructor 属性。<br>Person.prototype.constructor == Person<br>实例可以访问原型属性<br>因此person1.constructor == Person</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Person.prototype</div><div class="line">    &gt;Object &#123;constructor: function&#125;</div><div class="line">        &gt;constructor:function Person(name,age)</div><div class="line">        &gt;__proto__:Object</div></pre></td></tr></table></figure>
<p>注意：如果在已经创建了实例的情况下重写原型，会切断现有实例与新原型之间的联系<br>例如：<br>重写了Person.prototype，Person.prototype.constructor也不再指向Person,<br>但person instanceof Person == true</p>
<p><strong>对象实例访问保存在原型中的值，但却不能通过对象实例重写原型中的值，会创建新属性，覆盖原型中的同名属性</strong></p>
<p><strong>属性相关方法</strong>  </p>
<ul>
<li>person1.hasOwnProperty(‘name’) </li>
<li>‘name’ in person1  in操作符可访问对象可访问可枚举的所有属性</li>
<li>for…in  遍历对象可访问可枚举的所有属性</li>
<li>Object.keys(o)  获取可枚举的自有属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//判断属性是在实例中还是在原型中</div><div class="line">function hasPrototypeProperty(object, name)&#123;</div><div class="line">        return !object.hasOwnProperty(name) &amp;&amp; (name in object);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="组合使用构造函数模式和原型模式"><a href="#组合使用构造函数模式和原型模式" class="headerlink" title="组合使用构造函数模式和原型模式"></a>组合使用构造函数模式和原型模式</h3><p> 构造函数模式用于定义实例属性，<br> 而原型模式用于定义方法和共享的属性,<br> 这是最合适的创建对象的方法</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> function Person(name, age)&#123;</div><div class="line">    this.name = name; </div><div class="line">    this.age = age;</div><div class="line">    this.friends = [];</div><div class="line">  &#125;</div><div class="line">    Person.prototype = &#123;</div><div class="line">    constructor : Person,</div><div class="line">    sayName : function()&#123;</div><div class="line">        alert(this.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var person1 = new Person(&quot;chang&quot;, 25);</div><div class="line">var person2 = new Person(&quot;chen&quot;, 27);</div><div class="line">person1.friends.push(&quot;wang&quot;);</div><div class="line">alert(person1.friends);    //&quot;Shelby,Count,Van&quot;</div><div class="line">alert(person2.friends);    //&quot;Shelby,Count&quot;</div><div class="line">alert(person1.friends === person2.friends); //false</div><div class="line">alert(person1.sayName === person2.sayName); //true</div></pre></td></tr></table></figure>
<h3 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h3><p>在构造函数中初始化原型（如果必要）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function Person(name, age)&#123;</div><div class="line">    this.name = name; </div><div class="line">    this.age = age;</div><div class="line">    if (typeof this.sayName != &quot;function&quot;)&#123;</div><div class="line">        Person.prototype.sayName = function()&#123;</div><div class="line">            alert(this.name);</div><div class="line">        &#125;;</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>ECMAScript是基于原型链继承的</p>
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>理解原型链，首先要清楚 构造函数、原型和实例的关系。<br>每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。</p>
<p>如果这个原型对象是另一个类型的实例，那这个原型对象内部也有一个指针指向另一个原型对象，这样层层递进，就形成了最初那个实例的一个原型链。</p>
<p>注意：所有函数的默认原型都是 Object 的实例，因此默认原 型都会包含一个内部指针，指向 Object.prototype。</p>
<p>实现原型链有一种基本模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function SuperType()&#123;</div><div class="line">        this.property = true;</div><div class="line">&#125;</div><div class="line">SuperType.prototype.getSuperValue = function()&#123;</div><div class="line">    return this.property;</div><div class="line">&#125;;</div><div class="line">function SubType()&#123;</div><div class="line">    this.subproperty = false;</div><div class="line">&#125;</div><div class="line">//继承了 SuperType</div><div class="line">SubType.prototype = new SuperType();</div><div class="line">SubType.prototype.getSubValue = function ()&#123;</div><div class="line">    return this.subproperty;</div><div class="line">&#125;;</div><div class="line">var instance = new SubType();</div><div class="line">alert(instance.getSuperValue());</div><div class="line">//true</div></pre></td></tr></table></figure>
<p>注意<br>instance.constructor现在指向的是SuperType，因为<br>instance.constructor读取的是instance的原型对象上的constructor<br>instance的原型对象是SuperType的实例<br>SuperType的实例的constructor指向SuperType<br>所以 instance.constructor指向SuperType</p>
<p>啊 晕不晕 反正我是晕了</p>
<p>最后，原型链有哪些问题？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function SuperType()&#123;</div><div class="line">   this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];</div><div class="line">&#125;</div><div class="line">function SubType()&#123;&#125;</div><div class="line">//继承了 SuperType</div><div class="line">SubType.prototype = new SuperType();</div><div class="line">var instance1 = new SubType(); </div><div class="line">instance1.colors.push(&quot;black&quot;); alert(instance1.colors); //&quot;red,blue,green,black&quot;</div><div class="line">var instance2 = new SubType(); alert(instance2.colors); //&quot;red,blue,green,black&quot;</div></pre></td></tr></table></figure>
<p>可以看到SubType的原型是SuperType的实例，具有实例属性colors = [“red”, “blue”, “green”]，这是个引用类型值，instance1改变colors的值时也会影响instance2</p>
<p>两个问题：<br>1、原型链中如果包含引用类型值的，当被一个实例修改时，会反应在其他实例上，因为原型的属性是共享的<br>2、在创建子类型的实例时，没有办法在不影响所有对象实例的情况下，给超类型的构造函数传递参数</p>
<p>因此，实践中很少会单独使用原型链实现继承</p>
<h3 id="借用构造函数（经典继承）"><a href="#借用构造函数（经典继承）" class="headerlink" title="借用构造函数（经典继承）"></a>借用构造函数（经典继承）</h3><p>在子类型构造函数的内部调用超类型构造函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function SuperType(name)&#123;</div><div class="line">    this.name = name;</div><div class="line">    this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];</div><div class="line">&#125;</div><div class="line">function SubType(name)&#123;</div><div class="line">    //继承了 SuperType</div><div class="line">    SuperType.call(this,name);</div><div class="line">&#125;</div><div class="line">var instance1 = new SubType(&apos;chang&apos;);</div><div class="line">instance1.colors.push(&quot;black&quot;); </div><div class="line">console.log(instance1.name)  //chang</div><div class="line">console.log(instance1.colors);    //&quot;red,blue,green,black&quot;</div><div class="line">var instance2 = new SubType(&apos;chen&apos;); //chang</div><div class="line">console.log(instance2.name)</div><div class="line">console.log(instance2.colors);    //&quot;red,blue,green&quot;</div></pre></td></tr></table></figure>
<p>通过使用call()方法或apply()方法，<br>在(未来将要)新创建 SubType 实例的环境下调用了 SuperType 构造函数,<br>让SubType的每个实例就都具有自己的 colors 属性的副本，<br>也解决了原型链中子类型无法给超类型的构造函数传递参数的问题</p>
<p>但是如果只是借用构造函数，所有的超类型都在构造函数中定义，就无法链式继承或复用了。所以一般页不会单独只借用构造函数</p>
<h3 id="原型链和构造函数组合继承"><a href="#原型链和构造函数组合继承" class="headerlink" title="原型链和构造函数组合继承"></a>原型链和构造函数组合继承</h3><p>将原型链和借用构造函数的技术组合到一块，使用原型链实现对原型属性和方 法的继承，而通过借用构造函数来实现对实例属性的继承</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[隐藏元素的几种方法及应用]]></title>
      <url>/%E9%9A%90%E8%97%8F%E5%85%83%E7%B4%A0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>隐藏元素的方法有很多，能想到的就有一大摞，像display、opacity、visibility、height、position这些属性都可以达到隐藏元素的效果，但并不是光光把元素隐藏看不见就完事儿了，还得考虑应用场景。整理了几个隐藏元素的方法，以及它们有什么区别，可用于什么样的场景。<br><a id="more"></a></p>
<p>这里主要介绍的方法有：</p>
<ul>
<li>display:none;</li>
<li>height:0;</li>
<li>opacity:0;</li>
<li>visibility:hidden;</li>
<li>HTML全局属性hidden</li>
</ul>
<p>像position:absolute;left:-9999px;这样的用法也可以隐藏元素，但我想不到它可以应用的场景，就不讲了。</p>
<h2 id="隐藏元素"><a href="#隐藏元素" class="headerlink" title="隐藏元素"></a>隐藏元素</h2><p><strong>在隐藏元素之前长这样,后面会将div2隐藏，div2隐藏的后代设置测试株连性（div2隐藏后，div2的后代是否还有可见的机会）</strong></p>
<div style="border: 2px solid #8973de;color:#fff;"><div style="width: 100%;
            height: 50px;
            background-color: #579326;">div1</div><div style="width: 100%;
            height: 100px;
            background-color: #df7832;">div2<div style="width: 100%;
            height: 50px;
            background-color: #43298d;">div2的后代</div> </div></div> 

<h3 id="display-none"><a href="#display-none" class="headerlink" title="display:none;"></a>display:none;</h3><p>为什么display:none;可以隐藏元素，看官方文档的解释：</p>
<p>display属性：指定建立布局时元素生成的显示框类型</p>
<blockquote>
<p>The display property specifies the type of box used for an element.</p>
</blockquote>
<p>display:none;</p>
<blockquote>
<p>This value causes an element to not appear in the formatting structure (i.e., in visual media the element generates no boxes and has no effect on layout). Descendant elements do not generate any boxes either; the element and its content are removed from the formatting structure entirely. This behavior cannot be overridden by setting the ‘display’ property on the descendants.<br>Please note that a display of ‘none’ does not create an invisible box; it creates no box at all. CSS includes mechanisms that enable an element to generate boxes in the formatting structure that affect formatting but are not visible themselves. Please consult the section on visibility for details.</p>
</blockquote>
<p>这段关于有display:none;的元素的解释有以下几点：<br>1、该元素不会生成box，不占据空间，直接从格式化结构中移除了<br>2、该元素的后代元素也不会生成box，即使给后代元素设置display属性为非none值也没有用<br>3、注意display:none;不是生成一个不可见的box,它根本就没有生成box<br>4、css提供了可以让元素生成一个不可见box的机制，visibility属性就可以实现这个机制</p>
<p>所以display:none;让元素不可见的原因是因为根本就没有生成box,这个元素从格式化结构中移除了</p>
<p>下面设置了div2  display:none;  div2的后代 display:block; 但都是不可见的，不占据空间，当然也不会响应交互,div2的后代无法改变不可见状态</p>
<div style="border: 2px solid #8973de;color:#fff;"><div style="width: 100%;
height: 50px;
background-color: #579326;">div1</div><div style="width: 100%;
height: 100px;
background-color: #df7832;
display:none;">div2  display:none;<div style="width: 100%;
height: 50px;
background-color: #43298d;
display:block;">div2的后代 display:block;</div> </div></div> 

<p>jquery中的hide()、show()、toggle()都是通过控制display:none实现的，使用display:none来隐藏元素会是页面重绘和回流</p>
<h3 id="visibility-hidden"><a href="#visibility-hidden" class="headerlink" title="visibility:hidden;"></a>visibility:hidden;</h3><p>visibility属性：控制由该元素生成的box是否被渲染</p>
<blockquote>
<p>The ‘visibility’ property specifies whether the boxes generated by an element are rendered. Invisible boxes still affect layout (set the ‘display’ property to ‘none’ to suppress box generation altogether)</p>
</blockquote>
<p>visibility:hidden; </p>
<blockquote>
<p>The generated box is invisible (fully transparent, nothing is drawn), but still affects layout. Furthermore, descendants of the element will be visible if they have ‘visibility: visible’.</p>
</blockquote>
<p>这段的解释是：<br>1、生成的box是完全不可见的，完全透明，没有绘制，但不影响布局，仍然占据空间。<br>2、然而这个元素的后代是可以通过设置visibility:visible变成可见的</p>
<p>下面这个就是设置了div2 visibility:hidden;  div2的后代设置了 visibility:visible; 并且给div2设置了:hover{visibility:visible; }<br>可见visibility:hidden;使元素隐藏了，但还是占据空间的,把光标放到div2占据的空白处试试看，没有反应说明隐藏后不会响应交互(将光标放在div2的后代上是可以响应交互的)，div2的后代可以设置visibility:visible;改变不可见状态</p>
<div style="border: 2px solid #8973de;color:#fff;"><div style="width: 100%;
height: 50px;
background-color: #579326;">div1</div><div class="visibility" style="width: 100%;
height: 100px;
background-color: #df7832;">div2  visibility:hidden;<div style="width: 100%;
height: 50px;
background-color: #43298d;
display:block;
visibility:visible;">div2的后代 visibility:visible;</div> </div></div> 

<h3 id="height-0"><a href="#height-0" class="headerlink" title="height:0;"></a>height:0;</h3><p>其实width:0;max-height:0;max-width:0;都可以使元素不可见，一般都用height:0;<br>使用height:0;隐藏元素，不占据空间，也不会响应交互<br>下面设置了div2 height:0;div2的后代 height: 50px;div2的后代可以设置height为非0值改变不可见状态</p>
<div style="border: 2px solid #8973de;color:#fff;"><div style="width: 100%;height: 50px;background-color: #579326;" onclick="javascript:$('#div2').css('height','100px')">我是div1，点我看div2</div><div style="width: 100%;
            background-color: #df7832;
            height:0;
            transition: height .5s; color:#666" id="div2">div2 height:0<div style="width: 100%;
            height: 50px;
            background-color: #43298d;">div2的后代 height: 50px;</div></div></div> 

<p><br><br><br></p>
<h3 id="opacity-0"><a href="#opacity-0" class="headerlink" title="opacity:0;"></a>opacity:0;</h3><p>opacity设置元素的透明度，当透明度为0时就看不见了，但仍然占据空间。<br><strong>把光标放在div1原本的位置（div2上方的空白处）试试看</strong>，opacity:0;是可以响应交互的。div2的后代无法改变不可见状态</p>
<div style="border: 2px solid #8973de;color:#fff;"><div style="width: 100%;
            height: 50px;
            background-color: #579326;">div1</div><div style="width: 100%;
            height: 100px;
            background-color: #df7832;
            transition: opacity .5s;" class="opacity">div2 opacity:0;<div style="width: 100%;
            height: 50px;
            background-color: #43298d;opacity:1;">div2的后代 opacity:1;</div> </div></div> 

<h3 id="HTML全局属性hidden"><a href="#HTML全局属性hidden" class="headerlink" title="HTML全局属性hidden"></a>HTML全局属性hidden</h3><p>这里隐藏了div1，用HTML全局属性hidden隐藏元素不占据空间,div2的后代无法改变不可见状态</p>
<div style="border: 2px solid #8973de;color:#fff;"><div style="width: 100%;
            height: 50px;
            background-color: #579326;">div1</div><div style="width: 100%;
            height: 100px;
            background-color: #df7832;" hidden>div2<div style="width: 100%;
            height: 50px;
            background-color: #43298d;" hidden="false">div2的后代</div> </div></div> 

<h2 id="各种方法比较"><a href="#各种方法比较" class="headerlink" title="各种方法比较"></a>各种方法比较</h2><p>看过每种方法隐藏元素之后的现象，可以从这几个方面来比较，在选择使用哪种方法时也可以参考这几个方面</p>
<ul>
<li>是否占据空间</li>
<li>是否响应交互</li>
<li>是否触发回流与渲染</li>
<li>是否有株连性</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">隐藏方法</th>
<th style="text-align:left">是否占据空间</th>
<th style="text-align:left">是否响应交互</th>
<th style="text-align:left">是否触发回流</th>
<th style="text-align:left">是否触发重绘</th>
<th>是否有株连性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">display:none;</td>
<td style="text-align:left">否</td>
<td style="text-align:left">否</td>
<td style="text-align:left">是</td>
<td style="text-align:left">是</td>
<td>是</td>
</tr>
<tr>
<td style="text-align:left">visibility:hidden;</td>
<td style="text-align:left">是</td>
<td style="text-align:left">否</td>
<td style="text-align:left">否</td>
<td style="text-align:left">是</td>
<td>否</td>
</tr>
<tr>
<td style="text-align:left">height:0;</td>
<td style="text-align:left">否</td>
<td style="text-align:left">否</td>
<td style="text-align:left">是</td>
<td style="text-align:left">是</td>
<td>否</td>
</tr>
<tr>
<td style="text-align:left">opacity:0;</td>
<td style="text-align:left">是</td>
<td style="text-align:left">是</td>
<td style="text-align:left">否</td>
<td style="text-align:left">是</td>
<td>是</td>
</tr>
<tr>
<td style="text-align:left">HTML属性hidden</td>
<td style="text-align:left">否</td>
<td style="text-align:left">否</td>
<td style="text-align:left">是</td>
<td style="text-align:left">是</td>
<td>是</td>
</tr>
</tbody>
</table>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.w3.org/TR/css3-color/#transparency" target="_blank" rel="external">opacity</a></li>
<li><a href="https://www.w3.org/wiki/CSS/Properties/visibility" target="_blank" rel="external">visibility</a></li>
<li><a href="https://www.w3.org/wiki/CSS/Properties/display" target="_blank" rel="external">display</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/rendering/" target="_blank" rel="external">渲染性能</a></li>
<li><a href="https://csstriggers.com/" target="_blank" rel="external">CSS Triggers</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git基础]]></title>
      <url>/Git%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p>Git是一个版本控制与管理工具。在Mac OS X上可以使用Homebrew安装Git。关于Homebrew的安装参见<a href="http://brew.sh/" target="_blank" rel="external">Homebrew 官网</a>。安装完成后，终端执行brew install git。然后就可以开始使用git啦~~<br><a id="more"></a></p>
<h2 id="文件的三种状态"><a href="#文件的三种状态" class="headerlink" title="文件的三种状态"></a>文件的三种状态</h2><p>git保存的不是文件差异，而是一系列的文件快照.    在git版本控制系统中，任何一个文件都有三种状态：</p>
<ul>
<li>已修改(modified) 表明文件被修改，但没有提交保存（工作目录）</li>
<li>已暂存(staged)   表明已修改的文件放在下次提交需要保存的清单中（暂存区域，本质是一个简单的文件）</li>
<li>已提交(committed)  表明该文件已被安全的保存在本地仓库（本地仓库）<br><strong>一个已加入版本控制的文件的工作流：被修改－被暂存－被提交</strong></li>
</ul>
<h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><p>git clone [url]<br>从已有的git仓库克隆一个镜像仓库出来，git支持多种数据传输协议</p>
<ul>
<li><p>git://   </p>
</li>
<li><p>http(s)://    </p>
</li>
<li><p>ssh://user@server:/path.git表示的SSH传输协议</p>
</li>
</ul>
<p>git clone 本质上就是自动创建了本地的master分支用于跟踪远程的master分支</p>
<p>例：  在当前目录下创建demo目录，也可重新定义新建项目名称，在命令末尾指定新名称mygrit</p>
<pre><code>git clone git://github.com/chang20159/demo git-demo
</code></pre><h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><p>确定哪些文件当前处于什么状态</p>
<p>例1:当前工作目录很干净，没有任何文件在赏析提交后更改过，也没有处于未跟踪的新文件，当前在alpha分支</p>
<pre><code>On branch alpha
Your branch is up-to-date with &apos;origin/alpha&apos;.
nothing to commit, working directory clean
</code></pre><p>例2:新建test.ftl文件，没有修改，会提示有新建文件</p>
<pre><code>On branch alpha
Your branch is up-to-date with &apos;origin/alpha&apos;.
Changes to be committed:
  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)

        new file:   apollo-message-center-web/src/main/webapp/WEB-INF/pages/notice/test.ftl
</code></pre><p>例3:新建test.ftl，并修改，修改后处于未暂存状态，提示使用git add 对未被跟踪的文件跟踪，并将文件快照放入暂存区域。</p>
<p>在Changes to be committed下的都是已暂存状态，在Changes not staged for commit下的都是未暂存状态。若此时提交，则提交的是已暂存的文件，而不是修改后的文件，所以想提交修改后的文件，需要再次使用git add .将修改后的文件提交到暂存区域。</p>
<pre><code>On branch alpha
Your branch is up-to-date with &apos;origin/alpha&apos;.
Changes to be committed:
  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)

        new file:   apollo-message-center-web/src/main/webapp/WEB-INF/pages/notice/test.ftl

Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)

        modified:   apollo-message-center-web/src/main/webapp/WEB-INF/pages/notice/test.ftl
</code></pre><p>例4. 对已修改的文件，未提交至暂存区域，红色显示，提示使用git add提交至暂存区域，或者直接使用 git commit -a将已修改但不在暂存区域的文</p>
<p>件一起提交。</p>
<pre><code>changdeMacBook-Pro:apollo-message-center chang$ git status
On branch alpha
Your branch is up-to-date with &apos;origin/alpha&apos;.
Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)

        modified:   apollo-message-center-web/src/main/webapp/WEB-INF/pages/notice/edit-notice.ftl

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)

---------------------我是分割线--------------------------

changdeMacBook-Pro:apollo-message-center chang$ git add .
changdeMacBook-Pro:apollo-message-center chang$ git status
On branch alpha
Your branch is up-to-date with &apos;origin/alpha&apos;.
Changes to be committed:
  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)

        modified:   apollo-message-center-web/src/main/webapp/WEB-INF/pages/notice/edit-notice.ftl
</code></pre><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><p>多功能命令，根据目标文件状态的不同，作用也不同。</p>
<ul>
<li><p>跟踪新文件，即将新文件纳入版本控制</p>
</li>
<li><p>将已跟踪的文件放入暂存区</p>
</li>
<li><p>在merge时可将有冲突的文件标记为已解决状态</p>
</li>
</ul>
<h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><p>查看尚未暂存的文件更新了哪些具体内容，比较的是工作目录当前文件与暂存区域快照之间的差异，即修改后还未暂存起来的变化内容。</p>
<p>git diff –cached   git 1.6.1及以上版本可使用git diff –staged，作用相同。</p>
<p>查看已暂存文件和上次提交时快照之间的差异</p>
<h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><p>提交到本地仓库，每次提交前需要确定文件是否都已暂存，commit不会纪录还未暂存的数据。</p>
<p>使用git status查看， 将修改过或新建的文件git add。</p>
<p>在git中提交时，会保存一个提交(commit)对象，该对象保存一个指向暂存内容快照的指针。</p>
<p>例1：直接使用git commit 不带参数，提示提交时要加上提交说明，＃号后是附加信息</p>
<pre><code># Please enter the commit message for your changes. Lines starting
# with &apos;#&apos; will be ignored, and an empty message aborts the commit.
</code></pre><p>例2: 在文件未放入暂存区时，使用git commit -m”test”，提交后git status发现仍然是Changes not staged for commit</p>
<p>因为git commit只提交处于暂存区域的文件，提交前需要git add</p>
<pre><code>changdeMacBook-Pro:apollo-message-center chang$ git commit -m&quot;test &quot;
[alpha d51853e] test
 Committer: chang &lt;chang@changdeMacBook-Pro.local&gt;
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly:

    git config --global user.name &quot;Your Name&quot;
    git config --global user.email you@example.com

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

 1 file changed, 1 insertion(+), 1 deletion(-)
changdeMacBook-Pro:apollo-message-center chang$ git st
On branch alpha
Your branch is ahead of &apos;origin/alpha&apos; by 1 commit.
  (use &quot;git push&quot; to publish your local commits)
Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)

        modified:   apollo-message-center-web/src/main/webapp/WEB-INF/pages/notice/edit-notice.ftl

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre><p>例3.跳过使用暂存区域  git commit 加上-a参数，git会自动将所有已跟踪的文件暂存起来一并提交，从而跳过git add步骤  </p>
<p>   使用git commit -am”test”后，提示当前工作目录很干净，可以使用git push</p>
<pre><code>changdeMacBook-Pro:apollo-message-center chang$ git commit -am&quot;test&quot;
[alpha 545fc8f] test
 Committer: chang &lt;chang@changdeMacBook-Pro.local&gt;
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly:

    git config --global user.name &quot;Your Name&quot;
    git config --global user.email you@example.com

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

 1 file changed, 1 insertion(+), 1 deletion(-)
changdeMacBook-Pro:apollo-message-center chang$ git st
On branch alpha
Your branch is ahead of &apos;origin/alpha&apos; by 2 commits.
  (use &quot;git push&quot; to publish your local commits)
nothing to commit, working directory clean
</code></pre><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><p>查看当前的远程库，会列出每个远程库的简短名称，克隆一个项目后，至少有一个名为origin的远程库，git默认用origin来标识所克隆的原始仓库。</p>
<pre><code>changdeMacBook-Pro:apollo-message-center chang$ git remote
origin
</code></pre><h3 id="git-remote-v"><a href="#git-remote-v" class="headerlink" title="git remote -v"></a>git remote -v</h3><p>-v  –verbose的缩写，显示对应的克隆地址，若有多个远程仓库，会全部列出</p>
<pre><code>changdeMacBook-Pro:apollo-message-center chang$ git remote -v
origin  git@code.dpoa.com:tg/apollo-message-center.git (fetch)
origin  git@code.dpoa.com:tg/apollo-message-center.git (push)
</code></pre><h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><p>从远程仓库中抓取所有本地仓库还没有的数据到本地，执行命令后，可在本地访问该远程仓库中的所有分支。</p>
<p>若是克隆了一个仓库，会自动将远程仓库归于origin名下</p>
<p>git fetch origin会抓取从上次clone后或者上次fetch后别人push的更新。</p>
<p><strong>注意</strong>：fetch命令只是将远端的其他人更新的分支数据拉到本地仓库，并不自动合并到当前工作分支，因而无法在本地编辑该远程仓库中的分支，需要手动合并到当前分支。</p>
<h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>若设置了某个分支用于跟踪某个远程仓库的分支，可使用pull抓取数据下来，并将远程分支自动合并到本地仓库的当前分支</p>
<p>git pull相当于 git fetch + git merge</p>
<h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><p>将本地仓库的数据推送到远程仓库</p>
<p><strong>注意</strong>：在推数据之前，远程仓库已有其他人推送了若干更新，推送操作就会被驳回(rejected)，必须先pull到本地，若有conflict，要先解决冲突，再重新commit，重新push。</p>
<pre><code>changdeMacBook-Pro:apollo-message-center chang$ git push
To git@code.dpoa.com:tg/apollo-message-center.git
 ! [rejected]        alpha -&gt; alpha (fetch first)
error: failed to push some refs to &apos;git@code.dpoa.com:tg/apollo-message-center.git&apos;
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., &apos;git pull ...&apos;) before pushing again.
hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.
</code></pre><h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><p>查看本地分支</p>
<pre><code>changdeMacBook-Pro:apollo-message-center chang$ git branch
  20150604_chang_apolloMsgCenter
  20150612_chang_edit_notice
* alpha
  master
</code></pre><h3 id="git-branch-a"><a href="#git-branch-a" class="headerlink" title="git branch -a"></a>git branch -a</h3><p>查看本地和远程分支 ，可以使用参数 -a 查看</p>
<pre><code>changdeMacBook-Pro:apollo-message-center chang$ git branch -a
  20150604_chang_apolloMsgCenter
  20150612_chang_edit_notice
* alpha
  master
  remotes/origin/20150604_merge_branch
  remotes/origin/20150604_jun_dev
  remotes/origin/20150604_xu_add_message_DAO
  remotes/origin/20150604_chang_apolloMsgCenter
  remotes/origin/20150608_zhao_issue_notice_page
  remotes/origin/20150609_xu_make_Administrator_UI
  remotes/origin/20150612_chang_edit_notice
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/alpha
  remotes/origin/alpha_lightmerge
  remotes/origin/beta_lightmerge
  remotes/origin/master
  remotes/origin/merge_alpha
</code></pre><h2 id="根据远程分支创建本地分支"><a href="#根据远程分支创建本地分支" class="headerlink" title="根据远程分支创建本地分支"></a>根据远程分支创建本地分支</h2><p>例如需要对远程分支remotes/origin/merge_alpha工作，需要创建本地分支对其跟踪</p>
<pre><code>git checkout -b  merge_alpha  origin/merge_alpha
</code></pre><p><strong>注</strong>：从远程分支checkout出来的本地分支，称为跟踪分支(tracking branch)。 </p>
<h2 id="根据本地分支创建远程分支"><a href="#根据本地分支创建远程分支" class="headerlink" title="根据本地分支创建远程分支"></a>根据本地分支创建远程分支</h2><p>在当前分支使用git push ，会自动创建被跟踪的远程分支</p>
<h2 id="git-branch-1"><a href="#git-branch-1" class="headerlink" title="git branch"></a>git branch</h2><h3 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h3><pre><code>git branch ［branch-name］
</code></pre><p>新建分支，新建分支后不会自动切换到这个分支。 </p>
<h3 id="查看所有远程分支"><a href="#查看所有远程分支" class="headerlink" title="查看所有远程分支"></a>查看所有远程分支</h3><pre><code>git branch -r  
</code></pre><p>git保存一个HEAD指针，始终指向当前工作的本地分支。</p>
<pre><code>changdeMacBook-Pro:apollo-message-center chang$ git branch -r
  origin/20150604_merge_branch
  origin/20150604_jun_dev
  origin/20150604_xu_add_message_DAO
  origin/20150604_chang_apolloMsgCenter
  origin/20150608_zhao_issue_notice_page
  origin/20150609_xu_make_Administrator_UI
  origin/20150612_chang_edit_notice
  origin/HEAD -&gt; origin/master
  origin/alpha
  origin/alpha_lightmerge
  origin/beta_lightmerge
  origin/master
  origin/merge_alpha
</code></pre><h3 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h3><pre><code>git branch -d
</code></pre><h2 id="删除远程分支alpha"><a href="#删除远程分支alpha" class="headerlink" title="删除远程分支alpha"></a>删除远程分支alpha</h2><pre><code>git push origin/alpha
</code></pre><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><h3 id="git-checkout-branch-name"><a href="#git-checkout-branch-name" class="headerlink" title="git checkout [branch-name]"></a>git checkout [branch-name]</h3><p>切换分支，切换分支后，HEAD就指向切换后的分支</p>
<h3 id="git-checkout-b-branch-name"><a href="#git-checkout-b-branch-name" class="headerlink" title="git checkout -b [branch-name]"></a>git checkout -b [branch-name]</h3><p>新建分支并切换到该分支，相当于git branch+git checkout</p>
<h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><p>git merge [branch-name] 将branch-name分支合并到当前分支，branch-name分支可以是本地分支，也可以是远程分支。</p>
<p>合并时可能会遇到冲突，git  会在有冲突的文件中加入标准的冲突解决标记。</p>
<p>例如：当前分支alpha   使用git pull</p>
<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.jsp
&lt;h1&gt;Tp Message Center Web is running!!!&lt;/h1&gt;
======= 
&lt;h1&gt;Hello World!&lt;/h1&gt;
&gt;&gt;&gt;&gt;&gt;&gt;&gt; origin/alpha:index.jsp
</code></pre><p>======= 隔开的上半部分是HEAD中的内容，下半部分是远程alpha分支中的内容。<br> 解决冲突的办法：二者选其一或者整合，根据具体情况选择是删除还是保留。&lt;&lt;&lt;&lt;&lt;&lt;&lt; ======= &gt;&gt;&gt;&gt;&gt;&gt;&gt; 这三行都要删掉</p>
<p>冲突解决后使用git add将冲突文件标记为已解决状态，本质上是将快照放到暂存区。确认冲突都解决后，git commit完成此次合并的提交。</p>
<h2 id="gitignore文件"><a href="#gitignore文件" class="headerlink" title=".gitignore文件"></a>.gitignore文件</h2><p>有些文件不需要进行版本控制，不需要纳入git管理，也不希望总出现在未跟踪文件列表，比如日志文件、编译过程中创建的临时文件等等。</p>
<p>可以创建一个名为.gitignore的文件，列出要忽略的文件模式</p>
<h2 id="git文件"><a href="#git文件" class="headerlink" title=".git文件"></a>.git文件</h2><p>如果需要删除对文件的版本控制，可以直接删除.git文件</p>
<p>参考：    </p>
<ul>
<li><a href="http://www.open-open.com/lib/view/open1328069609436.html" target="_blank" rel="external">http://www.open-open.com/lib/view/open1328069609436.html</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
